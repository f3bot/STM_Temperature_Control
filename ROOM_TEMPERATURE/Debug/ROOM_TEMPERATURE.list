
ROOM_TEMPERATURE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4c0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800b690  0800b690  0000c690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bae0  0800bae0  0000d318  2**0
                  CONTENTS
  4 .ARM          00000008  0800bae0  0800bae0  0000cae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bae8  0800bae8  0000d318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bae8  0800bae8  0000cae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800baec  0800baec  0000caec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800baf0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d8  0800bcc8  0000d1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000278  0800bd68  0000d278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000009f4  20000318  0800be08  0000d318  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000d0c  0800be08  0000dd0c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000d318  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f0cb  00000000  00000000  0000d348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000042b7  00000000  00000000  0002c413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001998  00000000  00000000  000306d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013eb  00000000  00000000  00032068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ac4f  00000000  00000000  00033453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000226cb  00000000  00000000  0005e0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fe89b  00000000  00000000  0008076d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017f008  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007e88  00000000  00000000  0017f04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000065  00000000  00000000  00186ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000318 	.word	0x20000318
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b678 	.word	0x0800b678

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000031c 	.word	0x2000031c
 800020c:	0800b678 	.word	0x0800b678

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af04      	add	r7, sp, #16
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 8000f86:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <BMP280_Read8+0x38>)
 8000f88:	6818      	ldr	r0, [r3, #0]
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	230a      	movs	r3, #10
 8000f90:	9302      	str	r3, [sp, #8]
 8000f92:	2301      	movs	r3, #1
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	f107 030f 	add.w	r3, r7, #15
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	21ec      	movs	r1, #236	@ 0xec
 8000fa0:	f002 fcca 	bl	8003938 <HAL_I2C_Mem_Read>
  return tmp;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000334 	.word	0x20000334

08000fb4 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af04      	add	r7, sp, #16
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <BMP280_Read16+0x40>)
 8000fc0:	6818      	ldr	r0, [r3, #0]
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	230a      	movs	r3, #10
 8000fc8:	9302      	str	r3, [sp, #8]
 8000fca:	2302      	movs	r3, #2
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	21ec      	movs	r1, #236	@ 0xec
 8000fd8:	f002 fcae 	bl	8003938 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8000fdc:	7b3b      	ldrb	r3, [r7, #12]
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	7b7b      	ldrb	r3, [r7, #13]
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000334 	.word	0x20000334

08000ff8 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ffd5 	bl	8000fb4 <BMP280_Read16>
 800100a:	4603      	mov	r3, r0
 800100c:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 800100e:	89fb      	ldrh	r3, [r7, #14]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b29b      	uxth	r3, r3
 8001014:	b21a      	sxth	r2, r3
 8001016:	89fb      	ldrh	r3, [r7, #14]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	b21b      	sxth	r3, r3
 800101c:	4313      	orrs	r3, r2
 800101e:	b21b      	sxth	r3, r3
 8001020:	b29b      	uxth	r3, r3
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af04      	add	r7, sp, #16
 8001032:	4603      	mov	r3, r0
 8001034:	460a      	mov	r2, r1
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	4613      	mov	r3, r2
 800103a:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 800103c:	4b08      	ldr	r3, [pc, #32]	@ (8001060 <BMP280_Write8+0x34>)
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	b29a      	uxth	r2, r3
 8001044:	230a      	movs	r3, #10
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2301      	movs	r3, #1
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	1dbb      	adds	r3, r7, #6
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	21ec      	movs	r1, #236	@ 0xec
 8001054:	f002 fb5c 	bl	8003710 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000334 	.word	0x20000334

08001064 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af04      	add	r7, sp, #16
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 800106e:	4b0d      	ldr	r3, [pc, #52]	@ (80010a4 <BMP280_Read24+0x40>)
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	b29a      	uxth	r2, r3
 8001076:	230a      	movs	r3, #10
 8001078:	9302      	str	r3, [sp, #8]
 800107a:	2303      	movs	r3, #3
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2301      	movs	r3, #1
 8001086:	21ec      	movs	r1, #236	@ 0xec
 8001088:	f002 fc56 	bl	8003938 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 800108c:	7b3b      	ldrb	r3, [r7, #12]
 800108e:	041a      	lsls	r2, r3, #16
 8001090:	7b7b      	ldrb	r3, [r7, #13]
 8001092:	021b      	lsls	r3, r3, #8
 8001094:	4313      	orrs	r3, r2
 8001096:	7bba      	ldrb	r2, [r7, #14]
 8001098:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000334 	.word	0x20000334

080010a8 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	4608      	mov	r0, r1
 80010b2:	4611      	mov	r1, r2
 80010b4:	461a      	mov	r2, r3
 80010b6:	4603      	mov	r3, r0
 80010b8:	70fb      	strb	r3, [r7, #3]
 80010ba:	460b      	mov	r3, r1
 80010bc:	70bb      	strb	r3, [r7, #2]
 80010be:	4613      	mov	r3, r2
 80010c0:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 80010c2:	4a48      	ldr	r2, [pc, #288]	@ (80011e4 <BMP280_Init+0x13c>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d901      	bls.n	80010d2 <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 80010ce:	2303      	movs	r3, #3
 80010d0:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80010d2:	4a45      	ldr	r2, [pc, #276]	@ (80011e8 <BMP280_Init+0x140>)
 80010d4:	787b      	ldrb	r3, [r7, #1]
 80010d6:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80010d8:	787b      	ldrb	r3, [r7, #1]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d101      	bne.n	80010e2 <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 80010de:	2300      	movs	r3, #0
 80010e0:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	2b05      	cmp	r3, #5
 80010e6:	d901      	bls.n	80010ec <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80010e8:	2305      	movs	r3, #5
 80010ea:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80010ec:	4a3f      	ldr	r2, [pc, #252]	@ (80011ec <BMP280_Init+0x144>)
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80010f2:	78bb      	ldrb	r3, [r7, #2]
 80010f4:	2b05      	cmp	r3, #5
 80010f6:	d901      	bls.n	80010fc <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80010f8:	2305      	movs	r3, #5
 80010fa:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80010fc:	4a3c      	ldr	r2, [pc, #240]	@ (80011f0 <BMP280_Init+0x148>)
 80010fe:	78bb      	ldrb	r3, [r7, #2]
 8001100:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 8001102:	bf00      	nop
 8001104:	20d0      	movs	r0, #208	@ 0xd0
 8001106:	f7ff ff37 	bl	8000f78 <BMP280_Read8>
 800110a:	4603      	mov	r3, r0
 800110c:	2b58      	cmp	r3, #88	@ 0x58
 800110e:	d1f9      	bne.n	8001104 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8001110:	2088      	movs	r0, #136	@ 0x88
 8001112:	f7ff ff71 	bl	8000ff8 <BMP280_Read16LE>
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	4b36      	ldr	r3, [pc, #216]	@ (80011f4 <BMP280_Init+0x14c>)
 800111c:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 800111e:	208a      	movs	r0, #138	@ 0x8a
 8001120:	f7ff ff6a 	bl	8000ff8 <BMP280_Read16LE>
 8001124:	4603      	mov	r3, r0
 8001126:	b21a      	sxth	r2, r3
 8001128:	4b33      	ldr	r3, [pc, #204]	@ (80011f8 <BMP280_Init+0x150>)
 800112a:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 800112c:	208c      	movs	r0, #140	@ 0x8c
 800112e:	f7ff ff63 	bl	8000ff8 <BMP280_Read16LE>
 8001132:	4603      	mov	r3, r0
 8001134:	b21a      	sxth	r2, r3
 8001136:	4b31      	ldr	r3, [pc, #196]	@ (80011fc <BMP280_Init+0x154>)
 8001138:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 800113a:	208e      	movs	r0, #142	@ 0x8e
 800113c:	f7ff ff5c 	bl	8000ff8 <BMP280_Read16LE>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	4b2e      	ldr	r3, [pc, #184]	@ (8001200 <BMP280_Init+0x158>)
 8001146:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 8001148:	2090      	movs	r0, #144	@ 0x90
 800114a:	f7ff ff55 	bl	8000ff8 <BMP280_Read16LE>
 800114e:	4603      	mov	r3, r0
 8001150:	b21a      	sxth	r2, r3
 8001152:	4b2c      	ldr	r3, [pc, #176]	@ (8001204 <BMP280_Init+0x15c>)
 8001154:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8001156:	2092      	movs	r0, #146	@ 0x92
 8001158:	f7ff ff4e 	bl	8000ff8 <BMP280_Read16LE>
 800115c:	4603      	mov	r3, r0
 800115e:	b21a      	sxth	r2, r3
 8001160:	4b29      	ldr	r3, [pc, #164]	@ (8001208 <BMP280_Init+0x160>)
 8001162:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001164:	2094      	movs	r0, #148	@ 0x94
 8001166:	f7ff ff47 	bl	8000ff8 <BMP280_Read16LE>
 800116a:	4603      	mov	r3, r0
 800116c:	b21a      	sxth	r2, r3
 800116e:	4b27      	ldr	r3, [pc, #156]	@ (800120c <BMP280_Init+0x164>)
 8001170:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8001172:	2096      	movs	r0, #150	@ 0x96
 8001174:	f7ff ff40 	bl	8000ff8 <BMP280_Read16LE>
 8001178:	4603      	mov	r3, r0
 800117a:	b21a      	sxth	r2, r3
 800117c:	4b24      	ldr	r3, [pc, #144]	@ (8001210 <BMP280_Init+0x168>)
 800117e:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001180:	2098      	movs	r0, #152	@ 0x98
 8001182:	f7ff ff39 	bl	8000ff8 <BMP280_Read16LE>
 8001186:	4603      	mov	r3, r0
 8001188:	b21a      	sxth	r2, r3
 800118a:	4b22      	ldr	r3, [pc, #136]	@ (8001214 <BMP280_Init+0x16c>)
 800118c:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 800118e:	209a      	movs	r0, #154	@ 0x9a
 8001190:	f7ff ff32 	bl	8000ff8 <BMP280_Read16LE>
 8001194:	4603      	mov	r3, r0
 8001196:	b21a      	sxth	r2, r3
 8001198:	4b1f      	ldr	r3, [pc, #124]	@ (8001218 <BMP280_Init+0x170>)
 800119a:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 800119c:	209c      	movs	r0, #156	@ 0x9c
 800119e:	f7ff ff2b 	bl	8000ff8 <BMP280_Read16LE>
 80011a2:	4603      	mov	r3, r0
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	4b1d      	ldr	r3, [pc, #116]	@ (800121c <BMP280_Init+0x174>)
 80011a8:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 80011aa:	209e      	movs	r0, #158	@ 0x9e
 80011ac:	f7ff ff24 	bl	8000ff8 <BMP280_Read16LE>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001220 <BMP280_Init+0x178>)
 80011b6:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80011b8:	78fb      	ldrb	r3, [r7, #3]
 80011ba:	015b      	lsls	r3, r3, #5
 80011bc:	b25a      	sxtb	r2, r3
 80011be:	78bb      	ldrb	r3, [r7, #2]
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	b25b      	sxtb	r3, r3
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b25a      	sxtb	r2, r3
 80011c8:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b25b      	sxtb	r3, r3
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4619      	mov	r1, r3
 80011d4:	20f4      	movs	r0, #244	@ 0xf4
 80011d6:	f7ff ff29 	bl	800102c <BMP280_Write8>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000334 	.word	0x20000334
 80011e8:	2000033a 	.word	0x2000033a
 80011ec:	20000338 	.word	0x20000338
 80011f0:	20000339 	.word	0x20000339
 80011f4:	20000350 	.word	0x20000350
 80011f8:	2000033c 	.word	0x2000033c
 80011fc:	2000033e 	.word	0x2000033e
 8001200:	20000352 	.word	0x20000352
 8001204:	20000340 	.word	0x20000340
 8001208:	20000342 	.word	0x20000342
 800120c:	20000344 	.word	0x20000344
 8001210:	20000346 	.word	0x20000346
 8001214:	20000348 	.word	0x20000348
 8001218:	2000034a 	.word	0x2000034a
 800121c:	2000034c 	.word	0x2000034c
 8001220:	2000034e 	.word	0x2000034e

08001224 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 800122a:	4b3d      	ldr	r3, [pc, #244]	@ (8001320 <BMP280_ReadTemperature+0xfc>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d16d      	bne.n	800130e <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 8001232:	20f4      	movs	r0, #244	@ 0xf4
 8001234:	f7ff fea0 	bl	8000f78 <BMP280_Read8>
 8001238:	4603      	mov	r3, r0
 800123a:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 800123c:	7dfb      	ldrb	r3, [r7, #23]
 800123e:	f023 0303 	bic.w	r3, r3, #3
 8001242:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	4619      	mov	r1, r3
 8001250:	20f4      	movs	r0, #244	@ 0xf4
 8001252:	f7ff feeb 	bl	800102c <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 8001256:	20f4      	movs	r0, #244	@ 0xf4
 8001258:	f7ff fe8e 	bl	8000f78 <BMP280_Read8>
 800125c:	4603      	mov	r3, r0
 800125e:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001260:	7dbb      	ldrb	r3, [r7, #22]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001268:	7dbb      	ldrb	r3, [r7, #22]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d14f      	bne.n	800130e <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 800126e:	20f4      	movs	r0, #244	@ 0xf4
 8001270:	f7ff fe82 	bl	8000f78 <BMP280_Read8>
 8001274:	4603      	mov	r3, r0
 8001276:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001278:	7dbb      	ldrb	r3, [r7, #22]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001280:	7dbb      	ldrb	r3, [r7, #22]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d000      	beq.n	8001288 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001286:	e7f2      	b.n	800126e <BMP280_ReadTemperature+0x4a>
				  break;
 8001288:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 800128a:	20fa      	movs	r0, #250	@ 0xfa
 800128c:	f7ff feea 	bl	8001064 <BMP280_Read24>
 8001290:	4603      	mov	r3, r0
 8001292:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	111b      	asrs	r3, r3, #4
 8001298:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	10da      	asrs	r2, r3, #3
 800129e:	4b21      	ldr	r3, [pc, #132]	@ (8001324 <BMP280_ReadTemperature+0x100>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80012a6:	4a20      	ldr	r2, [pc, #128]	@ (8001328 <BMP280_ReadTemperature+0x104>)
 80012a8:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	12db      	asrs	r3, r3, #11
 80012b2:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	111b      	asrs	r3, r3, #4
 80012b8:	4a1a      	ldr	r2, [pc, #104]	@ (8001324 <BMP280_ReadTemperature+0x100>)
 80012ba:	8812      	ldrh	r2, [r2, #0]
 80012bc:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	1112      	asrs	r2, r2, #4
 80012c2:	4918      	ldr	r1, [pc, #96]	@ (8001324 <BMP280_ReadTemperature+0x100>)
 80012c4:	8809      	ldrh	r1, [r1, #0]
 80012c6:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012c8:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012cc:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80012ce:	4a17      	ldr	r2, [pc, #92]	@ (800132c <BMP280_ReadTemperature+0x108>)
 80012d0:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80012d4:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80012d8:	139b      	asrs	r3, r3, #14
 80012da:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	4413      	add	r3, r2
 80012e2:	4a13      	ldr	r2, [pc, #76]	@ (8001330 <BMP280_ReadTemperature+0x10c>)
 80012e4:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80012e6:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <BMP280_ReadTemperature+0x10c>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	3380      	adds	r3, #128	@ 0x80
 80012f2:	121b      	asrs	r3, r3, #8
 80012f4:	ee07 3a90 	vmov	s15, r3
 80012f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fc:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8001300:	edd7 7a01 	vldr	s15, [r7, #4]
 8001304:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001334 <BMP280_ReadTemperature+0x110>
 8001308:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800130c:	e001      	b.n	8001312 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 800130e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001338 <BMP280_ReadTemperature+0x114>
}
 8001312:	eef0 7a47 	vmov.f32	s15, s14
 8001316:	eeb0 0a67 	vmov.f32	s0, s15
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	2000033a 	.word	0x2000033a
 8001324:	20000350 	.word	0x20000350
 8001328:	2000033c 	.word	0x2000033c
 800132c:	2000033e 	.word	0x2000033e
 8001330:	20000354 	.word	0x20000354
 8001334:	42c80000 	.word	0x42c80000
 8001338:	c2c60000 	.word	0xc2c60000

0800133c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001340:	4b1f      	ldr	r3, [pc, #124]	@ (80013c0 <MX_ETH_Init+0x84>)
 8001342:	4a20      	ldr	r2, [pc, #128]	@ (80013c4 <MX_ETH_Init+0x88>)
 8001344:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001346:	4b20      	ldr	r3, [pc, #128]	@ (80013c8 <MX_ETH_Init+0x8c>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800134c:	4b1e      	ldr	r3, [pc, #120]	@ (80013c8 <MX_ETH_Init+0x8c>)
 800134e:	2280      	movs	r2, #128	@ 0x80
 8001350:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001352:	4b1d      	ldr	r3, [pc, #116]	@ (80013c8 <MX_ETH_Init+0x8c>)
 8001354:	22e1      	movs	r2, #225	@ 0xe1
 8001356:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001358:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <MX_ETH_Init+0x8c>)
 800135a:	2200      	movs	r2, #0
 800135c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800135e:	4b1a      	ldr	r3, [pc, #104]	@ (80013c8 <MX_ETH_Init+0x8c>)
 8001360:	2200      	movs	r2, #0
 8001362:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001364:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <MX_ETH_Init+0x8c>)
 8001366:	2200      	movs	r2, #0
 8001368:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800136a:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <MX_ETH_Init+0x84>)
 800136c:	4a16      	ldr	r2, [pc, #88]	@ (80013c8 <MX_ETH_Init+0x8c>)
 800136e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001370:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <MX_ETH_Init+0x84>)
 8001372:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001376:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <MX_ETH_Init+0x84>)
 800137a:	4a14      	ldr	r2, [pc, #80]	@ (80013cc <MX_ETH_Init+0x90>)
 800137c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <MX_ETH_Init+0x84>)
 8001380:	4a13      	ldr	r2, [pc, #76]	@ (80013d0 <MX_ETH_Init+0x94>)
 8001382:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001384:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <MX_ETH_Init+0x84>)
 8001386:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800138a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800138c:	480c      	ldr	r0, [pc, #48]	@ (80013c0 <MX_ETH_Init+0x84>)
 800138e:	f001 fbeb 	bl	8002b68 <HAL_ETH_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001398:	f000 fcce 	bl	8001d38 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800139c:	2238      	movs	r2, #56	@ 0x38
 800139e:	2100      	movs	r1, #0
 80013a0:	480c      	ldr	r0, [pc, #48]	@ (80013d4 <MX_ETH_Init+0x98>)
 80013a2:	f008 f88e 	bl	80094c2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <MX_ETH_Init+0x98>)
 80013a8:	2221      	movs	r2, #33	@ 0x21
 80013aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80013ac:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <MX_ETH_Init+0x98>)
 80013ae:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80013b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80013b4:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <MX_ETH_Init+0x98>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000390 	.word	0x20000390
 80013c4:	40028000 	.word	0x40028000
 80013c8:	20000440 	.word	0x20000440
 80013cc:	20000278 	.word	0x20000278
 80013d0:	200001d8 	.word	0x200001d8
 80013d4:	20000358 	.word	0x20000358

080013d8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08e      	sub	sp, #56	@ 0x38
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001530 <HAL_ETH_MspInit+0x158>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	f040 8096 	bne.w	8001528 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80013fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001534 <HAL_ETH_MspInit+0x15c>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001400:	4a4c      	ldr	r2, [pc, #304]	@ (8001534 <HAL_ETH_MspInit+0x15c>)
 8001402:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001406:	6313      	str	r3, [r2, #48]	@ 0x30
 8001408:	4b4a      	ldr	r3, [pc, #296]	@ (8001534 <HAL_ETH_MspInit+0x15c>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001410:	623b      	str	r3, [r7, #32]
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	4b47      	ldr	r3, [pc, #284]	@ (8001534 <HAL_ETH_MspInit+0x15c>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001418:	4a46      	ldr	r2, [pc, #280]	@ (8001534 <HAL_ETH_MspInit+0x15c>)
 800141a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800141e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001420:	4b44      	ldr	r3, [pc, #272]	@ (8001534 <HAL_ETH_MspInit+0x15c>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001424:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001428:	61fb      	str	r3, [r7, #28]
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	4b41      	ldr	r3, [pc, #260]	@ (8001534 <HAL_ETH_MspInit+0x15c>)
 800142e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001430:	4a40      	ldr	r2, [pc, #256]	@ (8001534 <HAL_ETH_MspInit+0x15c>)
 8001432:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001436:	6313      	str	r3, [r2, #48]	@ 0x30
 8001438:	4b3e      	ldr	r3, [pc, #248]	@ (8001534 <HAL_ETH_MspInit+0x15c>)
 800143a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001444:	4b3b      	ldr	r3, [pc, #236]	@ (8001534 <HAL_ETH_MspInit+0x15c>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001448:	4a3a      	ldr	r2, [pc, #232]	@ (8001534 <HAL_ETH_MspInit+0x15c>)
 800144a:	f043 0304 	orr.w	r3, r3, #4
 800144e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001450:	4b38      	ldr	r3, [pc, #224]	@ (8001534 <HAL_ETH_MspInit+0x15c>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145c:	4b35      	ldr	r3, [pc, #212]	@ (8001534 <HAL_ETH_MspInit+0x15c>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001460:	4a34      	ldr	r2, [pc, #208]	@ (8001534 <HAL_ETH_MspInit+0x15c>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6313      	str	r3, [r2, #48]	@ 0x30
 8001468:	4b32      	ldr	r3, [pc, #200]	@ (8001534 <HAL_ETH_MspInit+0x15c>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001474:	4b2f      	ldr	r3, [pc, #188]	@ (8001534 <HAL_ETH_MspInit+0x15c>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001478:	4a2e      	ldr	r2, [pc, #184]	@ (8001534 <HAL_ETH_MspInit+0x15c>)
 800147a:	f043 0302 	orr.w	r3, r3, #2
 800147e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001480:	4b2c      	ldr	r3, [pc, #176]	@ (8001534 <HAL_ETH_MspInit+0x15c>)
 8001482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800148c:	4b29      	ldr	r3, [pc, #164]	@ (8001534 <HAL_ETH_MspInit+0x15c>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001490:	4a28      	ldr	r2, [pc, #160]	@ (8001534 <HAL_ETH_MspInit+0x15c>)
 8001492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001496:	6313      	str	r3, [r2, #48]	@ 0x30
 8001498:	4b26      	ldr	r3, [pc, #152]	@ (8001534 <HAL_ETH_MspInit+0x15c>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80014a4:	2332      	movs	r3, #50	@ 0x32
 80014a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014b4:	230b      	movs	r3, #11
 80014b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014bc:	4619      	mov	r1, r3
 80014be:	481e      	ldr	r0, [pc, #120]	@ (8001538 <HAL_ETH_MspInit+0x160>)
 80014c0:	f001 fea0 	bl	8003204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80014c4:	2386      	movs	r3, #134	@ 0x86
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014d4:	230b      	movs	r3, #11
 80014d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014dc:	4619      	mov	r1, r3
 80014de:	4817      	ldr	r0, [pc, #92]	@ (800153c <HAL_ETH_MspInit+0x164>)
 80014e0:	f001 fe90 	bl	8003204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80014e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014f6:	230b      	movs	r3, #11
 80014f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	480f      	ldr	r0, [pc, #60]	@ (8001540 <HAL_ETH_MspInit+0x168>)
 8001502:	f001 fe7f 	bl	8003204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001506:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001518:	230b      	movs	r3, #11
 800151a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800151c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001520:	4619      	mov	r1, r3
 8001522:	4808      	ldr	r0, [pc, #32]	@ (8001544 <HAL_ETH_MspInit+0x16c>)
 8001524:	f001 fe6e 	bl	8003204 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001528:	bf00      	nop
 800152a:	3738      	adds	r7, #56	@ 0x38
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40028000 	.word	0x40028000
 8001534:	40023800 	.word	0x40023800
 8001538:	40020800 	.word	0x40020800
 800153c:	40020000 	.word	0x40020000
 8001540:	40020400 	.word	0x40020400
 8001544:	40021800 	.word	0x40021800

08001548 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08c      	sub	sp, #48	@ 0x30
 800154c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
 800155c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800155e:	4b64      	ldr	r3, [pc, #400]	@ (80016f0 <MX_GPIO_Init+0x1a8>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a63      	ldr	r2, [pc, #396]	@ (80016f0 <MX_GPIO_Init+0x1a8>)
 8001564:	f043 0310 	orr.w	r3, r3, #16
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b61      	ldr	r3, [pc, #388]	@ (80016f0 <MX_GPIO_Init+0x1a8>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0310 	and.w	r3, r3, #16
 8001572:	61bb      	str	r3, [r7, #24]
 8001574:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001576:	4b5e      	ldr	r3, [pc, #376]	@ (80016f0 <MX_GPIO_Init+0x1a8>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	4a5d      	ldr	r2, [pc, #372]	@ (80016f0 <MX_GPIO_Init+0x1a8>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	6313      	str	r3, [r2, #48]	@ 0x30
 8001582:	4b5b      	ldr	r3, [pc, #364]	@ (80016f0 <MX_GPIO_Init+0x1a8>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800158e:	4b58      	ldr	r3, [pc, #352]	@ (80016f0 <MX_GPIO_Init+0x1a8>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a57      	ldr	r2, [pc, #348]	@ (80016f0 <MX_GPIO_Init+0x1a8>)
 8001594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b55      	ldr	r3, [pc, #340]	@ (80016f0 <MX_GPIO_Init+0x1a8>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b52      	ldr	r3, [pc, #328]	@ (80016f0 <MX_GPIO_Init+0x1a8>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4a51      	ldr	r2, [pc, #324]	@ (80016f0 <MX_GPIO_Init+0x1a8>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b2:	4b4f      	ldr	r3, [pc, #316]	@ (80016f0 <MX_GPIO_Init+0x1a8>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	4b4c      	ldr	r3, [pc, #304]	@ (80016f0 <MX_GPIO_Init+0x1a8>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	4a4b      	ldr	r2, [pc, #300]	@ (80016f0 <MX_GPIO_Init+0x1a8>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ca:	4b49      	ldr	r3, [pc, #292]	@ (80016f0 <MX_GPIO_Init+0x1a8>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d6:	4b46      	ldr	r3, [pc, #280]	@ (80016f0 <MX_GPIO_Init+0x1a8>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a45      	ldr	r2, [pc, #276]	@ (80016f0 <MX_GPIO_Init+0x1a8>)
 80015dc:	f043 0308 	orr.w	r3, r3, #8
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b43      	ldr	r3, [pc, #268]	@ (80016f0 <MX_GPIO_Init+0x1a8>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015ee:	4b40      	ldr	r3, [pc, #256]	@ (80016f0 <MX_GPIO_Init+0x1a8>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a3f      	ldr	r2, [pc, #252]	@ (80016f0 <MX_GPIO_Init+0x1a8>)
 80015f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b3d      	ldr	r3, [pc, #244]	@ (80016f0 <MX_GPIO_Init+0x1a8>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001606:	2201      	movs	r2, #1
 8001608:	2110      	movs	r1, #16
 800160a:	483a      	ldr	r0, [pc, #232]	@ (80016f4 <MX_GPIO_Init+0x1ac>)
 800160c:	f001 ffa6 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS_GPIO_Port, SPI4_CS_Pin, GPIO_PIN_SET);
 8001610:	2201      	movs	r2, #1
 8001612:	2108      	movs	r1, #8
 8001614:	4838      	ldr	r0, [pc, #224]	@ (80016f8 <MX_GPIO_Init+0x1b0>)
 8001616:	f001 ffa1 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001620:	4836      	ldr	r0, [pc, #216]	@ (80016fc <MX_GPIO_Init+0x1b4>)
 8001622:	f001 ff9b 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	2140      	movs	r1, #64	@ 0x40
 800162a:	4835      	ldr	r0, [pc, #212]	@ (8001700 <MX_GPIO_Init+0x1b8>)
 800162c:	f001 ff96 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001630:	2310      	movs	r3, #16
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	2301      	movs	r3, #1
 8001636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	4619      	mov	r1, r3
 8001646:	482b      	ldr	r0, [pc, #172]	@ (80016f4 <MX_GPIO_Init+0x1ac>)
 8001648:	f001 fddc 	bl	8003204 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800164c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001652:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	4619      	mov	r1, r3
 8001662:	4828      	ldr	r0, [pc, #160]	@ (8001704 <MX_GPIO_Init+0x1bc>)
 8001664:	f001 fdce 	bl	8003204 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS_Pin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin;
 8001668:	2308      	movs	r3, #8
 800166a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI4_CS_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	4619      	mov	r1, r3
 800167e:	481e      	ldr	r0, [pc, #120]	@ (80016f8 <MX_GPIO_Init+0x1b0>)
 8001680:	f001 fdc0 	bl	8003204 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001684:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168a:	2301      	movs	r3, #1
 800168c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	4817      	ldr	r0, [pc, #92]	@ (80016fc <MX_GPIO_Init+0x1b4>)
 800169e:	f001 fdb1 	bl	8003204 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80016a2:	2340      	movs	r3, #64	@ 0x40
 80016a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a6:	2301      	movs	r3, #1
 80016a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	4619      	mov	r1, r3
 80016b8:	4811      	ldr	r0, [pc, #68]	@ (8001700 <MX_GPIO_Init+0x1b8>)
 80016ba:	f001 fda3 	bl	8003204 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80016be:	2380      	movs	r3, #128	@ 0x80
 80016c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c2:	2300      	movs	r3, #0
 80016c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	4619      	mov	r1, r3
 80016d0:	480b      	ldr	r0, [pc, #44]	@ (8001700 <MX_GPIO_Init+0x1b8>)
 80016d2:	f001 fd97 	bl	8003204 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	2028      	movs	r0, #40	@ 0x28
 80016dc:	f001 f97b 	bl	80029d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016e0:	2028      	movs	r0, #40	@ 0x28
 80016e2:	f001 f994 	bl	8002a0e <HAL_NVIC_EnableIRQ>

}
 80016e6:	bf00      	nop
 80016e8:	3730      	adds	r7, #48	@ 0x30
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40020000 	.word	0x40020000
 80016fc:	40020400 	.word	0x40020400
 8001700:	40021800 	.word	0x40021800
 8001704:	40020800 	.word	0x40020800

08001708 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800170c:	4b1b      	ldr	r3, [pc, #108]	@ (800177c <MX_I2C1_Init+0x74>)
 800170e:	4a1c      	ldr	r2, [pc, #112]	@ (8001780 <MX_I2C1_Init+0x78>)
 8001710:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001712:	4b1a      	ldr	r3, [pc, #104]	@ (800177c <MX_I2C1_Init+0x74>)
 8001714:	4a1b      	ldr	r2, [pc, #108]	@ (8001784 <MX_I2C1_Init+0x7c>)
 8001716:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001718:	4b18      	ldr	r3, [pc, #96]	@ (800177c <MX_I2C1_Init+0x74>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800171e:	4b17      	ldr	r3, [pc, #92]	@ (800177c <MX_I2C1_Init+0x74>)
 8001720:	2201      	movs	r2, #1
 8001722:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001724:	4b15      	ldr	r3, [pc, #84]	@ (800177c <MX_I2C1_Init+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800172a:	4b14      	ldr	r3, [pc, #80]	@ (800177c <MX_I2C1_Init+0x74>)
 800172c:	2200      	movs	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001730:	4b12      	ldr	r3, [pc, #72]	@ (800177c <MX_I2C1_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001736:	4b11      	ldr	r3, [pc, #68]	@ (800177c <MX_I2C1_Init+0x74>)
 8001738:	2200      	movs	r2, #0
 800173a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800173c:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <MX_I2C1_Init+0x74>)
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001742:	480e      	ldr	r0, [pc, #56]	@ (800177c <MX_I2C1_Init+0x74>)
 8001744:	f001 ff48 	bl	80035d8 <HAL_I2C_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800174e:	f000 faf3 	bl	8001d38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001752:	2100      	movs	r1, #0
 8001754:	4809      	ldr	r0, [pc, #36]	@ (800177c <MX_I2C1_Init+0x74>)
 8001756:	f002 fccb 	bl	80040f0 <HAL_I2CEx_ConfigAnalogFilter>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001760:	f000 faea 	bl	8001d38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001764:	2100      	movs	r1, #0
 8001766:	4805      	ldr	r0, [pc, #20]	@ (800177c <MX_I2C1_Init+0x74>)
 8001768:	f002 fd0d 	bl	8004186 <HAL_I2CEx_ConfigDigitalFilter>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001772:	f000 fae1 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000448 	.word	0x20000448
 8001780:	40005400 	.word	0x40005400
 8001784:	00808cd2 	.word	0x00808cd2

08001788 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b0aa      	sub	sp, #168	@ 0xa8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a0:	f107 0310 	add.w	r3, r7, #16
 80017a4:	2284      	movs	r2, #132	@ 0x84
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f007 fe8a 	bl	80094c2 <memset>
  if(i2cHandle->Instance==I2C1)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a22      	ldr	r2, [pc, #136]	@ (800183c <HAL_I2C_MspInit+0xb4>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d13c      	bne.n	8001832 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017be:	2300      	movs	r3, #0
 80017c0:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017c2:	f107 0310 	add.w	r3, r7, #16
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 fb3e 	bl	8004e48 <HAL_RCCEx_PeriphCLKConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80017d2:	f000 fab1 	bl	8001d38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <HAL_I2C_MspInit+0xb8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	4a19      	ldr	r2, [pc, #100]	@ (8001840 <HAL_I2C_MspInit+0xb8>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e2:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <HAL_I2C_MspInit+0xb8>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f6:	2312      	movs	r3, #18
 80017f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001808:	2304      	movs	r3, #4
 800180a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001812:	4619      	mov	r1, r3
 8001814:	480b      	ldr	r0, [pc, #44]	@ (8001844 <HAL_I2C_MspInit+0xbc>)
 8001816:	f001 fcf5 	bl	8003204 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800181a:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <HAL_I2C_MspInit+0xb8>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	4a08      	ldr	r2, [pc, #32]	@ (8001840 <HAL_I2C_MspInit+0xb8>)
 8001820:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001824:	6413      	str	r3, [r2, #64]	@ 0x40
 8001826:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <HAL_I2C_MspInit+0xb8>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001832:	bf00      	nop
 8001834:	37a8      	adds	r7, #168	@ 0xa8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40005400 	.word	0x40005400
 8001840:	40023800 	.word	0x40023800
 8001844:	40020400 	.word	0x40020400

08001848 <calculate_PID>:
	float prev_error;
	float prev_u_I;
};
struct PID_Controller PID1;

float calculate_PID(struct PID_Controller *PID, float set_temp, float measured_temp){
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	b08a      	sub	sp, #40	@ 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	ed87 0a02 	vstr	s0, [r7, #8]
 8001854:	edc7 0a01 	vstr	s1, [r7, #4]
	float u = 0;
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	@ 0x24
	float error;
	float u_P, u_I, u_D;

	error = set_temp - measured_temp;
 800185e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001862:	edd7 7a01 	vldr	s15, [r7, #4]
 8001866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800186a:	edc7 7a08 	vstr	s15, [r7, #32]

	//Proportionoal gain
	u_P = PID->Kp * error;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	edd3 7a00 	vldr	s15, [r3]
 8001874:	ed97 7a08 	vldr	s14, [r7, #32]
 8001878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800187c:	edc7 7a07 	vstr	s15, [r7, #28]

	//Integral gain

	u_I = PID->Ki * PID->Tp / 2.0 * (error + PID->prev_error) + PID->prev_u_I;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	ed93 7a01 	vldr	s14, [r3, #4]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	edd3 7a03 	vldr	s15, [r3, #12]
 800188c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001890:	ee17 0a90 	vmov	r0, s15
 8001894:	f7fe fe78 	bl	8000588 <__aeabi_f2d>
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018a0:	f7fe fff4 	bl	800088c <__aeabi_ddiv>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4614      	mov	r4, r2
 80018aa:	461d      	mov	r5, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	ed93 7a04 	vldr	s14, [r3, #16]
 80018b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80018b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ba:	ee17 0a90 	vmov	r0, s15
 80018be:	f7fe fe63 	bl	8000588 <__aeabi_f2d>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4620      	mov	r0, r4
 80018c8:	4629      	mov	r1, r5
 80018ca:	f7fe feb5 	bl	8000638 <__aeabi_dmul>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4614      	mov	r4, r2
 80018d4:	461d      	mov	r5, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fe54 	bl	8000588 <__aeabi_f2d>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4620      	mov	r0, r4
 80018e6:	4629      	mov	r1, r5
 80018e8:	f7fe fcf0 	bl	80002cc <__adddf3>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	f7ff f978 	bl	8000be8 <__aeabi_d2f>
 80018f8:	4603      	mov	r3, r0
 80018fa:	61bb      	str	r3, [r7, #24]
	PID->prev_u_I = u_I;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	615a      	str	r2, [r3, #20]

	//Derivative gain

	u_D = (error - PID->prev_error) / PID->Tp;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	edd3 7a04 	vldr	s15, [r3, #16]
 8001908:	ed97 7a08 	vldr	s14, [r7, #32]
 800190c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	ed93 7a03 	vldr	s14, [r3, #12]
 8001916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800191a:	edc7 7a05 	vstr	s15, [r7, #20]


	PID->prev_error = error;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6a3a      	ldr	r2, [r7, #32]
 8001922:	611a      	str	r2, [r3, #16]

	u = u_P + u_I + u_D;
 8001924:	ed97 7a07 	vldr	s14, [r7, #28]
 8001928:	edd7 7a06 	vldr	s15, [r7, #24]
 800192c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001930:	ed97 7a05 	vldr	s14, [r7, #20]
 8001934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001938:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	return u;
 800193c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193e:	ee07 3a90 	vmov	s15, r3
}
 8001942:	eeb0 0a67 	vmov.f32	s0, s15
 8001946:	3728      	adds	r7, #40	@ 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bdb0      	pop	{r4, r5, r7, pc}

0800194c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800194c:	b580      	push	{r7, lr}
 800194e:	ed2d 8b02 	vpush	{d8}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001960:	d14f      	bne.n	8001a02 <HAL_TIM_PeriodElapsedCallback+0xb6>
    	current_temperature_f = BMP280_ReadTemperature();
 8001962:	f7ff fc5f 	bl	8001224 <BMP280_ReadTemperature>
 8001966:	eef0 7a40 	vmov.f32	s15, s0
 800196a:	4b29      	ldr	r3, [pc, #164]	@ (8001a10 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800196c:	edc3 7a00 	vstr	s15, [r3]
    	pwm_duty_f = (htim3.Init.Period * calculate_PID(&PID1, set_temp_f, current_temperature_f));
 8001970:	4b28      	ldr	r3, [pc, #160]	@ (8001a14 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800197c:	4b26      	ldr	r3, [pc, #152]	@ (8001a18 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800197e:	edd3 7a00 	vldr	s15, [r3]
 8001982:	4b23      	ldr	r3, [pc, #140]	@ (8001a10 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001984:	ed93 7a00 	vldr	s14, [r3]
 8001988:	eef0 0a47 	vmov.f32	s1, s14
 800198c:	eeb0 0a67 	vmov.f32	s0, s15
 8001990:	4822      	ldr	r0, [pc, #136]	@ (8001a1c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001992:	f7ff ff59 	bl	8001848 <calculate_PID>
 8001996:	eef0 7a40 	vmov.f32	s15, s0
 800199a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800199e:	4b20      	ldr	r3, [pc, #128]	@ (8001a20 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80019a0:	edc3 7a00 	vstr	s15, [r3]
    	if (pwm_duty_f < 0.0 ){
 80019a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a20 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80019a6:	edd3 7a00 	vldr	s15, [r3]
 80019aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b2:	d503      	bpl.n	80019bc <HAL_TIM_PeriodElapsedCallback+0x70>
    		pwm_duty_u = 0;
 80019b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a24 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	801a      	strh	r2, [r3, #0]
 80019ba:	e01d      	b.n	80019f8 <HAL_TIM_PeriodElapsedCallback+0xac>
    	}
    	else if (pwm_duty_f > htim3.Init.Period){
 80019bc:	4b15      	ldr	r3, [pc, #84]	@ (8001a14 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019c8:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d6:	d505      	bpl.n	80019e4 <HAL_TIM_PeriodElapsedCallback+0x98>
    		pwm_duty_u = htim3.Init.Period;
 80019d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	b29a      	uxth	r2, r3
 80019de:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80019e0:	801a      	strh	r2, [r3, #0]
 80019e2:	e009      	b.n	80019f8 <HAL_TIM_PeriodElapsedCallback+0xac>
    	}
    	else pwm_duty_u = (uint16_t) pwm_duty_f;
 80019e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a20 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ee:	ee17 3a90 	vmov	r3, s15
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80019f6:	801a      	strh	r2, [r3, #0]
    	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_duty_u);
 80019f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a24 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80019fa:	881a      	ldrh	r2, [r3, #0]
 80019fc:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	635a      	str	r2, [r3, #52]	@ 0x34

    }
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	ecbd 8b02 	vpop	{d8}
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	2000049c 	.word	0x2000049c
 8001a14:	20000580 	.word	0x20000580
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	200004a8 	.word	0x200004a8
 8001a20:	200004a0 	.word	0x200004a0
 8001a24:	200004a4 	.word	0x200004a4

08001a28 <HAL_UART_RxCpltCallback>:
}

#define BUFFER_SIZE 10
char received[BUFFER_SIZE];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a28:	b5b0      	push	{r4, r5, r7, lr}
 8001a2a:	b0ae      	sub	sp, #184	@ 0xb8
 8001a2c:	af04      	add	r7, sp, #16
 8001a2e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a55      	ldr	r2, [pc, #340]	@ (8001b8c <HAL_UART_RxCpltCallback+0x164>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	f040 80a4 	bne.w	8001b84 <HAL_UART_RxCpltCallback+0x15c>

        if (strncmp(received, "SETTEMP", 7) == 0) {
 8001a3c:	2207      	movs	r2, #7
 8001a3e:	4954      	ldr	r1, [pc, #336]	@ (8001b90 <HAL_UART_RxCpltCallback+0x168>)
 8001a40:	4854      	ldr	r0, [pc, #336]	@ (8001b94 <HAL_UART_RxCpltCallback+0x16c>)
 8001a42:	f007 fd46 	bl	80094d2 <strncmp>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d149      	bne.n	8001ae0 <HAL_UART_RxCpltCallback+0xb8>
            char *tempStr = &received[7];
 8001a4c:	4b52      	ldr	r3, [pc, #328]	@ (8001b98 <HAL_UART_RxCpltCallback+0x170>)
 8001a4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            int tempValue = atoi(tempStr);
 8001a52:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001a56:	f006 ff2e 	bl	80088b6 <atoi>
 8001a5a:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

            if (tempValue > 0 && tempValue <= 100) {
 8001a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	dd26      	ble.n	8001ab4 <HAL_UART_RxCpltCallback+0x8c>
 8001a66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a6a:	2b64      	cmp	r3, #100	@ 0x64
 8001a6c:	dc22      	bgt.n	8001ab4 <HAL_UART_RxCpltCallback+0x8c>
                set_temp_f = (float)tempValue;
 8001a6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7a:	4b48      	ldr	r3, [pc, #288]	@ (8001b9c <HAL_UART_RxCpltCallback+0x174>)
 8001a7c:	edc3 7a00 	vstr	s15, [r3]

                char response[50];
                sprintf(response, "New temperature set: %.2fC\r\n", set_temp_f);
 8001a80:	4b46      	ldr	r3, [pc, #280]	@ (8001b9c <HAL_UART_RxCpltCallback+0x174>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fd7f 	bl	8000588 <__aeabi_f2d>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	f107 0008 	add.w	r0, r7, #8
 8001a92:	4943      	ldr	r1, [pc, #268]	@ (8001ba0 <HAL_UART_RxCpltCallback+0x178>)
 8001a94:	f007 fcb2 	bl	80093fc <siprintf>
                HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 100);
 8001a98:	f107 0308 	add.w	r3, r7, #8
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fc07 	bl	80002b0 <strlen>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	f107 0108 	add.w	r1, r7, #8
 8001aaa:	2364      	movs	r3, #100	@ 0x64
 8001aac:	483d      	ldr	r0, [pc, #244]	@ (8001ba4 <HAL_UART_RxCpltCallback+0x17c>)
 8001aae:	f005 f977 	bl	8006da0 <HAL_UART_Transmit>
            if (tempValue > 0 && tempValue <= 100) {
 8001ab2:	e059      	b.n	8001b68 <HAL_UART_RxCpltCallback+0x140>
            } else {
                char response[50];
                sprintf(response, "Invalid temperature value: %s\r\n", tempStr);
 8001ab4:	f107 0308 	add.w	r3, r7, #8
 8001ab8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001abc:	493a      	ldr	r1, [pc, #232]	@ (8001ba8 <HAL_UART_RxCpltCallback+0x180>)
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f007 fc9c 	bl	80093fc <siprintf>
                HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 100);
 8001ac4:	f107 0308 	add.w	r3, r7, #8
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fbf1 	bl	80002b0 <strlen>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	f107 0108 	add.w	r1, r7, #8
 8001ad6:	2364      	movs	r3, #100	@ 0x64
 8001ad8:	4832      	ldr	r0, [pc, #200]	@ (8001ba4 <HAL_UART_RxCpltCallback+0x17c>)
 8001ada:	f005 f961 	bl	8006da0 <HAL_UART_Transmit>
 8001ade:	e043      	b.n	8001b68 <HAL_UART_RxCpltCallback+0x140>
            }
        } else if (strncmp(received, "LOOKUPTMP", 9) == 0) {
 8001ae0:	2209      	movs	r2, #9
 8001ae2:	4932      	ldr	r1, [pc, #200]	@ (8001bac <HAL_UART_RxCpltCallback+0x184>)
 8001ae4:	482b      	ldr	r0, [pc, #172]	@ (8001b94 <HAL_UART_RxCpltCallback+0x16c>)
 8001ae6:	f007 fcf4 	bl	80094d2 <strncmp>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d127      	bne.n	8001b40 <HAL_UART_RxCpltCallback+0x118>
            // Respond with the current variables
            char response[150];
            sprintf(response, "Current temperature: %.2fC, Set temperature: %.2fC, PWM duty cycle: %u%%\r\n",
 8001af0:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb0 <HAL_UART_RxCpltCallback+0x188>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe fd47 	bl	8000588 <__aeabi_f2d>
 8001afa:	4604      	mov	r4, r0
 8001afc:	460d      	mov	r5, r1
 8001afe:	4b27      	ldr	r3, [pc, #156]	@ (8001b9c <HAL_UART_RxCpltCallback+0x174>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fd40 	bl	8000588 <__aeabi_f2d>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4929      	ldr	r1, [pc, #164]	@ (8001bb4 <HAL_UART_RxCpltCallback+0x18c>)
 8001b0e:	8809      	ldrh	r1, [r1, #0]
 8001b10:	f107 0008 	add.w	r0, r7, #8
 8001b14:	9102      	str	r1, [sp, #8]
 8001b16:	e9cd 2300 	strd	r2, r3, [sp]
 8001b1a:	4622      	mov	r2, r4
 8001b1c:	462b      	mov	r3, r5
 8001b1e:	4926      	ldr	r1, [pc, #152]	@ (8001bb8 <HAL_UART_RxCpltCallback+0x190>)
 8001b20:	f007 fc6c 	bl	80093fc <siprintf>
                    current_temperature_f, set_temp_f, pwm_duty_u);
            HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 100);
 8001b24:	f107 0308 	add.w	r3, r7, #8
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fbc1 	bl	80002b0 <strlen>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	f107 0108 	add.w	r1, r7, #8
 8001b36:	2364      	movs	r3, #100	@ 0x64
 8001b38:	481a      	ldr	r0, [pc, #104]	@ (8001ba4 <HAL_UART_RxCpltCallback+0x17c>)
 8001b3a:	f005 f931 	bl	8006da0 <HAL_UART_Transmit>
 8001b3e:	e013      	b.n	8001b68 <HAL_UART_RxCpltCallback+0x140>
        } else {
            // Unrecognized command
            char response[50];
            sprintf(response, "Failed to recognize command: %s\r\n", received);
 8001b40:	f107 0308 	add.w	r3, r7, #8
 8001b44:	4a13      	ldr	r2, [pc, #76]	@ (8001b94 <HAL_UART_RxCpltCallback+0x16c>)
 8001b46:	491d      	ldr	r1, [pc, #116]	@ (8001bbc <HAL_UART_RxCpltCallback+0x194>)
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f007 fc57 	bl	80093fc <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), 100);
 8001b4e:	f107 0308 	add.w	r3, r7, #8
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fbac 	bl	80002b0 <strlen>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	f107 0108 	add.w	r1, r7, #8
 8001b60:	2364      	movs	r3, #100	@ 0x64
 8001b62:	4810      	ldr	r0, [pc, #64]	@ (8001ba4 <HAL_UART_RxCpltCallback+0x17c>)
 8001b64:	f005 f91c 	bl	8006da0 <HAL_UART_Transmit>
        }

        // Clear the buffer for the next command
        memset(received, '\0', strlen(received));
 8001b68:	480a      	ldr	r0, [pc, #40]	@ (8001b94 <HAL_UART_RxCpltCallback+0x16c>)
 8001b6a:	f7fe fba1 	bl	80002b0 <strlen>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	2100      	movs	r1, #0
 8001b74:	4807      	ldr	r0, [pc, #28]	@ (8001b94 <HAL_UART_RxCpltCallback+0x16c>)
 8001b76:	f007 fca4 	bl	80094c2 <memset>
        HAL_UART_Receive_IT(&huart3, (uint8_t *)received, BUFFER_SIZE - 1);
 8001b7a:	2209      	movs	r2, #9
 8001b7c:	4905      	ldr	r1, [pc, #20]	@ (8001b94 <HAL_UART_RxCpltCallback+0x16c>)
 8001b7e:	4809      	ldr	r0, [pc, #36]	@ (8001ba4 <HAL_UART_RxCpltCallback+0x17c>)
 8001b80:	f005 f997 	bl	8006eb2 <HAL_UART_Receive_IT>
    }
}
 8001b84:	bf00      	nop
 8001b86:	37a8      	adds	r7, #168	@ 0xa8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8c:	40004800 	.word	0x40004800
 8001b90:	0800b690 	.word	0x0800b690
 8001b94:	200004c0 	.word	0x200004c0
 8001b98:	200004c7 	.word	0x200004c7
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	0800b698 	.word	0x0800b698
 8001ba4:	20000654 	.word	0x20000654
 8001ba8:	0800b6b8 	.word	0x0800b6b8
 8001bac:	0800b6d8 	.word	0x0800b6d8
 8001bb0:	2000049c 	.word	0x2000049c
 8001bb4:	200004a4 	.word	0x200004a4
 8001bb8:	0800b6e4 	.word	0x0800b6e4
 8001bbc:	0800b730 	.word	0x0800b730

08001bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	PID1.Kp = 0.038102305639845;
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c44 <main+0x84>)
 8001bc6:	4a20      	ldr	r2, [pc, #128]	@ (8001c48 <main+0x88>)
 8001bc8:	601a      	str	r2, [r3, #0]
	PID1.Ki = 0.000269333866370601;
 8001bca:	4b1e      	ldr	r3, [pc, #120]	@ (8001c44 <main+0x84>)
 8001bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8001c4c <main+0x8c>)
 8001bce:	605a      	str	r2, [r3, #4]
	PID1.Kd = 0.01898381935333;
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c44 <main+0x84>)
 8001bd2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c50 <main+0x90>)
 8001bd4:	609a      	str	r2, [r3, #8]
	PID1.Tp = 1;
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c44 <main+0x84>)
 8001bd8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001bdc:	60da      	str	r2, [r3, #12]
	PID1.prev_error = 0;
 8001bde:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <main+0x84>)
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]
	PID1.prev_u_I = 0;
 8001be6:	4b17      	ldr	r3, [pc, #92]	@ (8001c44 <main+0x84>)
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	615a      	str	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bee:	f000 fd96 	bl	800271e <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bf2:	f000 f839 	bl	8001c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bf6:	f7ff fca7 	bl	8001548 <MX_GPIO_Init>
  MX_ETH_Init();
 8001bfa:	f7ff fb9f 	bl	800133c <MX_ETH_Init>
  MX_I2C1_Init();
 8001bfe:	f7ff fd83 	bl	8001708 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001c02:	f000 fbe1 	bl	80023c8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001c06:	f000 fcb9 	bl	800257c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI4_Init();
 8001c0a:	f000 f89b 	bl	8001d44 <MX_SPI4_Init>
  MX_TIM3_Init();
 8001c0e:	f000 fac3 	bl	8002198 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001c12:	f000 fa73 	bl	80020fc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001c16:	f000 fba7 	bl	8002368 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	2101      	movs	r1, #1
 8001c20:	480c      	ldr	r0, [pc, #48]	@ (8001c54 <main+0x94>)
 8001c22:	f7ff fa41 	bl	80010a8 <BMP280_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001c26:	2100      	movs	r1, #0
 8001c28:	480b      	ldr	r0, [pc, #44]	@ (8001c58 <main+0x98>)
 8001c2a:	f003 ffed 	bl	8005c08 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001c2e:	480b      	ldr	r0, [pc, #44]	@ (8001c5c <main+0x9c>)
 8001c30:	f003 ff10 	bl	8005a54 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)received, BUFFER_SIZE - 1);
 8001c34:	2209      	movs	r2, #9
 8001c36:	490a      	ldr	r1, [pc, #40]	@ (8001c60 <main+0xa0>)
 8001c38:	480a      	ldr	r0, [pc, #40]	@ (8001c64 <main+0xa4>)
 8001c3a:	f005 f93a 	bl	8006eb2 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c3e:	bf00      	nop
 8001c40:	e7fd      	b.n	8001c3e <main+0x7e>
 8001c42:	bf00      	nop
 8001c44:	200004a8 	.word	0x200004a8
 8001c48:	3d1c112a 	.word	0x3d1c112a
 8001c4c:	398d3561 	.word	0x398d3561
 8001c50:	3c9b83f4 	.word	0x3c9b83f4
 8001c54:	20000448 	.word	0x20000448
 8001c58:	20000580 	.word	0x20000580
 8001c5c:	20000534 	.word	0x20000534
 8001c60:	200004c0 	.word	0x200004c0
 8001c64:	20000654 	.word	0x20000654

08001c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b094      	sub	sp, #80	@ 0x50
 8001c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c6e:	f107 0320 	add.w	r3, r7, #32
 8001c72:	2230      	movs	r2, #48	@ 0x30
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f007 fc23 	bl	80094c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c8c:	f002 fc02 	bl	8004494 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c90:	4b27      	ldr	r3, [pc, #156]	@ (8001d30 <SystemClock_Config+0xc8>)
 8001c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c94:	4a26      	ldr	r2, [pc, #152]	@ (8001d30 <SystemClock_Config+0xc8>)
 8001c96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c9c:	4b24      	ldr	r3, [pc, #144]	@ (8001d30 <SystemClock_Config+0xc8>)
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ca8:	4b22      	ldr	r3, [pc, #136]	@ (8001d34 <SystemClock_Config+0xcc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001cb0:	4a20      	ldr	r2, [pc, #128]	@ (8001d34 <SystemClock_Config+0xcc>)
 8001cb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d34 <SystemClock_Config+0xcc>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001cc8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cd2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001cd8:	2304      	movs	r3, #4
 8001cda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001cdc:	2348      	movs	r3, #72	@ 0x48
 8001cde:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce8:	f107 0320 	add.w	r3, r7, #32
 8001cec:	4618      	mov	r0, r3
 8001cee:	f002 fbe1 	bl	80044b4 <HAL_RCC_OscConfig>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cf8:	f000 f81e 	bl	8001d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cfc:	230f      	movs	r3, #15
 8001cfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d00:	2302      	movs	r3, #2
 8001d02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d12:	f107 030c 	add.w	r3, r7, #12
 8001d16:	2102      	movs	r1, #2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f002 fe6f 	bl	80049fc <HAL_RCC_ClockConfig>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d24:	f000 f808 	bl	8001d38 <Error_Handler>
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3750      	adds	r7, #80	@ 0x50
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40007000 	.word	0x40007000

08001d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d3c:	b672      	cpsid	i
}
 8001d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <Error_Handler+0x8>

08001d44 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001d48:	4b1b      	ldr	r3, [pc, #108]	@ (8001db8 <MX_SPI4_Init+0x74>)
 8001d4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001dbc <MX_SPI4_Init+0x78>)
 8001d4c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001db8 <MX_SPI4_Init+0x74>)
 8001d50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d54:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001d56:	4b18      	ldr	r3, [pc, #96]	@ (8001db8 <MX_SPI4_Init+0x74>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d5c:	4b16      	ldr	r3, [pc, #88]	@ (8001db8 <MX_SPI4_Init+0x74>)
 8001d5e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001d62:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001d64:	4b14      	ldr	r3, [pc, #80]	@ (8001db8 <MX_SPI4_Init+0x74>)
 8001d66:	2202      	movs	r2, #2
 8001d68:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d6a:	4b13      	ldr	r3, [pc, #76]	@ (8001db8 <MX_SPI4_Init+0x74>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001d70:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <MX_SPI4_Init+0x74>)
 8001d72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d76:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <MX_SPI4_Init+0x74>)
 8001d7a:	2210      	movs	r2, #16
 8001d7c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <MX_SPI4_Init+0x74>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <MX_SPI4_Init+0x74>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <MX_SPI4_Init+0x74>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001d90:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <MX_SPI4_Init+0x74>)
 8001d92:	2207      	movs	r2, #7
 8001d94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d96:	4b08      	ldr	r3, [pc, #32]	@ (8001db8 <MX_SPI4_Init+0x74>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <MX_SPI4_Init+0x74>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001da2:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <MX_SPI4_Init+0x74>)
 8001da4:	f003 fc40 	bl	8005628 <HAL_SPI_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001dae:	f7ff ffc3 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200004cc 	.word	0x200004cc
 8001dbc:	40013400 	.word	0x40013400

08001dc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	@ 0x28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8001e4c <HAL_SPI_MspInit+0x8c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d12f      	bne.n	8001e42 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001de2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e50 <HAL_SPI_MspInit+0x90>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	4a1a      	ldr	r2, [pc, #104]	@ (8001e50 <HAL_SPI_MspInit+0x90>)
 8001de8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dee:	4b18      	ldr	r3, [pc, #96]	@ (8001e50 <HAL_SPI_MspInit+0x90>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dfa:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <HAL_SPI_MspInit+0x90>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	4a14      	ldr	r2, [pc, #80]	@ (8001e50 <HAL_SPI_MspInit+0x90>)
 8001e00:	f043 0310 	orr.w	r3, r3, #16
 8001e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e06:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_SPI_MspInit+0x90>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001e12:	2364      	movs	r3, #100	@ 0x64
 8001e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001e22:	2305      	movs	r3, #5
 8001e24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4809      	ldr	r0, [pc, #36]	@ (8001e54 <HAL_SPI_MspInit+0x94>)
 8001e2e:	f001 f9e9 	bl	8003204 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	2054      	movs	r0, #84	@ 0x54
 8001e38:	f000 fdcd 	bl	80029d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001e3c:	2054      	movs	r0, #84	@ 0x54
 8001e3e:	f000 fde6 	bl	8002a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001e42:	bf00      	nop
 8001e44:	3728      	adds	r7, #40	@ 0x28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40013400 	.word	0x40013400
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40021000 	.word	0x40021000

08001e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e9c <HAL_MspInit+0x44>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	4a0e      	ldr	r2, [pc, #56]	@ (8001e9c <HAL_MspInit+0x44>)
 8001e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e9c <HAL_MspInit+0x44>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e76:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <HAL_MspInit+0x44>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7a:	4a08      	ldr	r2, [pc, #32]	@ (8001e9c <HAL_MspInit+0x44>)
 8001e7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e82:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <HAL_MspInit+0x44>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800

08001ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ea4:	bf00      	nop
 8001ea6:	e7fd      	b.n	8001ea4 <NMI_Handler+0x4>

08001ea8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <HardFault_Handler+0x4>

08001eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <MemManage_Handler+0x4>

08001eb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <BusFault_Handler+0x4>

08001ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <UsageFault_Handler+0x4>

08001ec8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef6:	f000 fc4f 	bl	8002798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f04:	4802      	ldr	r0, [pc, #8]	@ (8001f10 <TIM2_IRQHandler+0x10>)
 8001f06:	f003 ff79 	bl	8005dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000534 	.word	0x20000534

08001f14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f18:	4802      	ldr	r0, [pc, #8]	@ (8001f24 <USART3_IRQHandler+0x10>)
 8001f1a:	f005 f80f 	bl	8006f3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000654 	.word	0x20000654

08001f28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001f2c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001f30:	f001 fb2e 	bl	8003590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001f3c:	4802      	ldr	r0, [pc, #8]	@ (8001f48 <SPI4_IRQHandler+0x10>)
 8001f3e:	f003 fc1f 	bl	8005780 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200004cc 	.word	0x200004cc

08001f4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return 1;
 8001f50:	2301      	movs	r3, #1
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <_kill>:

int _kill(int pid, int sig)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f66:	f007 fb11 	bl	800958c <__errno>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2216      	movs	r2, #22
 8001f6e:	601a      	str	r2, [r3, #0]
  return -1;
 8001f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <_exit>:

void _exit (int status)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f84:	f04f 31ff 	mov.w	r1, #4294967295
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff ffe7 	bl	8001f5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f8e:	bf00      	nop
 8001f90:	e7fd      	b.n	8001f8e <_exit+0x12>

08001f92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e00a      	b.n	8001fba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fa4:	f3af 8000 	nop.w
 8001fa8:	4601      	mov	r1, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	60ba      	str	r2, [r7, #8]
 8001fb0:	b2ca      	uxtb	r2, r1
 8001fb2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	dbf0      	blt.n	8001fa4 <_read+0x12>
  }

  return len;
 8001fc2:	687b      	ldr	r3, [r7, #4]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	e009      	b.n	8001ff2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	60ba      	str	r2, [r7, #8]
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	dbf1      	blt.n	8001fde <_write+0x12>
  }
  return len;
 8001ffa:	687b      	ldr	r3, [r7, #4]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <_close>:

int _close(int file)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800200c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800202c:	605a      	str	r2, [r3, #4]
  return 0;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <_isatty>:

int _isatty(int file)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002044:	2301      	movs	r3, #1
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002052:	b480      	push	{r7}
 8002054:	b085      	sub	sp, #20
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002074:	4a14      	ldr	r2, [pc, #80]	@ (80020c8 <_sbrk+0x5c>)
 8002076:	4b15      	ldr	r3, [pc, #84]	@ (80020cc <_sbrk+0x60>)
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002080:	4b13      	ldr	r3, [pc, #76]	@ (80020d0 <_sbrk+0x64>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d102      	bne.n	800208e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002088:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <_sbrk+0x64>)
 800208a:	4a12      	ldr	r2, [pc, #72]	@ (80020d4 <_sbrk+0x68>)
 800208c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800208e:	4b10      	ldr	r3, [pc, #64]	@ (80020d0 <_sbrk+0x64>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	429a      	cmp	r2, r3
 800209a:	d207      	bcs.n	80020ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800209c:	f007 fa76 	bl	800958c <__errno>
 80020a0:	4603      	mov	r3, r0
 80020a2:	220c      	movs	r2, #12
 80020a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
 80020aa:	e009      	b.n	80020c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020ac:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <_sbrk+0x64>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020b2:	4b07      	ldr	r3, [pc, #28]	@ (80020d0 <_sbrk+0x64>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	4a05      	ldr	r2, [pc, #20]	@ (80020d0 <_sbrk+0x64>)
 80020bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020be:	68fb      	ldr	r3, [r7, #12]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20050000 	.word	0x20050000
 80020cc:	00000400 	.word	0x00000400
 80020d0:	20000530 	.word	0x20000530
 80020d4:	20000d10 	.word	0x20000d10

080020d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020dc:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <SystemInit+0x20>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e2:	4a05      	ldr	r2, [pc, #20]	@ (80020f8 <SystemInit+0x20>)
 80020e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002102:	f107 0310 	add.w	r3, r7, #16
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800211a:	4b1e      	ldr	r3, [pc, #120]	@ (8002194 <MX_TIM2_Init+0x98>)
 800211c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002120:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9600 -1;
 8002122:	4b1c      	ldr	r3, [pc, #112]	@ (8002194 <MX_TIM2_Init+0x98>)
 8002124:	f242 527f 	movw	r2, #9599	@ 0x257f
 8002128:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212a:	4b1a      	ldr	r3, [pc, #104]	@ (8002194 <MX_TIM2_Init+0x98>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000 - 1;
 8002130:	4b18      	ldr	r3, [pc, #96]	@ (8002194 <MX_TIM2_Init+0x98>)
 8002132:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002136:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002138:	4b16      	ldr	r3, [pc, #88]	@ (8002194 <MX_TIM2_Init+0x98>)
 800213a:	2200      	movs	r2, #0
 800213c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800213e:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <MX_TIM2_Init+0x98>)
 8002140:	2280      	movs	r2, #128	@ 0x80
 8002142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002144:	4813      	ldr	r0, [pc, #76]	@ (8002194 <MX_TIM2_Init+0x98>)
 8002146:	f003 fc2e 	bl	80059a6 <HAL_TIM_Base_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002150:	f7ff fdf2 	bl	8001d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002158:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800215a:	f107 0310 	add.w	r3, r7, #16
 800215e:	4619      	mov	r1, r3
 8002160:	480c      	ldr	r0, [pc, #48]	@ (8002194 <MX_TIM2_Init+0x98>)
 8002162:	f004 f867 	bl	8006234 <HAL_TIM_ConfigClockSource>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800216c:	f7ff fde4 	bl	8001d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002170:	2300      	movs	r3, #0
 8002172:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	4619      	mov	r1, r3
 800217c:	4805      	ldr	r0, [pc, #20]	@ (8002194 <MX_TIM2_Init+0x98>)
 800217e:	f004 fd15 	bl	8006bac <HAL_TIMEx_MasterConfigSynchronization>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002188:	f7ff fdd6 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800218c:	bf00      	nop
 800218e:	3720      	adds	r7, #32
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000534 	.word	0x20000534

08002198 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08e      	sub	sp, #56	@ 0x38
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800219e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021b8:	463b      	mov	r3, r7
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]
 80021c4:	611a      	str	r2, [r3, #16]
 80021c6:	615a      	str	r2, [r3, #20]
 80021c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002280 <MX_TIM3_Init+0xe8>)
 80021cc:	4a2d      	ldr	r2, [pc, #180]	@ (8002284 <MX_TIM3_Init+0xec>)
 80021ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96 - 1;
 80021d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002280 <MX_TIM3_Init+0xe8>)
 80021d2:	225f      	movs	r2, #95	@ 0x5f
 80021d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002280 <MX_TIM3_Init+0xe8>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 -1 ;
 80021dc:	4b28      	ldr	r3, [pc, #160]	@ (8002280 <MX_TIM3_Init+0xe8>)
 80021de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e4:	4b26      	ldr	r3, [pc, #152]	@ (8002280 <MX_TIM3_Init+0xe8>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021ea:	4b25      	ldr	r3, [pc, #148]	@ (8002280 <MX_TIM3_Init+0xe8>)
 80021ec:	2280      	movs	r2, #128	@ 0x80
 80021ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021f0:	4823      	ldr	r0, [pc, #140]	@ (8002280 <MX_TIM3_Init+0xe8>)
 80021f2:	f003 fbd8 	bl	80059a6 <HAL_TIM_Base_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80021fc:	f7ff fd9c 	bl	8001d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002200:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002204:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002206:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800220a:	4619      	mov	r1, r3
 800220c:	481c      	ldr	r0, [pc, #112]	@ (8002280 <MX_TIM3_Init+0xe8>)
 800220e:	f004 f811 	bl	8006234 <HAL_TIM_ConfigClockSource>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002218:	f7ff fd8e 	bl	8001d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800221c:	4818      	ldr	r0, [pc, #96]	@ (8002280 <MX_TIM3_Init+0xe8>)
 800221e:	f003 fc91 	bl	8005b44 <HAL_TIM_PWM_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002228:	f7ff fd86 	bl	8001d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	4619      	mov	r1, r3
 800223a:	4811      	ldr	r0, [pc, #68]	@ (8002280 <MX_TIM3_Init+0xe8>)
 800223c:	f004 fcb6 	bl	8006bac <HAL_TIMEx_MasterConfigSynchronization>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002246:	f7ff fd77 	bl	8001d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800224a:	2360      	movs	r3, #96	@ 0x60
 800224c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800225a:	463b      	mov	r3, r7
 800225c:	2200      	movs	r2, #0
 800225e:	4619      	mov	r1, r3
 8002260:	4807      	ldr	r0, [pc, #28]	@ (8002280 <MX_TIM3_Init+0xe8>)
 8002262:	f003 fed3 	bl	800600c <HAL_TIM_PWM_ConfigChannel>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800226c:	f7ff fd64 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002270:	4803      	ldr	r0, [pc, #12]	@ (8002280 <MX_TIM3_Init+0xe8>)
 8002272:	f000 f841 	bl	80022f8 <HAL_TIM_MspPostInit>

}
 8002276:	bf00      	nop
 8002278:	3738      	adds	r7, #56	@ 0x38
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000580 	.word	0x20000580
 8002284:	40000400 	.word	0x40000400

08002288 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002298:	d114      	bne.n	80022c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800229a:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <HAL_TIM_Base_MspInit+0x68>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	4a14      	ldr	r2, [pc, #80]	@ (80022f0 <HAL_TIM_Base_MspInit+0x68>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a6:	4b12      	ldr	r3, [pc, #72]	@ (80022f0 <HAL_TIM_Base_MspInit+0x68>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2100      	movs	r1, #0
 80022b6:	201c      	movs	r0, #28
 80022b8:	f000 fb8d 	bl	80029d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022bc:	201c      	movs	r0, #28
 80022be:	f000 fba6 	bl	8002a0e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80022c2:	e010      	b.n	80022e6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0a      	ldr	r2, [pc, #40]	@ (80022f4 <HAL_TIM_Base_MspInit+0x6c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d10b      	bne.n	80022e6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022ce:	4b08      	ldr	r3, [pc, #32]	@ (80022f0 <HAL_TIM_Base_MspInit+0x68>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	4a07      	ldr	r2, [pc, #28]	@ (80022f0 <HAL_TIM_Base_MspInit+0x68>)
 80022d4:	f043 0302 	orr.w	r3, r3, #2
 80022d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022da:	4b05      	ldr	r3, [pc, #20]	@ (80022f0 <HAL_TIM_Base_MspInit+0x68>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
}
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40000400 	.word	0x40000400

080022f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a11      	ldr	r2, [pc, #68]	@ (800235c <HAL_TIM_MspPostInit+0x64>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d11b      	bne.n	8002352 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <HAL_TIM_MspPostInit+0x68>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	4a10      	ldr	r2, [pc, #64]	@ (8002360 <HAL_TIM_MspPostInit+0x68>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6313      	str	r3, [r2, #48]	@ 0x30
 8002326:	4b0e      	ldr	r3, [pc, #56]	@ (8002360 <HAL_TIM_MspPostInit+0x68>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002332:	2340      	movs	r3, #64	@ 0x40
 8002334:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002342:	2302      	movs	r3, #2
 8002344:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002346:	f107 030c 	add.w	r3, r7, #12
 800234a:	4619      	mov	r1, r3
 800234c:	4805      	ldr	r0, [pc, #20]	@ (8002364 <HAL_TIM_MspPostInit+0x6c>)
 800234e:	f000 ff59 	bl	8003204 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002352:	bf00      	nop
 8002354:	3720      	adds	r7, #32
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40000400 	.word	0x40000400
 8002360:	40023800 	.word	0x40023800
 8002364:	40020000 	.word	0x40020000

08002368 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800236c:	4b14      	ldr	r3, [pc, #80]	@ (80023c0 <MX_USART2_UART_Init+0x58>)
 800236e:	4a15      	ldr	r2, [pc, #84]	@ (80023c4 <MX_USART2_UART_Init+0x5c>)
 8002370:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002372:	4b13      	ldr	r3, [pc, #76]	@ (80023c0 <MX_USART2_UART_Init+0x58>)
 8002374:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002378:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800237a:	4b11      	ldr	r3, [pc, #68]	@ (80023c0 <MX_USART2_UART_Init+0x58>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002380:	4b0f      	ldr	r3, [pc, #60]	@ (80023c0 <MX_USART2_UART_Init+0x58>)
 8002382:	2200      	movs	r2, #0
 8002384:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002386:	4b0e      	ldr	r3, [pc, #56]	@ (80023c0 <MX_USART2_UART_Init+0x58>)
 8002388:	2200      	movs	r2, #0
 800238a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800238c:	4b0c      	ldr	r3, [pc, #48]	@ (80023c0 <MX_USART2_UART_Init+0x58>)
 800238e:	220c      	movs	r2, #12
 8002390:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002392:	4b0b      	ldr	r3, [pc, #44]	@ (80023c0 <MX_USART2_UART_Init+0x58>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002398:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <MX_USART2_UART_Init+0x58>)
 800239a:	2200      	movs	r2, #0
 800239c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800239e:	4b08      	ldr	r3, [pc, #32]	@ (80023c0 <MX_USART2_UART_Init+0x58>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023a4:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <MX_USART2_UART_Init+0x58>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023aa:	4805      	ldr	r0, [pc, #20]	@ (80023c0 <MX_USART2_UART_Init+0x58>)
 80023ac:	f004 fcaa 	bl	8006d04 <HAL_UART_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80023b6:	f7ff fcbf 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200005cc 	.word	0x200005cc
 80023c4:	40004400 	.word	0x40004400

080023c8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023cc:	4b14      	ldr	r3, [pc, #80]	@ (8002420 <MX_USART3_UART_Init+0x58>)
 80023ce:	4a15      	ldr	r2, [pc, #84]	@ (8002424 <MX_USART3_UART_Init+0x5c>)
 80023d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023d2:	4b13      	ldr	r3, [pc, #76]	@ (8002420 <MX_USART3_UART_Init+0x58>)
 80023d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023da:	4b11      	ldr	r3, [pc, #68]	@ (8002420 <MX_USART3_UART_Init+0x58>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002420 <MX_USART3_UART_Init+0x58>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002420 <MX_USART3_UART_Init+0x58>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002420 <MX_USART3_UART_Init+0x58>)
 80023ee:	220c      	movs	r2, #12
 80023f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <MX_USART3_UART_Init+0x58>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f8:	4b09      	ldr	r3, [pc, #36]	@ (8002420 <MX_USART3_UART_Init+0x58>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023fe:	4b08      	ldr	r3, [pc, #32]	@ (8002420 <MX_USART3_UART_Init+0x58>)
 8002400:	2200      	movs	r2, #0
 8002402:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002404:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <MX_USART3_UART_Init+0x58>)
 8002406:	2200      	movs	r2, #0
 8002408:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800240a:	4805      	ldr	r0, [pc, #20]	@ (8002420 <MX_USART3_UART_Init+0x58>)
 800240c:	f004 fc7a 	bl	8006d04 <HAL_UART_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002416:	f7ff fc8f 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000654 	.word	0x20000654
 8002424:	40004800 	.word	0x40004800

08002428 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b0ac      	sub	sp, #176	@ 0xb0
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002440:	f107 0318 	add.w	r3, r7, #24
 8002444:	2284      	movs	r2, #132	@ 0x84
 8002446:	2100      	movs	r1, #0
 8002448:	4618      	mov	r0, r3
 800244a:	f007 f83a 	bl	80094c2 <memset>
  if(uartHandle->Instance==USART2)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a46      	ldr	r2, [pc, #280]	@ (800256c <HAL_UART_MspInit+0x144>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d13b      	bne.n	80024d0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002458:	2380      	movs	r3, #128	@ 0x80
 800245a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800245c:	2300      	movs	r3, #0
 800245e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002460:	f107 0318 	add.w	r3, r7, #24
 8002464:	4618      	mov	r0, r3
 8002466:	f002 fcef 	bl	8004e48 <HAL_RCCEx_PeriphCLKConfig>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002470:	f7ff fc62 	bl	8001d38 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002474:	4b3e      	ldr	r3, [pc, #248]	@ (8002570 <HAL_UART_MspInit+0x148>)
 8002476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002478:	4a3d      	ldr	r2, [pc, #244]	@ (8002570 <HAL_UART_MspInit+0x148>)
 800247a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800247e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002480:	4b3b      	ldr	r3, [pc, #236]	@ (8002570 <HAL_UART_MspInit+0x148>)
 8002482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800248c:	4b38      	ldr	r3, [pc, #224]	@ (8002570 <HAL_UART_MspInit+0x148>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002490:	4a37      	ldr	r2, [pc, #220]	@ (8002570 <HAL_UART_MspInit+0x148>)
 8002492:	f043 0308 	orr.w	r3, r3, #8
 8002496:	6313      	str	r3, [r2, #48]	@ 0x30
 8002498:	4b35      	ldr	r3, [pc, #212]	@ (8002570 <HAL_UART_MspInit+0x148>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249c:	f003 0308 	and.w	r3, r3, #8
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80024a4:	2360      	movs	r3, #96	@ 0x60
 80024a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024aa:	2302      	movs	r3, #2
 80024ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b6:	2303      	movs	r3, #3
 80024b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024bc:	2307      	movs	r3, #7
 80024be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80024c6:	4619      	mov	r1, r3
 80024c8:	482a      	ldr	r0, [pc, #168]	@ (8002574 <HAL_UART_MspInit+0x14c>)
 80024ca:	f000 fe9b 	bl	8003204 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80024ce:	e049      	b.n	8002564 <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART3)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a28      	ldr	r2, [pc, #160]	@ (8002578 <HAL_UART_MspInit+0x150>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d144      	bne.n	8002564 <HAL_UART_MspInit+0x13c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024de:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024e0:	2300      	movs	r3, #0
 80024e2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024e4:	f107 0318 	add.w	r3, r7, #24
 80024e8:	4618      	mov	r0, r3
 80024ea:	f002 fcad 	bl	8004e48 <HAL_RCCEx_PeriphCLKConfig>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80024f4:	f7ff fc20 	bl	8001d38 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002570 <HAL_UART_MspInit+0x148>)
 80024fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002570 <HAL_UART_MspInit+0x148>)
 80024fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002502:	6413      	str	r3, [r2, #64]	@ 0x40
 8002504:	4b1a      	ldr	r3, [pc, #104]	@ (8002570 <HAL_UART_MspInit+0x148>)
 8002506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002508:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002510:	4b17      	ldr	r3, [pc, #92]	@ (8002570 <HAL_UART_MspInit+0x148>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002514:	4a16      	ldr	r2, [pc, #88]	@ (8002570 <HAL_UART_MspInit+0x148>)
 8002516:	f043 0308 	orr.w	r3, r3, #8
 800251a:	6313      	str	r3, [r2, #48]	@ 0x30
 800251c:	4b14      	ldr	r3, [pc, #80]	@ (8002570 <HAL_UART_MspInit+0x148>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002528:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800252c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002536:	2301      	movs	r3, #1
 8002538:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253c:	2303      	movs	r3, #3
 800253e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002542:	2307      	movs	r3, #7
 8002544:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002548:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800254c:	4619      	mov	r1, r3
 800254e:	4809      	ldr	r0, [pc, #36]	@ (8002574 <HAL_UART_MspInit+0x14c>)
 8002550:	f000 fe58 	bl	8003204 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002554:	2200      	movs	r2, #0
 8002556:	2100      	movs	r1, #0
 8002558:	2027      	movs	r0, #39	@ 0x27
 800255a:	f000 fa3c 	bl	80029d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800255e:	2027      	movs	r0, #39	@ 0x27
 8002560:	f000 fa55 	bl	8002a0e <HAL_NVIC_EnableIRQ>
}
 8002564:	bf00      	nop
 8002566:	37b0      	adds	r7, #176	@ 0xb0
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40004400 	.word	0x40004400
 8002570:	40023800 	.word	0x40023800
 8002574:	40020c00 	.word	0x40020c00
 8002578:	40004800 	.word	0x40004800

0800257c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002580:	4b14      	ldr	r3, [pc, #80]	@ (80025d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002582:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002586:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002588:	4b12      	ldr	r3, [pc, #72]	@ (80025d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800258a:	2206      	movs	r2, #6
 800258c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800258e:	4b11      	ldr	r3, [pc, #68]	@ (80025d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002590:	2202      	movs	r2, #2
 8002592:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002594:	4b0f      	ldr	r3, [pc, #60]	@ (80025d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002596:	2200      	movs	r2, #0
 8002598:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800259a:	4b0e      	ldr	r3, [pc, #56]	@ (80025d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800259c:	2202      	movs	r2, #2
 800259e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80025a0:	4b0c      	ldr	r3, [pc, #48]	@ (80025d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80025a6:	4b0b      	ldr	r3, [pc, #44]	@ (80025d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80025ac:	4b09      	ldr	r3, [pc, #36]	@ (80025d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80025b2:	4b08      	ldr	r3, [pc, #32]	@ (80025d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80025b8:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80025be:	4805      	ldr	r0, [pc, #20]	@ (80025d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025c0:	f001 fe2d 	bl	800421e <HAL_PCD_Init>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80025ca:	f7ff fbb5 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200006dc 	.word	0x200006dc

080025d8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b0ac      	sub	sp, #176	@ 0xb0
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025f0:	f107 0318 	add.w	r3, r7, #24
 80025f4:	2284      	movs	r2, #132	@ 0x84
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f006 ff62 	bl	80094c2 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002606:	d159      	bne.n	80026bc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002608:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800260c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800260e:	2300      	movs	r3, #0
 8002610:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002614:	f107 0318 	add.w	r3, r7, #24
 8002618:	4618      	mov	r0, r3
 800261a:	f002 fc15 	bl	8004e48 <HAL_RCCEx_PeriphCLKConfig>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002624:	f7ff fb88 	bl	8001d38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002628:	4b26      	ldr	r3, [pc, #152]	@ (80026c4 <HAL_PCD_MspInit+0xec>)
 800262a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262c:	4a25      	ldr	r2, [pc, #148]	@ (80026c4 <HAL_PCD_MspInit+0xec>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6313      	str	r3, [r2, #48]	@ 0x30
 8002634:	4b23      	ldr	r3, [pc, #140]	@ (80026c4 <HAL_PCD_MspInit+0xec>)
 8002636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002640:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002644:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002648:	2302      	movs	r3, #2
 800264a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002654:	2303      	movs	r3, #3
 8002656:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800265a:	230a      	movs	r3, #10
 800265c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002660:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002664:	4619      	mov	r1, r3
 8002666:	4818      	ldr	r0, [pc, #96]	@ (80026c8 <HAL_PCD_MspInit+0xf0>)
 8002668:	f000 fdcc 	bl	8003204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800266c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002670:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002674:	2300      	movs	r3, #0
 8002676:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002680:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002684:	4619      	mov	r1, r3
 8002686:	4810      	ldr	r0, [pc, #64]	@ (80026c8 <HAL_PCD_MspInit+0xf0>)
 8002688:	f000 fdbc 	bl	8003204 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800268c:	4b0d      	ldr	r3, [pc, #52]	@ (80026c4 <HAL_PCD_MspInit+0xec>)
 800268e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002690:	4a0c      	ldr	r2, [pc, #48]	@ (80026c4 <HAL_PCD_MspInit+0xec>)
 8002692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002696:	6353      	str	r3, [r2, #52]	@ 0x34
 8002698:	4b0a      	ldr	r3, [pc, #40]	@ (80026c4 <HAL_PCD_MspInit+0xec>)
 800269a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800269c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4b07      	ldr	r3, [pc, #28]	@ (80026c4 <HAL_PCD_MspInit+0xec>)
 80026a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a8:	4a06      	ldr	r2, [pc, #24]	@ (80026c4 <HAL_PCD_MspInit+0xec>)
 80026aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80026b0:	4b04      	ldr	r3, [pc, #16]	@ (80026c4 <HAL_PCD_MspInit+0xec>)
 80026b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80026bc:	bf00      	nop
 80026be:	37b0      	adds	r7, #176	@ 0xb0
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40020000 	.word	0x40020000

080026cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002704 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026d0:	f7ff fd02 	bl	80020d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026d4:	480c      	ldr	r0, [pc, #48]	@ (8002708 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026d6:	490d      	ldr	r1, [pc, #52]	@ (800270c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002710 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026dc:	e002      	b.n	80026e4 <LoopCopyDataInit>

080026de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026e2:	3304      	adds	r3, #4

080026e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026e8:	d3f9      	bcc.n	80026de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002714 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002718 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f0:	e001      	b.n	80026f6 <LoopFillZerobss>

080026f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f4:	3204      	adds	r2, #4

080026f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026f8:	d3fb      	bcc.n	80026f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80026fa:	f006 ff4d 	bl	8009598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026fe:	f7ff fa5f 	bl	8001bc0 <main>
  bx  lr    
 8002702:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002704:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800270c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002710:	0800baf0 	.word	0x0800baf0
  ldr r2, =_sbss
 8002714:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 8002718:	20000d0c 	.word	0x20000d0c

0800271c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800271c:	e7fe      	b.n	800271c <ADC_IRQHandler>

0800271e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002722:	2003      	movs	r0, #3
 8002724:	f000 f94c 	bl	80029c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002728:	2000      	movs	r0, #0
 800272a:	f000 f805 	bl	8002738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800272e:	f7ff fb93 	bl	8001e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002740:	4b12      	ldr	r3, [pc, #72]	@ (800278c <HAL_InitTick+0x54>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b12      	ldr	r3, [pc, #72]	@ (8002790 <HAL_InitTick+0x58>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	4619      	mov	r1, r3
 800274a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800274e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002752:	fbb2 f3f3 	udiv	r3, r2, r3
 8002756:	4618      	mov	r0, r3
 8002758:	f000 f967 	bl	8002a2a <HAL_SYSTICK_Config>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e00e      	b.n	8002784 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b0f      	cmp	r3, #15
 800276a:	d80a      	bhi.n	8002782 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800276c:	2200      	movs	r2, #0
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	f04f 30ff 	mov.w	r0, #4294967295
 8002774:	f000 f92f 	bl	80029d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002778:	4a06      	ldr	r2, [pc, #24]	@ (8002794 <HAL_InitTick+0x5c>)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	e000      	b.n	8002784 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000004 	.word	0x20000004
 8002790:	2000000c 	.word	0x2000000c
 8002794:	20000008 	.word	0x20000008

08002798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800279c:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <HAL_IncTick+0x20>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b06      	ldr	r3, [pc, #24]	@ (80027bc <HAL_IncTick+0x24>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4413      	add	r3, r2
 80027a8:	4a04      	ldr	r2, [pc, #16]	@ (80027bc <HAL_IncTick+0x24>)
 80027aa:	6013      	str	r3, [r2, #0]
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	2000000c 	.word	0x2000000c
 80027bc:	20000bbc 	.word	0x20000bbc

080027c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return uwTick;
 80027c4:	4b03      	ldr	r3, [pc, #12]	@ (80027d4 <HAL_GetTick+0x14>)
 80027c6:	681b      	ldr	r3, [r3, #0]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	20000bbc 	.word	0x20000bbc

080027d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027e0:	f7ff ffee 	bl	80027c0 <HAL_GetTick>
 80027e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f0:	d005      	beq.n	80027fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027f2:	4b0a      	ldr	r3, [pc, #40]	@ (800281c <HAL_Delay+0x44>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4413      	add	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027fe:	bf00      	nop
 8002800:	f7ff ffde 	bl	80027c0 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	429a      	cmp	r2, r3
 800280e:	d8f7      	bhi.n	8002800 <HAL_Delay+0x28>
  {
  }
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	2000000c 	.word	0x2000000c

08002820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002830:	4b0b      	ldr	r3, [pc, #44]	@ (8002860 <__NVIC_SetPriorityGrouping+0x40>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800283c:	4013      	ands	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002848:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 800284a:	4313      	orrs	r3, r2
 800284c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800284e:	4a04      	ldr	r2, [pc, #16]	@ (8002860 <__NVIC_SetPriorityGrouping+0x40>)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	60d3      	str	r3, [r2, #12]
}
 8002854:	bf00      	nop
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	e000ed00 	.word	0xe000ed00
 8002864:	05fa0000 	.word	0x05fa0000

08002868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800286c:	4b04      	ldr	r3, [pc, #16]	@ (8002880 <__NVIC_GetPriorityGrouping+0x18>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	f003 0307 	and.w	r3, r3, #7
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	2b00      	cmp	r3, #0
 8002894:	db0b      	blt.n	80028ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	f003 021f 	and.w	r2, r3, #31
 800289c:	4907      	ldr	r1, [pc, #28]	@ (80028bc <__NVIC_EnableIRQ+0x38>)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2001      	movs	r0, #1
 80028a6:	fa00 f202 	lsl.w	r2, r0, r2
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	e000e100 	.word	0xe000e100

080028c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	6039      	str	r1, [r7, #0]
 80028ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	db0a      	blt.n	80028ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	490c      	ldr	r1, [pc, #48]	@ (800290c <__NVIC_SetPriority+0x4c>)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	0112      	lsls	r2, r2, #4
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	440b      	add	r3, r1
 80028e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e8:	e00a      	b.n	8002900 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	4908      	ldr	r1, [pc, #32]	@ (8002910 <__NVIC_SetPriority+0x50>)
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	3b04      	subs	r3, #4
 80028f8:	0112      	lsls	r2, r2, #4
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	440b      	add	r3, r1
 80028fe:	761a      	strb	r2, [r3, #24]
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000e100 	.word	0xe000e100
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002914:	b480      	push	{r7}
 8002916:	b089      	sub	sp, #36	@ 0x24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f1c3 0307 	rsb	r3, r3, #7
 800292e:	2b04      	cmp	r3, #4
 8002930:	bf28      	it	cs
 8002932:	2304      	movcs	r3, #4
 8002934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3304      	adds	r3, #4
 800293a:	2b06      	cmp	r3, #6
 800293c:	d902      	bls.n	8002944 <NVIC_EncodePriority+0x30>
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3b03      	subs	r3, #3
 8002942:	e000      	b.n	8002946 <NVIC_EncodePriority+0x32>
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002948:	f04f 32ff 	mov.w	r2, #4294967295
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43da      	mvns	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	401a      	ands	r2, r3
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800295c:	f04f 31ff 	mov.w	r1, #4294967295
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	fa01 f303 	lsl.w	r3, r1, r3
 8002966:	43d9      	mvns	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800296c:	4313      	orrs	r3, r2
         );
}
 800296e:	4618      	mov	r0, r3
 8002970:	3724      	adds	r7, #36	@ 0x24
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800298c:	d301      	bcc.n	8002992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800298e:	2301      	movs	r3, #1
 8002990:	e00f      	b.n	80029b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002992:	4a0a      	ldr	r2, [pc, #40]	@ (80029bc <SysTick_Config+0x40>)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3b01      	subs	r3, #1
 8002998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800299a:	210f      	movs	r1, #15
 800299c:	f04f 30ff 	mov.w	r0, #4294967295
 80029a0:	f7ff ff8e 	bl	80028c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a4:	4b05      	ldr	r3, [pc, #20]	@ (80029bc <SysTick_Config+0x40>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029aa:	4b04      	ldr	r3, [pc, #16]	@ (80029bc <SysTick_Config+0x40>)
 80029ac:	2207      	movs	r2, #7
 80029ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	e000e010 	.word	0xe000e010

080029c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff ff29 	bl	8002820 <__NVIC_SetPriorityGrouping>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b086      	sub	sp, #24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	4603      	mov	r3, r0
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e8:	f7ff ff3e 	bl	8002868 <__NVIC_GetPriorityGrouping>
 80029ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	6978      	ldr	r0, [r7, #20]
 80029f4:	f7ff ff8e 	bl	8002914 <NVIC_EncodePriority>
 80029f8:	4602      	mov	r2, r0
 80029fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff5d 	bl	80028c0 <__NVIC_SetPriority>
}
 8002a06:	bf00      	nop
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	4603      	mov	r3, r0
 8002a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff31 	bl	8002884 <__NVIC_EnableIRQ>
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff ffa2 	bl	800297c <SysTick_Config>
 8002a38:	4603      	mov	r3, r0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a50:	f7ff feb6 	bl	80027c0 <HAL_GetTick>
 8002a54:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d008      	beq.n	8002a74 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2280      	movs	r2, #128	@ 0x80
 8002a66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e052      	b.n	8002b1a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0216 	bic.w	r2, r2, #22
 8002a82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a92:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d103      	bne.n	8002aa4 <HAL_DMA_Abort+0x62>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d007      	beq.n	8002ab4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0208 	bic.w	r2, r2, #8
 8002ab2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ac4:	e013      	b.n	8002aee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ac6:	f7ff fe7b 	bl	80027c0 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	d90c      	bls.n	8002aee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2203      	movs	r2, #3
 8002ade:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e015      	b.n	8002b1a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1e4      	bne.n	8002ac6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b00:	223f      	movs	r2, #63	@ 0x3f
 8002b02:	409a      	lsls	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d004      	beq.n	8002b40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2280      	movs	r2, #128	@ 0x80
 8002b3a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e00c      	b.n	8002b5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2205      	movs	r2, #5
 8002b44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e086      	b.n	8002c88 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d106      	bne.n	8002b92 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2223      	movs	r2, #35	@ 0x23
 8002b88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7fe fc23 	bl	80013d8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b92:	4b3f      	ldr	r3, [pc, #252]	@ (8002c90 <HAL_ETH_Init+0x128>)
 8002b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b96:	4a3e      	ldr	r2, [pc, #248]	@ (8002c90 <HAL_ETH_Init+0x128>)
 8002b98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b9e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c90 <HAL_ETH_Init+0x128>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002baa:	4b3a      	ldr	r3, [pc, #232]	@ (8002c94 <HAL_ETH_Init+0x12c>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4a39      	ldr	r2, [pc, #228]	@ (8002c94 <HAL_ETH_Init+0x12c>)
 8002bb0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002bb4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002bb6:	4b37      	ldr	r3, [pc, #220]	@ (8002c94 <HAL_ETH_Init+0x12c>)
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	4935      	ldr	r1, [pc, #212]	@ (8002c94 <HAL_ETH_Init+0x12c>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002bc4:	4b33      	ldr	r3, [pc, #204]	@ (8002c94 <HAL_ETH_Init+0x12c>)
 8002bc6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6812      	ldr	r2, [r2, #0]
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002bde:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002be0:	f7ff fdee 	bl	80027c0 <HAL_GetTick>
 8002be4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002be6:	e011      	b.n	8002c0c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002be8:	f7ff fdea 	bl	80027c0 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002bf6:	d909      	bls.n	8002c0c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	22e0      	movs	r2, #224	@ 0xe0
 8002c04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e03d      	b.n	8002c88 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e4      	bne.n	8002be8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f97a 	bl	8002f18 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 fa25 	bl	8003074 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fa7b 	bl	8003126 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	461a      	mov	r2, r3
 8002c36:	2100      	movs	r1, #0
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f9e3 	bl	8003004 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002c4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c98 <HAL_ETH_Init+0x130>)
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002c72:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2210      	movs	r2, #16
 8002c82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40013800 	.word	0x40013800
 8002c98:	00020060 	.word	0x00020060

08002c9c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4b53      	ldr	r3, [pc, #332]	@ (8002e00 <ETH_SetMACConfig+0x164>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	7b9b      	ldrb	r3, [r3, #14]
 8002cba:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	7c12      	ldrb	r2, [r2, #16]
 8002cc0:	2a00      	cmp	r2, #0
 8002cc2:	d102      	bne.n	8002cca <ETH_SetMACConfig+0x2e>
 8002cc4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002cc8:	e000      	b.n	8002ccc <ETH_SetMACConfig+0x30>
 8002cca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002ccc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	7c52      	ldrb	r2, [r2, #17]
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d102      	bne.n	8002cdc <ETH_SetMACConfig+0x40>
 8002cd6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002cda:	e000      	b.n	8002cde <ETH_SetMACConfig+0x42>
 8002cdc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002cde:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ce4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	7fdb      	ldrb	r3, [r3, #31]
 8002cea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002cec:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002cf2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	7f92      	ldrb	r2, [r2, #30]
 8002cf8:	2a00      	cmp	r2, #0
 8002cfa:	d102      	bne.n	8002d02 <ETH_SetMACConfig+0x66>
 8002cfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d00:	e000      	b.n	8002d04 <ETH_SetMACConfig+0x68>
 8002d02:	2200      	movs	r2, #0
                        macconf->Speed |
 8002d04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	7f1b      	ldrb	r3, [r3, #28]
 8002d0a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002d0c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002d12:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	791b      	ldrb	r3, [r3, #4]
 8002d18:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002d1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002d22:	2a00      	cmp	r2, #0
 8002d24:	d102      	bne.n	8002d2c <ETH_SetMACConfig+0x90>
 8002d26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d2a:	e000      	b.n	8002d2e <ETH_SetMACConfig+0x92>
 8002d2c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d2e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	7bdb      	ldrb	r3, [r3, #15]
 8002d34:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d36:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d3c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d44:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002d46:	4313      	orrs	r3, r2
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d5e:	2001      	movs	r0, #1
 8002d60:	f7ff fd3a 	bl	80027d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d82:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002d8a:	2a00      	cmp	r2, #0
 8002d8c:	d101      	bne.n	8002d92 <ETH_SetMACConfig+0xf6>
 8002d8e:	2280      	movs	r2, #128	@ 0x80
 8002d90:	e000      	b.n	8002d94 <ETH_SetMACConfig+0xf8>
 8002d92:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d94:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002d9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002da2:	2a01      	cmp	r2, #1
 8002da4:	d101      	bne.n	8002daa <ETH_SetMACConfig+0x10e>
 8002da6:	2208      	movs	r2, #8
 8002da8:	e000      	b.n	8002dac <ETH_SetMACConfig+0x110>
 8002daa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002dac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002db4:	2a01      	cmp	r2, #1
 8002db6:	d101      	bne.n	8002dbc <ETH_SetMACConfig+0x120>
 8002db8:	2204      	movs	r2, #4
 8002dba:	e000      	b.n	8002dbe <ETH_SetMACConfig+0x122>
 8002dbc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002dbe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002dc6:	2a01      	cmp	r2, #1
 8002dc8:	d101      	bne.n	8002dce <ETH_SetMACConfig+0x132>
 8002dca:	2202      	movs	r2, #2
 8002dcc:	e000      	b.n	8002dd0 <ETH_SetMACConfig+0x134>
 8002dce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002de8:	2001      	movs	r0, #1
 8002dea:	f7ff fcf5 	bl	80027d8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	619a      	str	r2, [r3, #24]
}
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	fd20810f 	.word	0xfd20810f

08002e04 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4b3d      	ldr	r3, [pc, #244]	@ (8002f14 <ETH_SetDMAConfig+0x110>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	7b1b      	ldrb	r3, [r3, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d102      	bne.n	8002e30 <ETH_SetDMAConfig+0x2c>
 8002e2a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002e2e:	e000      	b.n	8002e32 <ETH_SetDMAConfig+0x2e>
 8002e30:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	7b5b      	ldrb	r3, [r3, #13]
 8002e36:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e38:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	7f52      	ldrb	r2, [r2, #29]
 8002e3e:	2a00      	cmp	r2, #0
 8002e40:	d102      	bne.n	8002e48 <ETH_SetDMAConfig+0x44>
 8002e42:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002e46:	e000      	b.n	8002e4a <ETH_SetDMAConfig+0x46>
 8002e48:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	7b9b      	ldrb	r3, [r3, #14]
 8002e50:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e52:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e58:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	7f1b      	ldrb	r3, [r3, #28]
 8002e5e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002e60:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	7f9b      	ldrb	r3, [r3, #30]
 8002e66:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e68:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e6e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e76:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e88:	461a      	mov	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	f7ff fc9c 	bl	80027d8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	791b      	ldrb	r3, [r3, #4]
 8002eb2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002eb8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002ebe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ec4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ecc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002ece:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ed6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002edc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ee6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002eea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ef8:	2001      	movs	r0, #1
 8002efa:	f7ff fc6d 	bl	80027d8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f06:	461a      	mov	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6013      	str	r3, [r2, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	f8de3f23 	.word	0xf8de3f23

08002f18 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b0a6      	sub	sp, #152	@ 0x98
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002f20:	2301      	movs	r3, #1
 8002f22:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002f26:	2301      	movs	r3, #1
 8002f28:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002f36:	2301      	movs	r3, #1
 8002f38:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002f42:	2301      	movs	r3, #1
 8002f44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002f54:	2300      	movs	r3, #0
 8002f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002f74:	2300      	movs	r3, #0
 8002f76:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002f80:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002f84:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002f86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002f92:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002f96:	4619      	mov	r1, r3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff fe7f 	bl	8002c9c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002fac:	2301      	movs	r3, #1
 8002fae:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002fce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fd2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002fd4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002fd8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002fda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fde:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002fee:	f107 0308 	add.w	r3, r7, #8
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff ff05 	bl	8002e04 <ETH_SetDMAConfig>
}
 8002ffa:	bf00      	nop
 8002ffc:	3798      	adds	r7, #152	@ 0x98
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3305      	adds	r3, #5
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	021b      	lsls	r3, r3, #8
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	3204      	adds	r2, #4
 800301c:	7812      	ldrb	r2, [r2, #0]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	4b11      	ldr	r3, [pc, #68]	@ (800306c <ETH_MACAddressConfig+0x68>)
 8003026:	4413      	add	r3, r2
 8003028:	461a      	mov	r2, r3
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3303      	adds	r3, #3
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	061a      	lsls	r2, r3, #24
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3302      	adds	r3, #2
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	041b      	lsls	r3, r3, #16
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3301      	adds	r3, #1
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	4313      	orrs	r3, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	7812      	ldrb	r2, [r2, #0]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	4b06      	ldr	r3, [pc, #24]	@ (8003070 <ETH_MACAddressConfig+0x6c>)
 8003056:	4413      	add	r3, r2
 8003058:	461a      	mov	r2, r3
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	6013      	str	r3, [r2, #0]
}
 800305e:	bf00      	nop
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40028040 	.word	0x40028040
 8003070:	40028044 	.word	0x40028044

08003074 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	e03e      	b.n	8003100 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68d9      	ldr	r1, [r3, #12]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4613      	mov	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	440b      	add	r3, r1
 8003092:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2200      	movs	r2, #0
 800309e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2200      	movs	r2, #0
 80030a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2200      	movs	r2, #0
 80030aa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	3206      	adds	r2, #6
 80030b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d80c      	bhi.n	80030e4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68d9      	ldr	r1, [r3, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	440b      	add	r3, r1
 80030dc:	461a      	mov	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	60da      	str	r2, [r3, #12]
 80030e2:	e004      	b.n	80030ee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	461a      	mov	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	3301      	adds	r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b03      	cmp	r3, #3
 8003104:	d9bd      	bls.n	8003082 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003118:	611a      	str	r2, [r3, #16]
}
 800311a:	bf00      	nop
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003126:	b480      	push	{r7}
 8003128:	b085      	sub	sp, #20
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	e048      	b.n	80031c6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6919      	ldr	r1, [r3, #16]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	440b      	add	r3, r1
 8003144:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2200      	movs	r2, #0
 8003150:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2200      	movs	r2, #0
 8003156:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2200      	movs	r2, #0
 800315c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2200      	movs	r2, #0
 8003162:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2200      	movs	r2, #0
 8003168:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003170:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800318a:	68b9      	ldr	r1, [r7, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	3212      	adds	r2, #18
 8003192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d80c      	bhi.n	80031b6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6919      	ldr	r1, [r3, #16]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	440b      	add	r3, r1
 80031ae:	461a      	mov	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	60da      	str	r2, [r3, #12]
 80031b4:	e004      	b.n	80031c0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	461a      	mov	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	3301      	adds	r3, #1
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d9b3      	bls.n	8003134 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691a      	ldr	r2, [r3, #16]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031f6:	60da      	str	r2, [r3, #12]
}
 80031f8:	bf00      	nop
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003204:	b480      	push	{r7}
 8003206:	b089      	sub	sp, #36	@ 0x24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003216:	2300      	movs	r3, #0
 8003218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800321a:	2300      	movs	r3, #0
 800321c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	e175      	b.n	8003510 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003224:	2201      	movs	r2, #1
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	429a      	cmp	r2, r3
 800323e:	f040 8164 	bne.w	800350a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d005      	beq.n	800325a <HAL_GPIO_Init+0x56>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d130      	bne.n	80032bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	2203      	movs	r2, #3
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003290:	2201      	movs	r2, #1
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f003 0201 	and.w	r2, r3, #1
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d017      	beq.n	80032f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	2203      	movs	r2, #3
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d123      	bne.n	800334c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	08da      	lsrs	r2, r3, #3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3208      	adds	r2, #8
 800330c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	220f      	movs	r2, #15
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	43db      	mvns	r3, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4013      	ands	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	08da      	lsrs	r2, r3, #3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3208      	adds	r2, #8
 8003346:	69b9      	ldr	r1, [r7, #24]
 8003348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	2203      	movs	r2, #3
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0203 	and.w	r2, r3, #3
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4313      	orrs	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80be 	beq.w	800350a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800338e:	4b66      	ldr	r3, [pc, #408]	@ (8003528 <HAL_GPIO_Init+0x324>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003392:	4a65      	ldr	r2, [pc, #404]	@ (8003528 <HAL_GPIO_Init+0x324>)
 8003394:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003398:	6453      	str	r3, [r2, #68]	@ 0x44
 800339a:	4b63      	ldr	r3, [pc, #396]	@ (8003528 <HAL_GPIO_Init+0x324>)
 800339c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80033a6:	4a61      	ldr	r2, [pc, #388]	@ (800352c <HAL_GPIO_Init+0x328>)
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	089b      	lsrs	r3, r3, #2
 80033ac:	3302      	adds	r3, #2
 80033ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	220f      	movs	r2, #15
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4013      	ands	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a58      	ldr	r2, [pc, #352]	@ (8003530 <HAL_GPIO_Init+0x32c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d037      	beq.n	8003442 <HAL_GPIO_Init+0x23e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a57      	ldr	r2, [pc, #348]	@ (8003534 <HAL_GPIO_Init+0x330>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d031      	beq.n	800343e <HAL_GPIO_Init+0x23a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a56      	ldr	r2, [pc, #344]	@ (8003538 <HAL_GPIO_Init+0x334>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d02b      	beq.n	800343a <HAL_GPIO_Init+0x236>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a55      	ldr	r2, [pc, #340]	@ (800353c <HAL_GPIO_Init+0x338>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d025      	beq.n	8003436 <HAL_GPIO_Init+0x232>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a54      	ldr	r2, [pc, #336]	@ (8003540 <HAL_GPIO_Init+0x33c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d01f      	beq.n	8003432 <HAL_GPIO_Init+0x22e>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a53      	ldr	r2, [pc, #332]	@ (8003544 <HAL_GPIO_Init+0x340>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d019      	beq.n	800342e <HAL_GPIO_Init+0x22a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a52      	ldr	r2, [pc, #328]	@ (8003548 <HAL_GPIO_Init+0x344>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <HAL_GPIO_Init+0x226>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a51      	ldr	r2, [pc, #324]	@ (800354c <HAL_GPIO_Init+0x348>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00d      	beq.n	8003426 <HAL_GPIO_Init+0x222>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a50      	ldr	r2, [pc, #320]	@ (8003550 <HAL_GPIO_Init+0x34c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d007      	beq.n	8003422 <HAL_GPIO_Init+0x21e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a4f      	ldr	r2, [pc, #316]	@ (8003554 <HAL_GPIO_Init+0x350>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d101      	bne.n	800341e <HAL_GPIO_Init+0x21a>
 800341a:	2309      	movs	r3, #9
 800341c:	e012      	b.n	8003444 <HAL_GPIO_Init+0x240>
 800341e:	230a      	movs	r3, #10
 8003420:	e010      	b.n	8003444 <HAL_GPIO_Init+0x240>
 8003422:	2308      	movs	r3, #8
 8003424:	e00e      	b.n	8003444 <HAL_GPIO_Init+0x240>
 8003426:	2307      	movs	r3, #7
 8003428:	e00c      	b.n	8003444 <HAL_GPIO_Init+0x240>
 800342a:	2306      	movs	r3, #6
 800342c:	e00a      	b.n	8003444 <HAL_GPIO_Init+0x240>
 800342e:	2305      	movs	r3, #5
 8003430:	e008      	b.n	8003444 <HAL_GPIO_Init+0x240>
 8003432:	2304      	movs	r3, #4
 8003434:	e006      	b.n	8003444 <HAL_GPIO_Init+0x240>
 8003436:	2303      	movs	r3, #3
 8003438:	e004      	b.n	8003444 <HAL_GPIO_Init+0x240>
 800343a:	2302      	movs	r3, #2
 800343c:	e002      	b.n	8003444 <HAL_GPIO_Init+0x240>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <HAL_GPIO_Init+0x240>
 8003442:	2300      	movs	r3, #0
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	f002 0203 	and.w	r2, r2, #3
 800344a:	0092      	lsls	r2, r2, #2
 800344c:	4093      	lsls	r3, r2
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003454:	4935      	ldr	r1, [pc, #212]	@ (800352c <HAL_GPIO_Init+0x328>)
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	089b      	lsrs	r3, r3, #2
 800345a:	3302      	adds	r3, #2
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003462:	4b3d      	ldr	r3, [pc, #244]	@ (8003558 <HAL_GPIO_Init+0x354>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003486:	4a34      	ldr	r2, [pc, #208]	@ (8003558 <HAL_GPIO_Init+0x354>)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800348c:	4b32      	ldr	r3, [pc, #200]	@ (8003558 <HAL_GPIO_Init+0x354>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034b0:	4a29      	ldr	r2, [pc, #164]	@ (8003558 <HAL_GPIO_Init+0x354>)
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034b6:	4b28      	ldr	r3, [pc, #160]	@ (8003558 <HAL_GPIO_Init+0x354>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	43db      	mvns	r3, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4013      	ands	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034da:	4a1f      	ldr	r2, [pc, #124]	@ (8003558 <HAL_GPIO_Init+0x354>)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003558 <HAL_GPIO_Init+0x354>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4013      	ands	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003504:	4a14      	ldr	r2, [pc, #80]	@ (8003558 <HAL_GPIO_Init+0x354>)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3301      	adds	r3, #1
 800350e:	61fb      	str	r3, [r7, #28]
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	2b0f      	cmp	r3, #15
 8003514:	f67f ae86 	bls.w	8003224 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003518:	bf00      	nop
 800351a:	bf00      	nop
 800351c:	3724      	adds	r7, #36	@ 0x24
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40023800 	.word	0x40023800
 800352c:	40013800 	.word	0x40013800
 8003530:	40020000 	.word	0x40020000
 8003534:	40020400 	.word	0x40020400
 8003538:	40020800 	.word	0x40020800
 800353c:	40020c00 	.word	0x40020c00
 8003540:	40021000 	.word	0x40021000
 8003544:	40021400 	.word	0x40021400
 8003548:	40021800 	.word	0x40021800
 800354c:	40021c00 	.word	0x40021c00
 8003550:	40022000 	.word	0x40022000
 8003554:	40022400 	.word	0x40022400
 8003558:	40013c00 	.word	0x40013c00

0800355c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	807b      	strh	r3, [r7, #2]
 8003568:	4613      	mov	r3, r2
 800356a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800356c:	787b      	ldrb	r3, [r7, #1]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003572:	887a      	ldrh	r2, [r7, #2]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003578:	e003      	b.n	8003582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800357a:	887b      	ldrh	r3, [r7, #2]
 800357c:	041a      	lsls	r2, r3, #16
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	619a      	str	r2, [r3, #24]
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800359a:	4b08      	ldr	r3, [pc, #32]	@ (80035bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800359c:	695a      	ldr	r2, [r3, #20]
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d006      	beq.n	80035b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035a6:	4a05      	ldr	r2, [pc, #20]	@ (80035bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035a8:	88fb      	ldrh	r3, [r7, #6]
 80035aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035ac:	88fb      	ldrh	r3, [r7, #6]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f806 	bl	80035c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40013c00 	.word	0x40013c00

080035c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
	...

080035d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e08b      	b.n	8003702 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fe f8c2 	bl	8001788 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2224      	movs	r2, #36	@ 0x24
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0201 	bic.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003628:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003638:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d107      	bne.n	8003652 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	e006      	b.n	8003660 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800365e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d108      	bne.n	800367a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003676:	605a      	str	r2, [r3, #4]
 8003678:	e007      	b.n	800368a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003688:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6859      	ldr	r1, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b1d      	ldr	r3, [pc, #116]	@ (800370c <HAL_I2C_Init+0x134>)
 8003696:	430b      	orrs	r3, r1
 8003698:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69d9      	ldr	r1, [r3, #28]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1a      	ldr	r2, [r3, #32]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	02008000 	.word	0x02008000

08003710 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	4608      	mov	r0, r1
 800371a:	4611      	mov	r1, r2
 800371c:	461a      	mov	r2, r3
 800371e:	4603      	mov	r3, r0
 8003720:	817b      	strh	r3, [r7, #10]
 8003722:	460b      	mov	r3, r1
 8003724:	813b      	strh	r3, [r7, #8]
 8003726:	4613      	mov	r3, r2
 8003728:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b20      	cmp	r3, #32
 8003734:	f040 80f9 	bne.w	800392a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <HAL_I2C_Mem_Write+0x34>
 800373e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003740:	2b00      	cmp	r3, #0
 8003742:	d105      	bne.n	8003750 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800374a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0ed      	b.n	800392c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_I2C_Mem_Write+0x4e>
 800375a:	2302      	movs	r3, #2
 800375c:	e0e6      	b.n	800392c <HAL_I2C_Mem_Write+0x21c>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003766:	f7ff f82b 	bl	80027c0 <HAL_GetTick>
 800376a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	2319      	movs	r3, #25
 8003772:	2201      	movs	r2, #1
 8003774:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fac3 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0d1      	b.n	800392c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2221      	movs	r2, #33	@ 0x21
 800378c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2240      	movs	r2, #64	@ 0x40
 8003794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a3a      	ldr	r2, [r7, #32]
 80037a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037b0:	88f8      	ldrh	r0, [r7, #6]
 80037b2:	893a      	ldrh	r2, [r7, #8]
 80037b4:	8979      	ldrh	r1, [r7, #10]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	9301      	str	r3, [sp, #4]
 80037ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	4603      	mov	r3, r0
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f9d3 	bl	8003b6c <I2C_RequestMemoryWrite>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d005      	beq.n	80037d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0a9      	b.n	800392c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2bff      	cmp	r3, #255	@ 0xff
 80037e0:	d90e      	bls.n	8003800 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	22ff      	movs	r2, #255	@ 0xff
 80037e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	8979      	ldrh	r1, [r7, #10]
 80037f0:	2300      	movs	r3, #0
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 fc47 	bl	800408c <I2C_TransferConfig>
 80037fe:	e00f      	b.n	8003820 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800380e:	b2da      	uxtb	r2, r3
 8003810:	8979      	ldrh	r1, [r7, #10]
 8003812:	2300      	movs	r3, #0
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 fc36 	bl	800408c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 fac6 	bl	8003db6 <I2C_WaitOnTXISFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e07b      	b.n	800392c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003838:	781a      	ldrb	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d034      	beq.n	80038d8 <HAL_I2C_Mem_Write+0x1c8>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003872:	2b00      	cmp	r3, #0
 8003874:	d130      	bne.n	80038d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387c:	2200      	movs	r2, #0
 800387e:	2180      	movs	r1, #128	@ 0x80
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 fa3f 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e04d      	b.n	800392c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003894:	b29b      	uxth	r3, r3
 8003896:	2bff      	cmp	r3, #255	@ 0xff
 8003898:	d90e      	bls.n	80038b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	22ff      	movs	r2, #255	@ 0xff
 800389e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	8979      	ldrh	r1, [r7, #10]
 80038a8:	2300      	movs	r3, #0
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 fbeb 	bl	800408c <I2C_TransferConfig>
 80038b6:	e00f      	b.n	80038d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	8979      	ldrh	r1, [r7, #10]
 80038ca:	2300      	movs	r3, #0
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 fbda 	bl	800408c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d19e      	bne.n	8003820 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 faac 	bl	8003e44 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e01a      	b.n	800392c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2220      	movs	r2, #32
 80038fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b0a      	ldr	r3, [pc, #40]	@ (8003934 <HAL_I2C_Mem_Write+0x224>)
 800390a:	400b      	ands	r3, r1
 800390c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	e000      	b.n	800392c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800392a:	2302      	movs	r3, #2
  }
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	fe00e800 	.word	0xfe00e800

08003938 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af02      	add	r7, sp, #8
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	4608      	mov	r0, r1
 8003942:	4611      	mov	r1, r2
 8003944:	461a      	mov	r2, r3
 8003946:	4603      	mov	r3, r0
 8003948:	817b      	strh	r3, [r7, #10]
 800394a:	460b      	mov	r3, r1
 800394c:	813b      	strh	r3, [r7, #8]
 800394e:	4613      	mov	r3, r2
 8003950:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b20      	cmp	r3, #32
 800395c:	f040 80fd 	bne.w	8003b5a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_I2C_Mem_Read+0x34>
 8003966:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003968:	2b00      	cmp	r3, #0
 800396a:	d105      	bne.n	8003978 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003972:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0f1      	b.n	8003b5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_I2C_Mem_Read+0x4e>
 8003982:	2302      	movs	r3, #2
 8003984:	e0ea      	b.n	8003b5c <HAL_I2C_Mem_Read+0x224>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800398e:	f7fe ff17 	bl	80027c0 <HAL_GetTick>
 8003992:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	2319      	movs	r3, #25
 800399a:	2201      	movs	r2, #1
 800399c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 f9af 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0d5      	b.n	8003b5c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2222      	movs	r2, #34	@ 0x22
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2240      	movs	r2, #64	@ 0x40
 80039bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a3a      	ldr	r2, [r7, #32]
 80039ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80039d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039d8:	88f8      	ldrh	r0, [r7, #6]
 80039da:	893a      	ldrh	r2, [r7, #8]
 80039dc:	8979      	ldrh	r1, [r7, #10]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	9301      	str	r3, [sp, #4]
 80039e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	4603      	mov	r3, r0
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 f913 	bl	8003c14 <I2C_RequestMemoryRead>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0ad      	b.n	8003b5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2bff      	cmp	r3, #255	@ 0xff
 8003a08:	d90e      	bls.n	8003a28 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	8979      	ldrh	r1, [r7, #10]
 8003a18:	4b52      	ldr	r3, [pc, #328]	@ (8003b64 <HAL_I2C_Mem_Read+0x22c>)
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 fb33 	bl	800408c <I2C_TransferConfig>
 8003a26:	e00f      	b.n	8003a48 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	8979      	ldrh	r1, [r7, #10]
 8003a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b64 <HAL_I2C_Mem_Read+0x22c>)
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 fb22 	bl	800408c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2104      	movs	r1, #4
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 f956 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e07c      	b.n	8003b5c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d034      	beq.n	8003b08 <HAL_I2C_Mem_Read+0x1d0>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d130      	bne.n	8003b08 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aac:	2200      	movs	r2, #0
 8003aae:	2180      	movs	r1, #128	@ 0x80
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f927 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e04d      	b.n	8003b5c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2bff      	cmp	r3, #255	@ 0xff
 8003ac8:	d90e      	bls.n	8003ae8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	8979      	ldrh	r1, [r7, #10]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 fad3 	bl	800408c <I2C_TransferConfig>
 8003ae6:	e00f      	b.n	8003b08 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	8979      	ldrh	r1, [r7, #10]
 8003afa:	2300      	movs	r3, #0
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 fac2 	bl	800408c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d19a      	bne.n	8003a48 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 f994 	bl	8003e44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e01a      	b.n	8003b5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6859      	ldr	r1, [r3, #4]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	4b0b      	ldr	r3, [pc, #44]	@ (8003b68 <HAL_I2C_Mem_Read+0x230>)
 8003b3a:	400b      	ands	r3, r1
 8003b3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	e000      	b.n	8003b5c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003b5a:	2302      	movs	r3, #2
  }
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	80002400 	.word	0x80002400
 8003b68:	fe00e800 	.word	0xfe00e800

08003b6c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	4608      	mov	r0, r1
 8003b76:	4611      	mov	r1, r2
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	817b      	strh	r3, [r7, #10]
 8003b7e:	460b      	mov	r3, r1
 8003b80:	813b      	strh	r3, [r7, #8]
 8003b82:	4613      	mov	r3, r2
 8003b84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	8979      	ldrh	r1, [r7, #10]
 8003b8c:	4b20      	ldr	r3, [pc, #128]	@ (8003c10 <I2C_RequestMemoryWrite+0xa4>)
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 fa79 	bl	800408c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	69b9      	ldr	r1, [r7, #24]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f909 	bl	8003db6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e02c      	b.n	8003c08 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d105      	bne.n	8003bc0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bb4:	893b      	ldrh	r3, [r7, #8]
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bbe:	e015      	b.n	8003bec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003bc0:	893b      	ldrh	r3, [r7, #8]
 8003bc2:	0a1b      	lsrs	r3, r3, #8
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bce:	69fa      	ldr	r2, [r7, #28]
 8003bd0:	69b9      	ldr	r1, [r7, #24]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f8ef 	bl	8003db6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e012      	b.n	8003c08 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003be2:	893b      	ldrh	r3, [r7, #8]
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2180      	movs	r1, #128	@ 0x80
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f884 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	80002000 	.word	0x80002000

08003c14 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	4608      	mov	r0, r1
 8003c1e:	4611      	mov	r1, r2
 8003c20:	461a      	mov	r2, r3
 8003c22:	4603      	mov	r3, r0
 8003c24:	817b      	strh	r3, [r7, #10]
 8003c26:	460b      	mov	r3, r1
 8003c28:	813b      	strh	r3, [r7, #8]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	8979      	ldrh	r1, [r7, #10]
 8003c34:	4b20      	ldr	r3, [pc, #128]	@ (8003cb8 <I2C_RequestMemoryRead+0xa4>)
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 fa26 	bl	800408c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c40:	69fa      	ldr	r2, [r7, #28]
 8003c42:	69b9      	ldr	r1, [r7, #24]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f8b6 	bl	8003db6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e02c      	b.n	8003cae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c54:	88fb      	ldrh	r3, [r7, #6]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d105      	bne.n	8003c66 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c5a:	893b      	ldrh	r3, [r7, #8]
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c64:	e015      	b.n	8003c92 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c66:	893b      	ldrh	r3, [r7, #8]
 8003c68:	0a1b      	lsrs	r3, r3, #8
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c74:	69fa      	ldr	r2, [r7, #28]
 8003c76:	69b9      	ldr	r1, [r7, #24]
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f89c 	bl	8003db6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e012      	b.n	8003cae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c88:	893b      	ldrh	r3, [r7, #8]
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2140      	movs	r1, #64	@ 0x40
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f831 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	80002000 	.word	0x80002000

08003cbc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d103      	bne.n	8003cda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d007      	beq.n	8003cf8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699a      	ldr	r2, [r3, #24]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	619a      	str	r2, [r3, #24]
  }
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d14:	e03b      	b.n	8003d8e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	6839      	ldr	r1, [r7, #0]
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f8d6 	bl	8003ecc <I2C_IsErrorOccurred>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e041      	b.n	8003dae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d30:	d02d      	beq.n	8003d8e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d32:	f7fe fd45 	bl	80027c0 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d302      	bcc.n	8003d48 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d122      	bne.n	8003d8e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	4013      	ands	r3, r2
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	bf0c      	ite	eq
 8003d58:	2301      	moveq	r3, #1
 8003d5a:	2300      	movne	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d113      	bne.n	8003d8e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6a:	f043 0220 	orr.w	r2, r3, #32
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e00f      	b.n	8003dae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699a      	ldr	r2, [r3, #24]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4013      	ands	r3, r2
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	bf0c      	ite	eq
 8003d9e:	2301      	moveq	r3, #1
 8003da0:	2300      	movne	r3, #0
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	461a      	mov	r2, r3
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d0b4      	beq.n	8003d16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dc2:	e033      	b.n	8003e2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f87f 	bl	8003ecc <I2C_IsErrorOccurred>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e031      	b.n	8003e3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dde:	d025      	beq.n	8003e2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de0:	f7fe fcee 	bl	80027c0 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d302      	bcc.n	8003df6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d11a      	bne.n	8003e2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d013      	beq.n	8003e2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e08:	f043 0220 	orr.w	r2, r3, #32
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e007      	b.n	8003e3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d1c4      	bne.n	8003dc4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e50:	e02f      	b.n	8003eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 f838 	bl	8003ecc <I2C_IsErrorOccurred>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e02d      	b.n	8003ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e66:	f7fe fcab 	bl	80027c0 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d302      	bcc.n	8003e7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d11a      	bne.n	8003eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d013      	beq.n	8003eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8e:	f043 0220 	orr.w	r2, r3, #32
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e007      	b.n	8003ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	f003 0320 	and.w	r3, r3, #32
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d1c8      	bne.n	8003e52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08a      	sub	sp, #40	@ 0x28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	f003 0310 	and.w	r3, r3, #16
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d068      	beq.n	8003fca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2210      	movs	r2, #16
 8003efe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f00:	e049      	b.n	8003f96 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f08:	d045      	beq.n	8003f96 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f0a:	f7fe fc59 	bl	80027c0 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d302      	bcc.n	8003f20 <I2C_IsErrorOccurred+0x54>
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d13a      	bne.n	8003f96 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f42:	d121      	bne.n	8003f88 <I2C_IsErrorOccurred+0xbc>
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f4a:	d01d      	beq.n	8003f88 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003f4c:	7cfb      	ldrb	r3, [r7, #19]
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d01a      	beq.n	8003f88 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f62:	f7fe fc2d 	bl	80027c0 <HAL_GetTick>
 8003f66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f68:	e00e      	b.n	8003f88 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f6a:	f7fe fc29 	bl	80027c0 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b19      	cmp	r3, #25
 8003f76:	d907      	bls.n	8003f88 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	f043 0320 	orr.w	r3, r3, #32
 8003f7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003f86:	e006      	b.n	8003f96 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	d1e9      	bne.n	8003f6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	d003      	beq.n	8003fac <I2C_IsErrorOccurred+0xe0>
 8003fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0aa      	beq.n	8003f02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003fac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d103      	bne.n	8003fbc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	f043 0304 	orr.w	r3, r3, #4
 8003fc2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00b      	beq.n	8003ff4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	f043 0301 	orr.w	r3, r3, #1
 8003fe2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00b      	beq.n	8004016 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	f043 0308 	orr.w	r3, r3, #8
 8004004:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800400e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00b      	beq.n	8004038 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	f043 0302 	orr.w	r3, r3, #2
 8004026:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004030:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004038:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01c      	beq.n	800407a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f7ff fe3b 	bl	8003cbc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6859      	ldr	r1, [r3, #4]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4b0d      	ldr	r3, [pc, #52]	@ (8004088 <I2C_IsErrorOccurred+0x1bc>)
 8004052:	400b      	ands	r3, r1
 8004054:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	431a      	orrs	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800407a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800407e:	4618      	mov	r0, r3
 8004080:	3728      	adds	r7, #40	@ 0x28
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	fe00e800 	.word	0xfe00e800

0800408c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	607b      	str	r3, [r7, #4]
 8004096:	460b      	mov	r3, r1
 8004098:	817b      	strh	r3, [r7, #10]
 800409a:	4613      	mov	r3, r2
 800409c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800409e:	897b      	ldrh	r3, [r7, #10]
 80040a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040a4:	7a7b      	ldrb	r3, [r7, #9]
 80040a6:	041b      	lsls	r3, r3, #16
 80040a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	0d5b      	lsrs	r3, r3, #21
 80040c6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80040ca:	4b08      	ldr	r3, [pc, #32]	@ (80040ec <I2C_TransferConfig+0x60>)
 80040cc:	430b      	orrs	r3, r1
 80040ce:	43db      	mvns	r3, r3
 80040d0:	ea02 0103 	and.w	r1, r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80040de:	bf00      	nop
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	03ff63ff 	.word	0x03ff63ff

080040f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b20      	cmp	r3, #32
 8004104:	d138      	bne.n	8004178 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004110:	2302      	movs	r3, #2
 8004112:	e032      	b.n	800417a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2224      	movs	r2, #36	@ 0x24
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0201 	bic.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004142:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6819      	ldr	r1, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004174:	2300      	movs	r3, #0
 8004176:	e000      	b.n	800417a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004178:	2302      	movs	r3, #2
  }
}
 800417a:	4618      	mov	r0, r3
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004186:	b480      	push	{r7}
 8004188:	b085      	sub	sp, #20
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b20      	cmp	r3, #32
 800419a:	d139      	bne.n	8004210 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041a6:	2302      	movs	r3, #2
 80041a8:	e033      	b.n	8004212 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2224      	movs	r2, #36	@ 0x24
 80041b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0201 	bic.w	r2, r2, #1
 80041c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80041d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	e000      	b.n	8004212 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004210:	2302      	movs	r3, #2
  }
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b086      	sub	sp, #24
 8004222:	af02      	add	r7, sp, #8
 8004224:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e108      	b.n	8004442 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fe f9c4 	bl	80025d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2203      	movs	r2, #3
 8004254:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800425e:	d102      	bne.n	8004266 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f004 f88e 	bl	800838c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6818      	ldr	r0, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	7c1a      	ldrb	r2, [r3, #16]
 8004278:	f88d 2000 	strb.w	r2, [sp]
 800427c:	3304      	adds	r3, #4
 800427e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004280:	f004 f82a 	bl	80082d8 <USB_CoreInit>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d005      	beq.n	8004296 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2202      	movs	r2, #2
 800428e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e0d5      	b.n	8004442 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2100      	movs	r1, #0
 800429c:	4618      	mov	r0, r3
 800429e:	f004 f886 	bl	80083ae <USB_SetCurrentMode>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0c6      	b.n	8004442 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042b4:	2300      	movs	r3, #0
 80042b6:	73fb      	strb	r3, [r7, #15]
 80042b8:	e04a      	b.n	8004350 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042ba:	7bfa      	ldrb	r2, [r7, #15]
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	4613      	mov	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	4413      	add	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	440b      	add	r3, r1
 80042c8:	3315      	adds	r3, #21
 80042ca:	2201      	movs	r2, #1
 80042cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042ce:	7bfa      	ldrb	r2, [r7, #15]
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	4413      	add	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	3314      	adds	r3, #20
 80042de:	7bfa      	ldrb	r2, [r7, #15]
 80042e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80042e2:	7bfa      	ldrb	r2, [r7, #15]
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	b298      	uxth	r0, r3
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	4413      	add	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	332e      	adds	r3, #46	@ 0x2e
 80042f6:	4602      	mov	r2, r0
 80042f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042fa:	7bfa      	ldrb	r2, [r7, #15]
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	3318      	adds	r3, #24
 800430a:	2200      	movs	r2, #0
 800430c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800430e:	7bfa      	ldrb	r2, [r7, #15]
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	331c      	adds	r3, #28
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004322:	7bfa      	ldrb	r2, [r7, #15]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	3320      	adds	r3, #32
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004336:	7bfa      	ldrb	r2, [r7, #15]
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	3324      	adds	r3, #36	@ 0x24
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800434a:	7bfb      	ldrb	r3, [r7, #15]
 800434c:	3301      	adds	r3, #1
 800434e:	73fb      	strb	r3, [r7, #15]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	791b      	ldrb	r3, [r3, #4]
 8004354:	7bfa      	ldrb	r2, [r7, #15]
 8004356:	429a      	cmp	r2, r3
 8004358:	d3af      	bcc.n	80042ba <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800435a:	2300      	movs	r3, #0
 800435c:	73fb      	strb	r3, [r7, #15]
 800435e:	e044      	b.n	80043ea <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004360:	7bfa      	ldrb	r2, [r7, #15]
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	4613      	mov	r3, r2
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004372:	2200      	movs	r2, #0
 8004374:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004376:	7bfa      	ldrb	r2, [r7, #15]
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	4613      	mov	r3, r2
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	4413      	add	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	440b      	add	r3, r1
 8004384:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004388:	7bfa      	ldrb	r2, [r7, #15]
 800438a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800438c:	7bfa      	ldrb	r2, [r7, #15]
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800439e:	2200      	movs	r2, #0
 80043a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043a2:	7bfa      	ldrb	r2, [r7, #15]
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	4413      	add	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043b8:	7bfa      	ldrb	r2, [r7, #15]
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	4613      	mov	r3, r2
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	4413      	add	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043ce:	7bfa      	ldrb	r2, [r7, #15]
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	4613      	mov	r3, r2
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	4413      	add	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	3301      	adds	r3, #1
 80043e8:	73fb      	strb	r3, [r7, #15]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	791b      	ldrb	r3, [r3, #4]
 80043ee:	7bfa      	ldrb	r2, [r7, #15]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d3b5      	bcc.n	8004360 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6818      	ldr	r0, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	7c1a      	ldrb	r2, [r3, #16]
 80043fc:	f88d 2000 	strb.w	r2, [sp]
 8004400:	3304      	adds	r3, #4
 8004402:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004404:	f004 f820 	bl	8008448 <USB_DevInit>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d005      	beq.n	800441a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2202      	movs	r2, #2
 8004412:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e013      	b.n	8004442 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	7b1b      	ldrb	r3, [r3, #12]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d102      	bne.n	8004436 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f80b 	bl	800444c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f004 f9db 	bl	80087f6 <USB_DevDisconnect>

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800447a:	4b05      	ldr	r3, [pc, #20]	@ (8004490 <HAL_PCDEx_ActivateLPM+0x44>)
 800447c:	4313      	orrs	r3, r2
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	10000003 	.word	0x10000003

08004494 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004498:	4b05      	ldr	r3, [pc, #20]	@ (80044b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a04      	ldr	r2, [pc, #16]	@ (80044b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800449e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044a2:	6013      	str	r3, [r2, #0]
}
 80044a4:	bf00      	nop
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40007000 	.word	0x40007000

080044b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80044bc:	2300      	movs	r3, #0
 80044be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e291      	b.n	80049ee <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 8087 	beq.w	80045e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044d8:	4b96      	ldr	r3, [pc, #600]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 030c 	and.w	r3, r3, #12
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d00c      	beq.n	80044fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044e4:	4b93      	ldr	r3, [pc, #588]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 030c 	and.w	r3, r3, #12
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d112      	bne.n	8004516 <HAL_RCC_OscConfig+0x62>
 80044f0:	4b90      	ldr	r3, [pc, #576]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044fc:	d10b      	bne.n	8004516 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044fe:	4b8d      	ldr	r3, [pc, #564]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d06c      	beq.n	80045e4 <HAL_RCC_OscConfig+0x130>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d168      	bne.n	80045e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e26b      	b.n	80049ee <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800451e:	d106      	bne.n	800452e <HAL_RCC_OscConfig+0x7a>
 8004520:	4b84      	ldr	r3, [pc, #528]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a83      	ldr	r2, [pc, #524]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 8004526:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	e02e      	b.n	800458c <HAL_RCC_OscConfig+0xd8>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10c      	bne.n	8004550 <HAL_RCC_OscConfig+0x9c>
 8004536:	4b7f      	ldr	r3, [pc, #508]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a7e      	ldr	r2, [pc, #504]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 800453c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	4b7c      	ldr	r3, [pc, #496]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a7b      	ldr	r2, [pc, #492]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 8004548:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	e01d      	b.n	800458c <HAL_RCC_OscConfig+0xd8>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004558:	d10c      	bne.n	8004574 <HAL_RCC_OscConfig+0xc0>
 800455a:	4b76      	ldr	r3, [pc, #472]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a75      	ldr	r2, [pc, #468]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 8004560:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	4b73      	ldr	r3, [pc, #460]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a72      	ldr	r2, [pc, #456]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 800456c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	e00b      	b.n	800458c <HAL_RCC_OscConfig+0xd8>
 8004574:	4b6f      	ldr	r3, [pc, #444]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a6e      	ldr	r2, [pc, #440]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 800457a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	4b6c      	ldr	r3, [pc, #432]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a6b      	ldr	r2, [pc, #428]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 8004586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800458a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d013      	beq.n	80045bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fe f914 	bl	80027c0 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800459c:	f7fe f910 	bl	80027c0 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b64      	cmp	r3, #100	@ 0x64
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e21f      	b.n	80049ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ae:	4b61      	ldr	r3, [pc, #388]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCC_OscConfig+0xe8>
 80045ba:	e014      	b.n	80045e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7fe f900 	bl	80027c0 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c4:	f7fe f8fc 	bl	80027c0 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b64      	cmp	r3, #100	@ 0x64
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e20b      	b.n	80049ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d6:	4b57      	ldr	r3, [pc, #348]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f0      	bne.n	80045c4 <HAL_RCC_OscConfig+0x110>
 80045e2:	e000      	b.n	80045e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d069      	beq.n	80046c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045f2:	4b50      	ldr	r3, [pc, #320]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 030c 	and.w	r3, r3, #12
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00b      	beq.n	8004616 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045fe:	4b4d      	ldr	r3, [pc, #308]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 030c 	and.w	r3, r3, #12
 8004606:	2b08      	cmp	r3, #8
 8004608:	d11c      	bne.n	8004644 <HAL_RCC_OscConfig+0x190>
 800460a:	4b4a      	ldr	r3, [pc, #296]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d116      	bne.n	8004644 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004616:	4b47      	ldr	r3, [pc, #284]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <HAL_RCC_OscConfig+0x17a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d001      	beq.n	800462e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e1df      	b.n	80049ee <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462e:	4b41      	ldr	r3, [pc, #260]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	493d      	ldr	r1, [pc, #244]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 800463e:	4313      	orrs	r3, r2
 8004640:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004642:	e040      	b.n	80046c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d023      	beq.n	8004694 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800464c:	4b39      	ldr	r3, [pc, #228]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a38      	ldr	r2, [pc, #224]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004658:	f7fe f8b2 	bl	80027c0 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004660:	f7fe f8ae 	bl	80027c0 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e1bd      	b.n	80049ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004672:	4b30      	ldr	r3, [pc, #192]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f0      	beq.n	8004660 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467e:	4b2d      	ldr	r3, [pc, #180]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4929      	ldr	r1, [pc, #164]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 800468e:	4313      	orrs	r3, r2
 8004690:	600b      	str	r3, [r1, #0]
 8004692:	e018      	b.n	80046c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004694:	4b27      	ldr	r3, [pc, #156]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a26      	ldr	r2, [pc, #152]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 800469a:	f023 0301 	bic.w	r3, r3, #1
 800469e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a0:	f7fe f88e 	bl	80027c0 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a8:	f7fe f88a 	bl	80027c0 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e199      	b.n	80049ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d038      	beq.n	8004744 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d019      	beq.n	800470e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046da:	4b16      	ldr	r3, [pc, #88]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 80046dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046de:	4a15      	ldr	r2, [pc, #84]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 80046e0:	f043 0301 	orr.w	r3, r3, #1
 80046e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e6:	f7fe f86b 	bl	80027c0 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ee:	f7fe f867 	bl	80027c0 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e176      	b.n	80049ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004700:	4b0c      	ldr	r3, [pc, #48]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 8004702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0f0      	beq.n	80046ee <HAL_RCC_OscConfig+0x23a>
 800470c:	e01a      	b.n	8004744 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800470e:	4b09      	ldr	r3, [pc, #36]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 8004710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004712:	4a08      	ldr	r2, [pc, #32]	@ (8004734 <HAL_RCC_OscConfig+0x280>)
 8004714:	f023 0301 	bic.w	r3, r3, #1
 8004718:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471a:	f7fe f851 	bl	80027c0 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004720:	e00a      	b.n	8004738 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004722:	f7fe f84d 	bl	80027c0 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d903      	bls.n	8004738 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e15c      	b.n	80049ee <HAL_RCC_OscConfig+0x53a>
 8004734:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004738:	4b91      	ldr	r3, [pc, #580]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 800473a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1ee      	bne.n	8004722 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 80a4 	beq.w	800489a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004752:	4b8b      	ldr	r3, [pc, #556]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 8004754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10d      	bne.n	800477a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800475e:	4b88      	ldr	r3, [pc, #544]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004762:	4a87      	ldr	r2, [pc, #540]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 8004764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004768:	6413      	str	r3, [r2, #64]	@ 0x40
 800476a:	4b85      	ldr	r3, [pc, #532]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004772:	60bb      	str	r3, [r7, #8]
 8004774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004776:	2301      	movs	r3, #1
 8004778:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800477a:	4b82      	ldr	r3, [pc, #520]	@ (8004984 <HAL_RCC_OscConfig+0x4d0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004782:	2b00      	cmp	r3, #0
 8004784:	d118      	bne.n	80047b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004786:	4b7f      	ldr	r3, [pc, #508]	@ (8004984 <HAL_RCC_OscConfig+0x4d0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a7e      	ldr	r2, [pc, #504]	@ (8004984 <HAL_RCC_OscConfig+0x4d0>)
 800478c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004792:	f7fe f815 	bl	80027c0 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479a:	f7fe f811 	bl	80027c0 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b64      	cmp	r3, #100	@ 0x64
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e120      	b.n	80049ee <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ac:	4b75      	ldr	r3, [pc, #468]	@ (8004984 <HAL_RCC_OscConfig+0x4d0>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d106      	bne.n	80047ce <HAL_RCC_OscConfig+0x31a>
 80047c0:	4b6f      	ldr	r3, [pc, #444]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 80047c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c4:	4a6e      	ldr	r2, [pc, #440]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 80047c6:	f043 0301 	orr.w	r3, r3, #1
 80047ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80047cc:	e02d      	b.n	800482a <HAL_RCC_OscConfig+0x376>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCC_OscConfig+0x33c>
 80047d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047da:	4a69      	ldr	r2, [pc, #420]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 80047dc:	f023 0301 	bic.w	r3, r3, #1
 80047e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80047e2:	4b67      	ldr	r3, [pc, #412]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e6:	4a66      	ldr	r2, [pc, #408]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 80047e8:	f023 0304 	bic.w	r3, r3, #4
 80047ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ee:	e01c      	b.n	800482a <HAL_RCC_OscConfig+0x376>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b05      	cmp	r3, #5
 80047f6:	d10c      	bne.n	8004812 <HAL_RCC_OscConfig+0x35e>
 80047f8:	4b61      	ldr	r3, [pc, #388]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 80047fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fc:	4a60      	ldr	r2, [pc, #384]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 80047fe:	f043 0304 	orr.w	r3, r3, #4
 8004802:	6713      	str	r3, [r2, #112]	@ 0x70
 8004804:	4b5e      	ldr	r3, [pc, #376]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 8004806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004808:	4a5d      	ldr	r2, [pc, #372]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004810:	e00b      	b.n	800482a <HAL_RCC_OscConfig+0x376>
 8004812:	4b5b      	ldr	r3, [pc, #364]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004816:	4a5a      	ldr	r2, [pc, #360]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 8004818:	f023 0301 	bic.w	r3, r3, #1
 800481c:	6713      	str	r3, [r2, #112]	@ 0x70
 800481e:	4b58      	ldr	r3, [pc, #352]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004822:	4a57      	ldr	r2, [pc, #348]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 8004824:	f023 0304 	bic.w	r3, r3, #4
 8004828:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d015      	beq.n	800485e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004832:	f7fd ffc5 	bl	80027c0 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004838:	e00a      	b.n	8004850 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800483a:	f7fd ffc1 	bl	80027c0 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004848:	4293      	cmp	r3, r2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e0ce      	b.n	80049ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004850:	4b4b      	ldr	r3, [pc, #300]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0ee      	beq.n	800483a <HAL_RCC_OscConfig+0x386>
 800485c:	e014      	b.n	8004888 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485e:	f7fd ffaf 	bl	80027c0 <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004864:	e00a      	b.n	800487c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004866:	f7fd ffab 	bl	80027c0 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004874:	4293      	cmp	r3, r2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e0b8      	b.n	80049ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800487c:	4b40      	ldr	r3, [pc, #256]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 800487e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1ee      	bne.n	8004866 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004888:	7dfb      	ldrb	r3, [r7, #23]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d105      	bne.n	800489a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800488e:	4b3c      	ldr	r3, [pc, #240]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004892:	4a3b      	ldr	r2, [pc, #236]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 8004894:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004898:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 80a4 	beq.w	80049ec <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048a4:	4b36      	ldr	r3, [pc, #216]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f003 030c 	and.w	r3, r3, #12
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d06b      	beq.n	8004988 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d149      	bne.n	800494c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b8:	4b31      	ldr	r3, [pc, #196]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a30      	ldr	r2, [pc, #192]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 80048be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c4:	f7fd ff7c 	bl	80027c0 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048cc:	f7fd ff78 	bl	80027c0 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e087      	b.n	80049ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048de:	4b28      	ldr	r3, [pc, #160]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f0      	bne.n	80048cc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	69da      	ldr	r2, [r3, #28]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	019b      	lsls	r3, r3, #6
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	3b01      	subs	r3, #1
 8004904:	041b      	lsls	r3, r3, #16
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490c:	061b      	lsls	r3, r3, #24
 800490e:	4313      	orrs	r3, r2
 8004910:	4a1b      	ldr	r2, [pc, #108]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 8004912:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004916:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004918:	4b19      	ldr	r3, [pc, #100]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a18      	ldr	r2, [pc, #96]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 800491e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004924:	f7fd ff4c 	bl	80027c0 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800492c:	f7fd ff48 	bl	80027c0 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e057      	b.n	80049ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493e:	4b10      	ldr	r3, [pc, #64]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCC_OscConfig+0x478>
 800494a:	e04f      	b.n	80049ec <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494c:	4b0c      	ldr	r3, [pc, #48]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a0b      	ldr	r2, [pc, #44]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 8004952:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004958:	f7fd ff32 	bl	80027c0 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004960:	f7fd ff2e 	bl	80027c0 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e03d      	b.n	80049ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004972:	4b03      	ldr	r3, [pc, #12]	@ (8004980 <HAL_RCC_OscConfig+0x4cc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1f0      	bne.n	8004960 <HAL_RCC_OscConfig+0x4ac>
 800497e:	e035      	b.n	80049ec <HAL_RCC_OscConfig+0x538>
 8004980:	40023800 	.word	0x40023800
 8004984:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004988:	4b1b      	ldr	r3, [pc, #108]	@ (80049f8 <HAL_RCC_OscConfig+0x544>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d028      	beq.n	80049e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d121      	bne.n	80049e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d11a      	bne.n	80049e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80049b8:	4013      	ands	r3, r2
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d111      	bne.n	80049e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ce:	085b      	lsrs	r3, r3, #1
 80049d0:	3b01      	subs	r3, #1
 80049d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d107      	bne.n	80049e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d001      	beq.n	80049ec <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40023800 	.word	0x40023800

080049fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e0d0      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a14:	4b6a      	ldr	r3, [pc, #424]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d910      	bls.n	8004a44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a22:	4b67      	ldr	r3, [pc, #412]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f023 020f 	bic.w	r2, r3, #15
 8004a2a:	4965      	ldr	r1, [pc, #404]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a32:	4b63      	ldr	r3, [pc, #396]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e0b8      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d020      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d005      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a5c:	4b59      	ldr	r3, [pc, #356]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	4a58      	ldr	r2, [pc, #352]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d005      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a74:	4b53      	ldr	r3, [pc, #332]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	4a52      	ldr	r2, [pc, #328]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a80:	4b50      	ldr	r3, [pc, #320]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	494d      	ldr	r1, [pc, #308]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d040      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d107      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa6:	4b47      	ldr	r3, [pc, #284]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d115      	bne.n	8004ade <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e07f      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d107      	bne.n	8004ace <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004abe:	4b41      	ldr	r3, [pc, #260]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d109      	bne.n	8004ade <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e073      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ace:	4b3d      	ldr	r3, [pc, #244]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e06b      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ade:	4b39      	ldr	r3, [pc, #228]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f023 0203 	bic.w	r2, r3, #3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	4936      	ldr	r1, [pc, #216]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af0:	f7fd fe66 	bl	80027c0 <HAL_GetTick>
 8004af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af6:	e00a      	b.n	8004b0e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af8:	f7fd fe62 	bl	80027c0 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e053      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 020c 	and.w	r2, r3, #12
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d1eb      	bne.n	8004af8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b20:	4b27      	ldr	r3, [pc, #156]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d210      	bcs.n	8004b50 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2e:	4b24      	ldr	r3, [pc, #144]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f023 020f 	bic.w	r2, r3, #15
 8004b36:	4922      	ldr	r1, [pc, #136]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3e:	4b20      	ldr	r3, [pc, #128]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e032      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d008      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b5c:	4b19      	ldr	r3, [pc, #100]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	4916      	ldr	r1, [pc, #88]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d009      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b7a:	4b12      	ldr	r3, [pc, #72]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	490e      	ldr	r1, [pc, #56]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b8e:	f000 f821 	bl	8004bd4 <HAL_RCC_GetSysClockFreq>
 8004b92:	4602      	mov	r2, r0
 8004b94:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	091b      	lsrs	r3, r3, #4
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	490a      	ldr	r1, [pc, #40]	@ (8004bc8 <HAL_RCC_ClockConfig+0x1cc>)
 8004ba0:	5ccb      	ldrb	r3, [r1, r3]
 8004ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba6:	4a09      	ldr	r2, [pc, #36]	@ (8004bcc <HAL_RCC_ClockConfig+0x1d0>)
 8004ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004baa:	4b09      	ldr	r3, [pc, #36]	@ (8004bd0 <HAL_RCC_ClockConfig+0x1d4>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fd fdc2 	bl	8002738 <HAL_InitTick>

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40023c00 	.word	0x40023c00
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	0800b754 	.word	0x0800b754
 8004bcc:	20000004 	.word	0x20000004
 8004bd0:	20000008 	.word	0x20000008

08004bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bd8:	b094      	sub	sp, #80	@ 0x50
 8004bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	647b      	str	r3, [r7, #68]	@ 0x44
 8004be0:	2300      	movs	r3, #0
 8004be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004be4:	2300      	movs	r3, #0
 8004be6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bec:	4b79      	ldr	r3, [pc, #484]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 030c 	and.w	r3, r3, #12
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d00d      	beq.n	8004c14 <HAL_RCC_GetSysClockFreq+0x40>
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	f200 80e1 	bhi.w	8004dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <HAL_RCC_GetSysClockFreq+0x34>
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d003      	beq.n	8004c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c06:	e0db      	b.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c08:	4b73      	ldr	r3, [pc, #460]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c0c:	e0db      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c0e:	4b73      	ldr	r3, [pc, #460]	@ (8004ddc <HAL_RCC_GetSysClockFreq+0x208>)
 8004c10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c12:	e0d8      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c14:	4b6f      	ldr	r3, [pc, #444]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c1e:	4b6d      	ldr	r3, [pc, #436]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d063      	beq.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c2a:	4b6a      	ldr	r3, [pc, #424]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	099b      	lsrs	r3, r3, #6
 8004c30:	2200      	movs	r2, #0
 8004c32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c3e:	2300      	movs	r3, #0
 8004c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c46:	4622      	mov	r2, r4
 8004c48:	462b      	mov	r3, r5
 8004c4a:	f04f 0000 	mov.w	r0, #0
 8004c4e:	f04f 0100 	mov.w	r1, #0
 8004c52:	0159      	lsls	r1, r3, #5
 8004c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c58:	0150      	lsls	r0, r2, #5
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4621      	mov	r1, r4
 8004c60:	1a51      	subs	r1, r2, r1
 8004c62:	6139      	str	r1, [r7, #16]
 8004c64:	4629      	mov	r1, r5
 8004c66:	eb63 0301 	sbc.w	r3, r3, r1
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c78:	4659      	mov	r1, fp
 8004c7a:	018b      	lsls	r3, r1, #6
 8004c7c:	4651      	mov	r1, sl
 8004c7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c82:	4651      	mov	r1, sl
 8004c84:	018a      	lsls	r2, r1, #6
 8004c86:	4651      	mov	r1, sl
 8004c88:	ebb2 0801 	subs.w	r8, r2, r1
 8004c8c:	4659      	mov	r1, fp
 8004c8e:	eb63 0901 	sbc.w	r9, r3, r1
 8004c92:	f04f 0200 	mov.w	r2, #0
 8004c96:	f04f 0300 	mov.w	r3, #0
 8004c9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ca2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ca6:	4690      	mov	r8, r2
 8004ca8:	4699      	mov	r9, r3
 8004caa:	4623      	mov	r3, r4
 8004cac:	eb18 0303 	adds.w	r3, r8, r3
 8004cb0:	60bb      	str	r3, [r7, #8]
 8004cb2:	462b      	mov	r3, r5
 8004cb4:	eb49 0303 	adc.w	r3, r9, r3
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	024b      	lsls	r3, r1, #9
 8004cca:	4621      	mov	r1, r4
 8004ccc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	024a      	lsls	r2, r1, #9
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cda:	2200      	movs	r2, #0
 8004cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ce0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ce4:	f7fb ffd0 	bl	8000c88 <__aeabi_uldivmod>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4613      	mov	r3, r2
 8004cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cf0:	e058      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cf2:	4b38      	ldr	r3, [pc, #224]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	099b      	lsrs	r3, r3, #6
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d02:	623b      	str	r3, [r7, #32]
 8004d04:	2300      	movs	r3, #0
 8004d06:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d0c:	4642      	mov	r2, r8
 8004d0e:	464b      	mov	r3, r9
 8004d10:	f04f 0000 	mov.w	r0, #0
 8004d14:	f04f 0100 	mov.w	r1, #0
 8004d18:	0159      	lsls	r1, r3, #5
 8004d1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d1e:	0150      	lsls	r0, r2, #5
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4641      	mov	r1, r8
 8004d26:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d44:	ebb2 040a 	subs.w	r4, r2, sl
 8004d48:	eb63 050b 	sbc.w	r5, r3, fp
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	00eb      	lsls	r3, r5, #3
 8004d56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d5a:	00e2      	lsls	r2, r4, #3
 8004d5c:	4614      	mov	r4, r2
 8004d5e:	461d      	mov	r5, r3
 8004d60:	4643      	mov	r3, r8
 8004d62:	18e3      	adds	r3, r4, r3
 8004d64:	603b      	str	r3, [r7, #0]
 8004d66:	464b      	mov	r3, r9
 8004d68:	eb45 0303 	adc.w	r3, r5, r3
 8004d6c:	607b      	str	r3, [r7, #4]
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	028b      	lsls	r3, r1, #10
 8004d7e:	4621      	mov	r1, r4
 8004d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d84:	4621      	mov	r1, r4
 8004d86:	028a      	lsls	r2, r1, #10
 8004d88:	4610      	mov	r0, r2
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d8e:	2200      	movs	r2, #0
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	61fa      	str	r2, [r7, #28]
 8004d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d98:	f7fb ff76 	bl	8000c88 <__aeabi_uldivmod>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4613      	mov	r3, r2
 8004da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004da4:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	0c1b      	lsrs	r3, r3, #16
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	3301      	adds	r3, #1
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004db4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004db6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dbe:	e002      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dc0:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3750      	adds	r7, #80	@ 0x50
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	00f42400 	.word	0x00f42400
 8004ddc:	007a1200 	.word	0x007a1200

08004de0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004de4:	4b03      	ldr	r3, [pc, #12]	@ (8004df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004de6:	681b      	ldr	r3, [r3, #0]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	20000004 	.word	0x20000004

08004df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004dfc:	f7ff fff0 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8004e00:	4602      	mov	r2, r0
 8004e02:	4b05      	ldr	r3, [pc, #20]	@ (8004e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	0a9b      	lsrs	r3, r3, #10
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	4903      	ldr	r1, [pc, #12]	@ (8004e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e0e:	5ccb      	ldrb	r3, [r1, r3]
 8004e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	40023800 	.word	0x40023800
 8004e1c:	0800b764 	.word	0x0800b764

08004e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e24:	f7ff ffdc 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	4b05      	ldr	r3, [pc, #20]	@ (8004e40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	0b5b      	lsrs	r3, r3, #13
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	4903      	ldr	r1, [pc, #12]	@ (8004e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e36:	5ccb      	ldrb	r3, [r1, r3]
 8004e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40023800 	.word	0x40023800
 8004e44:	0800b764 	.word	0x0800b764

08004e48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004e54:	2300      	movs	r3, #0
 8004e56:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d012      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e70:	4b69      	ldr	r3, [pc, #420]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	4a68      	ldr	r2, [pc, #416]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e76:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004e7a:	6093      	str	r3, [r2, #8]
 8004e7c:	4b66      	ldr	r3, [pc, #408]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e84:	4964      	ldr	r1, [pc, #400]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004e92:	2301      	movs	r3, #1
 8004e94:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d017      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ea2:	4b5d      	ldr	r3, [pc, #372]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ea8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb0:	4959      	ldr	r1, [pc, #356]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ebc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ec0:	d101      	bne.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d017      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ede:	4b4e      	ldr	r3, [pc, #312]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ee4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eec:	494a      	ldr	r1, [pc, #296]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004efc:	d101      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004efe:	2301      	movs	r3, #1
 8004f00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0320 	and.w	r3, r3, #32
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 808b 	beq.w	8005042 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f30:	4a39      	ldr	r2, [pc, #228]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f36:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f38:	4b37      	ldr	r3, [pc, #220]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f40:	60bb      	str	r3, [r7, #8]
 8004f42:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f44:	4b35      	ldr	r3, [pc, #212]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a34      	ldr	r2, [pc, #208]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f50:	f7fd fc36 	bl	80027c0 <HAL_GetTick>
 8004f54:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f56:	e008      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f58:	f7fd fc32 	bl	80027c0 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b64      	cmp	r3, #100	@ 0x64
 8004f64:	d901      	bls.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e357      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f6a:	4b2c      	ldr	r3, [pc, #176]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0f0      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f76:	4b28      	ldr	r3, [pc, #160]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f7e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d035      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d02e      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f94:	4b20      	ldr	r3, [pc, #128]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f9c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fa8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004faa:	4b1b      	ldr	r3, [pc, #108]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fae:	4a1a      	ldr	r2, [pc, #104]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fb4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004fb6:	4a18      	ldr	r2, [pc, #96]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fbc:	4b16      	ldr	r3, [pc, #88]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d114      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc8:	f7fd fbfa 	bl	80027c0 <HAL_GetTick>
 8004fcc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fce:	e00a      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fd0:	f7fd fbf6 	bl	80027c0 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e319      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0ee      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ffa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ffe:	d111      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005000:	4b05      	ldr	r3, [pc, #20]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800500c:	4b04      	ldr	r3, [pc, #16]	@ (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800500e:	400b      	ands	r3, r1
 8005010:	4901      	ldr	r1, [pc, #4]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
 8005016:	e00b      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005018:	40023800 	.word	0x40023800
 800501c:	40007000 	.word	0x40007000
 8005020:	0ffffcff 	.word	0x0ffffcff
 8005024:	4baa      	ldr	r3, [pc, #680]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	4aa9      	ldr	r2, [pc, #676]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800502a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800502e:	6093      	str	r3, [r2, #8]
 8005030:	4ba7      	ldr	r3, [pc, #668]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005032:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800503c:	49a4      	ldr	r1, [pc, #656]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800503e:	4313      	orrs	r3, r2
 8005040:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0310 	and.w	r3, r3, #16
 800504a:	2b00      	cmp	r3, #0
 800504c:	d010      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800504e:	4ba0      	ldr	r3, [pc, #640]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005050:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005054:	4a9e      	ldr	r2, [pc, #632]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005056:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800505a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800505e:	4b9c      	ldr	r3, [pc, #624]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005060:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005068:	4999      	ldr	r1, [pc, #612]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800507c:	4b94      	ldr	r3, [pc, #592]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005082:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800508a:	4991      	ldr	r1, [pc, #580]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800509e:	4b8c      	ldr	r3, [pc, #560]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050ac:	4988      	ldr	r1, [pc, #544]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050c0:	4b83      	ldr	r3, [pc, #524]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050ce:	4980      	ldr	r1, [pc, #512]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050e2:	4b7b      	ldr	r3, [pc, #492]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f0:	4977      	ldr	r1, [pc, #476]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005104:	4b72      	ldr	r3, [pc, #456]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800510a:	f023 0203 	bic.w	r2, r3, #3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005112:	496f      	ldr	r1, [pc, #444]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005126:	4b6a      	ldr	r3, [pc, #424]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800512c:	f023 020c 	bic.w	r2, r3, #12
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005134:	4966      	ldr	r1, [pc, #408]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00a      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005148:	4b61      	ldr	r3, [pc, #388]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800514e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005156:	495e      	ldr	r1, [pc, #376]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005158:	4313      	orrs	r3, r2
 800515a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00a      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800516a:	4b59      	ldr	r3, [pc, #356]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800516c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005170:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005178:	4955      	ldr	r1, [pc, #340]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800517a:	4313      	orrs	r3, r2
 800517c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800518c:	4b50      	ldr	r3, [pc, #320]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800518e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005192:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800519a:	494d      	ldr	r1, [pc, #308]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800519c:	4313      	orrs	r3, r2
 800519e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80051ae:	4b48      	ldr	r3, [pc, #288]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051b4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051bc:	4944      	ldr	r1, [pc, #272]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00a      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80051d0:	4b3f      	ldr	r3, [pc, #252]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051de:	493c      	ldr	r1, [pc, #240]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80051f2:	4b37      	ldr	r3, [pc, #220]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005200:	4933      	ldr	r1, [pc, #204]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005202:	4313      	orrs	r3, r2
 8005204:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005214:	4b2e      	ldr	r3, [pc, #184]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800521a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005222:	492b      	ldr	r1, [pc, #172]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005224:	4313      	orrs	r3, r2
 8005226:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d011      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005236:	4b26      	ldr	r3, [pc, #152]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800523c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005244:	4922      	ldr	r1, [pc, #136]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005250:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005254:	d101      	bne.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005256:	2301      	movs	r3, #1
 8005258:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005266:	2301      	movs	r3, #1
 8005268:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005276:	4b16      	ldr	r3, [pc, #88]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800527c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005284:	4912      	ldr	r1, [pc, #72]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00b      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005298:	4b0d      	ldr	r3, [pc, #52]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800529e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052a8:	4909      	ldr	r1, [pc, #36]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d006      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 80d9 	beq.w	8005476 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052c4:	4b02      	ldr	r3, [pc, #8]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a01      	ldr	r2, [pc, #4]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052ce:	e001      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80052d0:	40023800 	.word	0x40023800
 80052d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052d6:	f7fd fa73 	bl	80027c0 <HAL_GetTick>
 80052da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052dc:	e008      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052de:	f7fd fa6f 	bl	80027c0 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	2b64      	cmp	r3, #100	@ 0x64
 80052ea:	d901      	bls.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e194      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052f0:	4b6c      	ldr	r3, [pc, #432]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1f0      	bne.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	d021      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800530c:	2b00      	cmp	r3, #0
 800530e:	d11d      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005310:	4b64      	ldr	r3, [pc, #400]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005312:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005316:	0c1b      	lsrs	r3, r3, #16
 8005318:	f003 0303 	and.w	r3, r3, #3
 800531c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800531e:	4b61      	ldr	r3, [pc, #388]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005320:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005324:	0e1b      	lsrs	r3, r3, #24
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	019a      	lsls	r2, r3, #6
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	041b      	lsls	r3, r3, #16
 8005336:	431a      	orrs	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	061b      	lsls	r3, r3, #24
 800533c:	431a      	orrs	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	071b      	lsls	r3, r3, #28
 8005344:	4957      	ldr	r1, [pc, #348]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800535c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005360:	d00a      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800536a:	2b00      	cmp	r3, #0
 800536c:	d02e      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005372:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005376:	d129      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005378:	4b4a      	ldr	r3, [pc, #296]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800537a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800537e:	0c1b      	lsrs	r3, r3, #16
 8005380:	f003 0303 	and.w	r3, r3, #3
 8005384:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005386:	4b47      	ldr	r3, [pc, #284]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005388:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800538c:	0f1b      	lsrs	r3, r3, #28
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	019a      	lsls	r2, r3, #6
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	041b      	lsls	r3, r3, #16
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	061b      	lsls	r3, r3, #24
 80053a6:	431a      	orrs	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	071b      	lsls	r3, r3, #28
 80053ac:	493d      	ldr	r1, [pc, #244]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80053b4:	4b3b      	ldr	r3, [pc, #236]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053ba:	f023 021f 	bic.w	r2, r3, #31
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c2:	3b01      	subs	r3, #1
 80053c4:	4937      	ldr	r1, [pc, #220]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d01d      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053d8:	4b32      	ldr	r3, [pc, #200]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053de:	0e1b      	lsrs	r3, r3, #24
 80053e0:	f003 030f 	and.w	r3, r3, #15
 80053e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053e6:	4b2f      	ldr	r3, [pc, #188]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053ec:	0f1b      	lsrs	r3, r3, #28
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	019a      	lsls	r2, r3, #6
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	041b      	lsls	r3, r3, #16
 8005400:	431a      	orrs	r2, r3
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	061b      	lsls	r3, r3, #24
 8005406:	431a      	orrs	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	071b      	lsls	r3, r3, #28
 800540c:	4925      	ldr	r1, [pc, #148]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d011      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	019a      	lsls	r2, r3, #6
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	041b      	lsls	r3, r3, #16
 800542c:	431a      	orrs	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	061b      	lsls	r3, r3, #24
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	071b      	lsls	r3, r3, #28
 800543c:	4919      	ldr	r1, [pc, #100]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800543e:	4313      	orrs	r3, r2
 8005440:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005444:	4b17      	ldr	r3, [pc, #92]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a16      	ldr	r2, [pc, #88]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800544a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800544e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005450:	f7fd f9b6 	bl	80027c0 <HAL_GetTick>
 8005454:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005456:	e008      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005458:	f7fd f9b2 	bl	80027c0 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b64      	cmp	r3, #100	@ 0x64
 8005464:	d901      	bls.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e0d7      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800546a:	4b0e      	ldr	r3, [pc, #56]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0f0      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	2b01      	cmp	r3, #1
 800547a:	f040 80cd 	bne.w	8005618 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800547e:	4b09      	ldr	r3, [pc, #36]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a08      	ldr	r2, [pc, #32]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005484:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005488:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800548a:	f7fd f999 	bl	80027c0 <HAL_GetTick>
 800548e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005490:	e00a      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005492:	f7fd f995 	bl	80027c0 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b64      	cmp	r3, #100	@ 0x64
 800549e:	d903      	bls.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e0ba      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80054a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054a8:	4b5e      	ldr	r3, [pc, #376]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054b4:	d0ed      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x682>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d009      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d02e      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d12a      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80054de:	4b51      	ldr	r3, [pc, #324]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e4:	0c1b      	lsrs	r3, r3, #16
 80054e6:	f003 0303 	and.w	r3, r3, #3
 80054ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054ec:	4b4d      	ldr	r3, [pc, #308]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f2:	0f1b      	lsrs	r3, r3, #28
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	019a      	lsls	r2, r3, #6
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	041b      	lsls	r3, r3, #16
 8005504:	431a      	orrs	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	061b      	lsls	r3, r3, #24
 800550c:	431a      	orrs	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	071b      	lsls	r3, r3, #28
 8005512:	4944      	ldr	r1, [pc, #272]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005514:	4313      	orrs	r3, r2
 8005516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800551a:	4b42      	ldr	r3, [pc, #264]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800551c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005520:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005528:	3b01      	subs	r3, #1
 800552a:	021b      	lsls	r3, r3, #8
 800552c:	493d      	ldr	r1, [pc, #244]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d022      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005544:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005548:	d11d      	bne.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800554a:	4b36      	ldr	r3, [pc, #216]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005550:	0e1b      	lsrs	r3, r3, #24
 8005552:	f003 030f 	and.w	r3, r3, #15
 8005556:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005558:	4b32      	ldr	r3, [pc, #200]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800555a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800555e:	0f1b      	lsrs	r3, r3, #28
 8005560:	f003 0307 	and.w	r3, r3, #7
 8005564:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	019a      	lsls	r2, r3, #6
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	041b      	lsls	r3, r3, #16
 8005572:	431a      	orrs	r2, r3
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	061b      	lsls	r3, r3, #24
 8005578:	431a      	orrs	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	071b      	lsls	r3, r3, #28
 800557e:	4929      	ldr	r1, [pc, #164]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0308 	and.w	r3, r3, #8
 800558e:	2b00      	cmp	r3, #0
 8005590:	d028      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005592:	4b24      	ldr	r3, [pc, #144]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005598:	0e1b      	lsrs	r3, r3, #24
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80055a0:	4b20      	ldr	r3, [pc, #128]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a6:	0c1b      	lsrs	r3, r3, #16
 80055a8:	f003 0303 	and.w	r3, r3, #3
 80055ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	019a      	lsls	r2, r3, #6
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	041b      	lsls	r3, r3, #16
 80055b8:	431a      	orrs	r2, r3
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	061b      	lsls	r3, r3, #24
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	071b      	lsls	r3, r3, #28
 80055c6:	4917      	ldr	r1, [pc, #92]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055ce:	4b15      	ldr	r3, [pc, #84]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055dc:	4911      	ldr	r1, [pc, #68]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055f0:	f7fd f8e6 	bl	80027c0 <HAL_GetTick>
 80055f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055f6:	e008      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055f8:	f7fd f8e2 	bl	80027c0 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b64      	cmp	r3, #100	@ 0x64
 8005604:	d901      	bls.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e007      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800560a:	4b06      	ldr	r3, [pc, #24]	@ (8005624 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005612:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005616:	d1ef      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3720      	adds	r7, #32
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	40023800 	.word	0x40023800

08005628 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e09d      	b.n	8005776 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563e:	2b00      	cmp	r3, #0
 8005640:	d108      	bne.n	8005654 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800564a:	d009      	beq.n	8005660 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	61da      	str	r2, [r3, #28]
 8005652:	e005      	b.n	8005660 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7fc fba0 	bl	8001dc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005696:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056a0:	d902      	bls.n	80056a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	e002      	b.n	80056ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80056a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80056ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80056b6:	d007      	beq.n	80056c8 <HAL_SPI_Init+0xa0>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056c0:	d002      	beq.n	80056c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	431a      	orrs	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	431a      	orrs	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056f6:	431a      	orrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005700:	431a      	orrs	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800570a:	ea42 0103 	orr.w	r1, r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005712:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	0c1b      	lsrs	r3, r3, #16
 8005724:	f003 0204 	and.w	r2, r3, #4
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572c:	f003 0310 	and.w	r3, r3, #16
 8005730:	431a      	orrs	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005736:	f003 0308 	and.w	r3, r3, #8
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005744:	ea42 0103 	orr.w	r1, r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69da      	ldr	r2, [r3, #28]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005764:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
	...

08005780 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b088      	sub	sp, #32
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10e      	bne.n	80057c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d009      	beq.n	80057c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d004      	beq.n	80057c0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	4798      	blx	r3
    return;
 80057be:	e0ce      	b.n	800595e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d009      	beq.n	80057de <HAL_SPI_IRQHandler+0x5e>
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d004      	beq.n	80057de <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	4798      	blx	r3
    return;
 80057dc:	e0bf      	b.n	800595e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	f003 0320 	and.w	r3, r3, #32
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10a      	bne.n	80057fe <HAL_SPI_IRQHandler+0x7e>
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d105      	bne.n	80057fe <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 80b0 	beq.w	800595e <HAL_SPI_IRQHandler+0x1de>
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	f003 0320 	and.w	r3, r3, #32
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 80aa 	beq.w	800595e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005810:	2b00      	cmp	r3, #0
 8005812:	d023      	beq.n	800585c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b03      	cmp	r3, #3
 800581e:	d011      	beq.n	8005844 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005824:	f043 0204 	orr.w	r2, r3, #4
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800582c:	2300      	movs	r3, #0
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	617b      	str	r3, [r7, #20]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	617b      	str	r3, [r7, #20]
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	e00b      	b.n	800585c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005844:	2300      	movs	r3, #0
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	613b      	str	r3, [r7, #16]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	613b      	str	r3, [r7, #16]
 8005858:	693b      	ldr	r3, [r7, #16]
        return;
 800585a:	e080      	b.n	800595e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d014      	beq.n	8005890 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800586a:	f043 0201 	orr.w	r2, r3, #1
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	60fb      	str	r3, [r7, #12]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00c      	beq.n	80058b4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800589e:	f043 0208 	orr.w	r2, r3, #8
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80058a6:	2300      	movs	r3, #0
 80058a8:	60bb      	str	r3, [r7, #8]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	60bb      	str	r3, [r7, #8]
 80058b2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d04f      	beq.n	800595c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80058ca:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d104      	bne.n	80058e8 <HAL_SPI_IRQHandler+0x168>
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d034      	beq.n	8005952 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0203 	bic.w	r2, r2, #3
 80058f6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d011      	beq.n	8005924 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005904:	4a17      	ldr	r2, [pc, #92]	@ (8005964 <HAL_SPI_IRQHandler+0x1e4>)
 8005906:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800590c:	4618      	mov	r0, r3
 800590e:	f7fd f908 	bl	8002b22 <HAL_DMA_Abort_IT>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d005      	beq.n	8005924 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800591c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005928:	2b00      	cmp	r3, #0
 800592a:	d016      	beq.n	800595a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005930:	4a0c      	ldr	r2, [pc, #48]	@ (8005964 <HAL_SPI_IRQHandler+0x1e4>)
 8005932:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005938:	4618      	mov	r0, r3
 800593a:	f7fd f8f2 	bl	8002b22 <HAL_DMA_Abort_IT>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005948:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8005950:	e003      	b.n	800595a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f808 	bl	8005968 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005958:	e000      	b.n	800595c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800595a:	bf00      	nop
    return;
 800595c:	bf00      	nop
  }
}
 800595e:	3720      	adds	r7, #32
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	0800597d 	.word	0x0800597d

08005968 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005988:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f7ff ffe5 	bl	8005968 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800599e:	bf00      	nop
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b082      	sub	sp, #8
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e049      	b.n	8005a4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d106      	bne.n	80059d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7fc fc5b 	bl	8002288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2202      	movs	r2, #2
 80059d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3304      	adds	r3, #4
 80059e2:	4619      	mov	r1, r3
 80059e4:	4610      	mov	r0, r2
 80059e6:	f000 fd17 	bl	8006418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d001      	beq.n	8005a6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e054      	b.n	8005b16 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f042 0201 	orr.w	r2, r2, #1
 8005a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a26      	ldr	r2, [pc, #152]	@ (8005b24 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d022      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0x80>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a96:	d01d      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0x80>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a22      	ldr	r2, [pc, #136]	@ (8005b28 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d018      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0x80>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a21      	ldr	r2, [pc, #132]	@ (8005b2c <HAL_TIM_Base_Start_IT+0xd8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d013      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0x80>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8005b30 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00e      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0x80>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a1e      	ldr	r2, [pc, #120]	@ (8005b34 <HAL_TIM_Base_Start_IT+0xe0>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d009      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0x80>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8005b38 <HAL_TIM_Base_Start_IT+0xe4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d004      	beq.n	8005ad4 <HAL_TIM_Base_Start_IT+0x80>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a1b      	ldr	r2, [pc, #108]	@ (8005b3c <HAL_TIM_Base_Start_IT+0xe8>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d115      	bne.n	8005b00 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689a      	ldr	r2, [r3, #8]
 8005ada:	4b19      	ldr	r3, [pc, #100]	@ (8005b40 <HAL_TIM_Base_Start_IT+0xec>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b06      	cmp	r3, #6
 8005ae4:	d015      	beq.n	8005b12 <HAL_TIM_Base_Start_IT+0xbe>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aec:	d011      	beq.n	8005b12 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f042 0201 	orr.w	r2, r2, #1
 8005afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005afe:	e008      	b.n	8005b12 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f042 0201 	orr.w	r2, r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	e000      	b.n	8005b14 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	40010000 	.word	0x40010000
 8005b28:	40000400 	.word	0x40000400
 8005b2c:	40000800 	.word	0x40000800
 8005b30:	40000c00 	.word	0x40000c00
 8005b34:	40010400 	.word	0x40010400
 8005b38:	40014000 	.word	0x40014000
 8005b3c:	40001800 	.word	0x40001800
 8005b40:	00010007 	.word	0x00010007

08005b44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e049      	b.n	8005bea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d106      	bne.n	8005b70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f841 	bl	8005bf2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3304      	adds	r3, #4
 8005b80:	4619      	mov	r1, r3
 8005b82:	4610      	mov	r0, r2
 8005b84:	f000 fc48 	bl	8006418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
	...

08005c08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d109      	bne.n	8005c2c <HAL_TIM_PWM_Start+0x24>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	bf14      	ite	ne
 8005c24:	2301      	movne	r3, #1
 8005c26:	2300      	moveq	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	e03c      	b.n	8005ca6 <HAL_TIM_PWM_Start+0x9e>
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d109      	bne.n	8005c46 <HAL_TIM_PWM_Start+0x3e>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	bf14      	ite	ne
 8005c3e:	2301      	movne	r3, #1
 8005c40:	2300      	moveq	r3, #0
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	e02f      	b.n	8005ca6 <HAL_TIM_PWM_Start+0x9e>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d109      	bne.n	8005c60 <HAL_TIM_PWM_Start+0x58>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	bf14      	ite	ne
 8005c58:	2301      	movne	r3, #1
 8005c5a:	2300      	moveq	r3, #0
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	e022      	b.n	8005ca6 <HAL_TIM_PWM_Start+0x9e>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	2b0c      	cmp	r3, #12
 8005c64:	d109      	bne.n	8005c7a <HAL_TIM_PWM_Start+0x72>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	bf14      	ite	ne
 8005c72:	2301      	movne	r3, #1
 8005c74:	2300      	moveq	r3, #0
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	e015      	b.n	8005ca6 <HAL_TIM_PWM_Start+0x9e>
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b10      	cmp	r3, #16
 8005c7e:	d109      	bne.n	8005c94 <HAL_TIM_PWM_Start+0x8c>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	bf14      	ite	ne
 8005c8c:	2301      	movne	r3, #1
 8005c8e:	2300      	moveq	r3, #0
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	e008      	b.n	8005ca6 <HAL_TIM_PWM_Start+0x9e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	bf14      	ite	ne
 8005ca0:	2301      	movne	r3, #1
 8005ca2:	2300      	moveq	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e092      	b.n	8005dd4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d104      	bne.n	8005cbe <HAL_TIM_PWM_Start+0xb6>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cbc:	e023      	b.n	8005d06 <HAL_TIM_PWM_Start+0xfe>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	d104      	bne.n	8005cce <HAL_TIM_PWM_Start+0xc6>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ccc:	e01b      	b.n	8005d06 <HAL_TIM_PWM_Start+0xfe>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d104      	bne.n	8005cde <HAL_TIM_PWM_Start+0xd6>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cdc:	e013      	b.n	8005d06 <HAL_TIM_PWM_Start+0xfe>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b0c      	cmp	r3, #12
 8005ce2:	d104      	bne.n	8005cee <HAL_TIM_PWM_Start+0xe6>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005cec:	e00b      	b.n	8005d06 <HAL_TIM_PWM_Start+0xfe>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b10      	cmp	r3, #16
 8005cf2:	d104      	bne.n	8005cfe <HAL_TIM_PWM_Start+0xf6>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cfc:	e003      	b.n	8005d06 <HAL_TIM_PWM_Start+0xfe>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2202      	movs	r2, #2
 8005d02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	6839      	ldr	r1, [r7, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 ff26 	bl	8006b60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a30      	ldr	r2, [pc, #192]	@ (8005ddc <HAL_TIM_PWM_Start+0x1d4>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d004      	beq.n	8005d28 <HAL_TIM_PWM_Start+0x120>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a2f      	ldr	r2, [pc, #188]	@ (8005de0 <HAL_TIM_PWM_Start+0x1d8>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d101      	bne.n	8005d2c <HAL_TIM_PWM_Start+0x124>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e000      	b.n	8005d2e <HAL_TIM_PWM_Start+0x126>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d007      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d40:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a25      	ldr	r2, [pc, #148]	@ (8005ddc <HAL_TIM_PWM_Start+0x1d4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d022      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x18a>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d54:	d01d      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x18a>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a22      	ldr	r2, [pc, #136]	@ (8005de4 <HAL_TIM_PWM_Start+0x1dc>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d018      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x18a>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a20      	ldr	r2, [pc, #128]	@ (8005de8 <HAL_TIM_PWM_Start+0x1e0>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d013      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x18a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8005dec <HAL_TIM_PWM_Start+0x1e4>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00e      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x18a>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a19      	ldr	r2, [pc, #100]	@ (8005de0 <HAL_TIM_PWM_Start+0x1d8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d009      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x18a>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a1b      	ldr	r2, [pc, #108]	@ (8005df0 <HAL_TIM_PWM_Start+0x1e8>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d004      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x18a>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a19      	ldr	r2, [pc, #100]	@ (8005df4 <HAL_TIM_PWM_Start+0x1ec>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d115      	bne.n	8005dbe <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	4b17      	ldr	r3, [pc, #92]	@ (8005df8 <HAL_TIM_PWM_Start+0x1f0>)
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b06      	cmp	r3, #6
 8005da2:	d015      	beq.n	8005dd0 <HAL_TIM_PWM_Start+0x1c8>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005daa:	d011      	beq.n	8005dd0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0201 	orr.w	r2, r2, #1
 8005dba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dbc:	e008      	b.n	8005dd0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f042 0201 	orr.w	r2, r2, #1
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	e000      	b.n	8005dd2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	40010000 	.word	0x40010000
 8005de0:	40010400 	.word	0x40010400
 8005de4:	40000400 	.word	0x40000400
 8005de8:	40000800 	.word	0x40000800
 8005dec:	40000c00 	.word	0x40000c00
 8005df0:	40014000 	.word	0x40014000
 8005df4:	40001800 	.word	0x40001800
 8005df8:	00010007 	.word	0x00010007

08005dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d020      	beq.n	8005e60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d01b      	beq.n	8005e60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f06f 0202 	mvn.w	r2, #2
 8005e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fac8 	bl	80063dc <HAL_TIM_IC_CaptureCallback>
 8005e4c:	e005      	b.n	8005e5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 faba 	bl	80063c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 facb 	bl	80063f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d020      	beq.n	8005eac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d01b      	beq.n	8005eac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f06f 0204 	mvn.w	r2, #4
 8005e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2202      	movs	r2, #2
 8005e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 faa2 	bl	80063dc <HAL_TIM_IC_CaptureCallback>
 8005e98:	e005      	b.n	8005ea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fa94 	bl	80063c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 faa5 	bl	80063f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f003 0308 	and.w	r3, r3, #8
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d020      	beq.n	8005ef8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f003 0308 	and.w	r3, r3, #8
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01b      	beq.n	8005ef8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0208 	mvn.w	r2, #8
 8005ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2204      	movs	r2, #4
 8005ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fa7c 	bl	80063dc <HAL_TIM_IC_CaptureCallback>
 8005ee4:	e005      	b.n	8005ef2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fa6e 	bl	80063c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fa7f 	bl	80063f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f003 0310 	and.w	r3, r3, #16
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d020      	beq.n	8005f44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f003 0310 	and.w	r3, r3, #16
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01b      	beq.n	8005f44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0210 	mvn.w	r2, #16
 8005f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2208      	movs	r2, #8
 8005f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fa56 	bl	80063dc <HAL_TIM_IC_CaptureCallback>
 8005f30:	e005      	b.n	8005f3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fa48 	bl	80063c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fa59 	bl	80063f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00c      	beq.n	8005f68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d007      	beq.n	8005f68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f06f 0201 	mvn.w	r2, #1
 8005f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7fb fcf2 	bl	800194c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d104      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00c      	beq.n	8005f96 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d007      	beq.n	8005f96 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fea3 	bl	8006cdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00c      	beq.n	8005fba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d007      	beq.n	8005fba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fe9b 	bl	8006cf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00c      	beq.n	8005fde <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d007      	beq.n	8005fde <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fa13 	bl	8006404 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	f003 0320 	and.w	r3, r3, #32
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00c      	beq.n	8006002 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f003 0320 	and.w	r3, r3, #32
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d007      	beq.n	8006002 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f06f 0220 	mvn.w	r2, #32
 8005ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fe63 	bl	8006cc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006002:	bf00      	nop
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
	...

0800600c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006022:	2b01      	cmp	r3, #1
 8006024:	d101      	bne.n	800602a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006026:	2302      	movs	r3, #2
 8006028:	e0ff      	b.n	800622a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b14      	cmp	r3, #20
 8006036:	f200 80f0 	bhi.w	800621a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800603a:	a201      	add	r2, pc, #4	@ (adr r2, 8006040 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800603c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006040:	08006095 	.word	0x08006095
 8006044:	0800621b 	.word	0x0800621b
 8006048:	0800621b 	.word	0x0800621b
 800604c:	0800621b 	.word	0x0800621b
 8006050:	080060d5 	.word	0x080060d5
 8006054:	0800621b 	.word	0x0800621b
 8006058:	0800621b 	.word	0x0800621b
 800605c:	0800621b 	.word	0x0800621b
 8006060:	08006117 	.word	0x08006117
 8006064:	0800621b 	.word	0x0800621b
 8006068:	0800621b 	.word	0x0800621b
 800606c:	0800621b 	.word	0x0800621b
 8006070:	08006157 	.word	0x08006157
 8006074:	0800621b 	.word	0x0800621b
 8006078:	0800621b 	.word	0x0800621b
 800607c:	0800621b 	.word	0x0800621b
 8006080:	08006199 	.word	0x08006199
 8006084:	0800621b 	.word	0x0800621b
 8006088:	0800621b 	.word	0x0800621b
 800608c:	0800621b 	.word	0x0800621b
 8006090:	080061d9 	.word	0x080061d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68b9      	ldr	r1, [r7, #8]
 800609a:	4618      	mov	r0, r3
 800609c:	f000 fa68 	bl	8006570 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699a      	ldr	r2, [r3, #24]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0208 	orr.w	r2, r2, #8
 80060ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	699a      	ldr	r2, [r3, #24]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0204 	bic.w	r2, r2, #4
 80060be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6999      	ldr	r1, [r3, #24]
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	691a      	ldr	r2, [r3, #16]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	619a      	str	r2, [r3, #24]
      break;
 80060d2:	e0a5      	b.n	8006220 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68b9      	ldr	r1, [r7, #8]
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 faba 	bl	8006654 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	699a      	ldr	r2, [r3, #24]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6999      	ldr	r1, [r3, #24]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	021a      	lsls	r2, r3, #8
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	619a      	str	r2, [r3, #24]
      break;
 8006114:	e084      	b.n	8006220 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68b9      	ldr	r1, [r7, #8]
 800611c:	4618      	mov	r0, r3
 800611e:	f000 fb11 	bl	8006744 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	69da      	ldr	r2, [r3, #28]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f042 0208 	orr.w	r2, r2, #8
 8006130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69da      	ldr	r2, [r3, #28]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f022 0204 	bic.w	r2, r2, #4
 8006140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69d9      	ldr	r1, [r3, #28]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	691a      	ldr	r2, [r3, #16]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	61da      	str	r2, [r3, #28]
      break;
 8006154:	e064      	b.n	8006220 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68b9      	ldr	r1, [r7, #8]
 800615c:	4618      	mov	r0, r3
 800615e:	f000 fb67 	bl	8006830 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69da      	ldr	r2, [r3, #28]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69da      	ldr	r2, [r3, #28]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69d9      	ldr	r1, [r3, #28]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	021a      	lsls	r2, r3, #8
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	61da      	str	r2, [r3, #28]
      break;
 8006196:	e043      	b.n	8006220 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 fb9e 	bl	80068e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f042 0208 	orr.w	r2, r2, #8
 80061b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0204 	bic.w	r2, r2, #4
 80061c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	691a      	ldr	r2, [r3, #16]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80061d6:	e023      	b.n	8006220 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 fbd0 	bl	8006984 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006202:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	021a      	lsls	r2, r3, #8
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006218:	e002      	b.n	8006220 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	75fb      	strb	r3, [r7, #23]
      break;
 800621e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006228:	7dfb      	ldrb	r3, [r7, #23]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3718      	adds	r7, #24
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop

08006234 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_TIM_ConfigClockSource+0x1c>
 800624c:	2302      	movs	r3, #2
 800624e:	e0b4      	b.n	80063ba <HAL_TIM_ConfigClockSource+0x186>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	4b56      	ldr	r3, [pc, #344]	@ (80063c4 <HAL_TIM_ConfigClockSource+0x190>)
 800626c:	4013      	ands	r3, r2
 800626e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006276:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006288:	d03e      	beq.n	8006308 <HAL_TIM_ConfigClockSource+0xd4>
 800628a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800628e:	f200 8087 	bhi.w	80063a0 <HAL_TIM_ConfigClockSource+0x16c>
 8006292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006296:	f000 8086 	beq.w	80063a6 <HAL_TIM_ConfigClockSource+0x172>
 800629a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800629e:	d87f      	bhi.n	80063a0 <HAL_TIM_ConfigClockSource+0x16c>
 80062a0:	2b70      	cmp	r3, #112	@ 0x70
 80062a2:	d01a      	beq.n	80062da <HAL_TIM_ConfigClockSource+0xa6>
 80062a4:	2b70      	cmp	r3, #112	@ 0x70
 80062a6:	d87b      	bhi.n	80063a0 <HAL_TIM_ConfigClockSource+0x16c>
 80062a8:	2b60      	cmp	r3, #96	@ 0x60
 80062aa:	d050      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x11a>
 80062ac:	2b60      	cmp	r3, #96	@ 0x60
 80062ae:	d877      	bhi.n	80063a0 <HAL_TIM_ConfigClockSource+0x16c>
 80062b0:	2b50      	cmp	r3, #80	@ 0x50
 80062b2:	d03c      	beq.n	800632e <HAL_TIM_ConfigClockSource+0xfa>
 80062b4:	2b50      	cmp	r3, #80	@ 0x50
 80062b6:	d873      	bhi.n	80063a0 <HAL_TIM_ConfigClockSource+0x16c>
 80062b8:	2b40      	cmp	r3, #64	@ 0x40
 80062ba:	d058      	beq.n	800636e <HAL_TIM_ConfigClockSource+0x13a>
 80062bc:	2b40      	cmp	r3, #64	@ 0x40
 80062be:	d86f      	bhi.n	80063a0 <HAL_TIM_ConfigClockSource+0x16c>
 80062c0:	2b30      	cmp	r3, #48	@ 0x30
 80062c2:	d064      	beq.n	800638e <HAL_TIM_ConfigClockSource+0x15a>
 80062c4:	2b30      	cmp	r3, #48	@ 0x30
 80062c6:	d86b      	bhi.n	80063a0 <HAL_TIM_ConfigClockSource+0x16c>
 80062c8:	2b20      	cmp	r3, #32
 80062ca:	d060      	beq.n	800638e <HAL_TIM_ConfigClockSource+0x15a>
 80062cc:	2b20      	cmp	r3, #32
 80062ce:	d867      	bhi.n	80063a0 <HAL_TIM_ConfigClockSource+0x16c>
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d05c      	beq.n	800638e <HAL_TIM_ConfigClockSource+0x15a>
 80062d4:	2b10      	cmp	r3, #16
 80062d6:	d05a      	beq.n	800638e <HAL_TIM_ConfigClockSource+0x15a>
 80062d8:	e062      	b.n	80063a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062ea:	f000 fc19 	bl	8006b20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80062fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	609a      	str	r2, [r3, #8]
      break;
 8006306:	e04f      	b.n	80063a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006318:	f000 fc02 	bl	8006b20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689a      	ldr	r2, [r3, #8]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800632a:	609a      	str	r2, [r3, #8]
      break;
 800632c:	e03c      	b.n	80063a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800633a:	461a      	mov	r2, r3
 800633c:	f000 fb76 	bl	8006a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2150      	movs	r1, #80	@ 0x50
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fbcf 	bl	8006aea <TIM_ITRx_SetConfig>
      break;
 800634c:	e02c      	b.n	80063a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800635a:	461a      	mov	r2, r3
 800635c:	f000 fb95 	bl	8006a8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2160      	movs	r1, #96	@ 0x60
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fbbf 	bl	8006aea <TIM_ITRx_SetConfig>
      break;
 800636c:	e01c      	b.n	80063a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800637a:	461a      	mov	r2, r3
 800637c:	f000 fb56 	bl	8006a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2140      	movs	r1, #64	@ 0x40
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fbaf 	bl	8006aea <TIM_ITRx_SetConfig>
      break;
 800638c:	e00c      	b.n	80063a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4619      	mov	r1, r3
 8006398:	4610      	mov	r0, r2
 800639a:	f000 fba6 	bl	8006aea <TIM_ITRx_SetConfig>
      break;
 800639e:	e003      	b.n	80063a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	73fb      	strb	r3, [r7, #15]
      break;
 80063a4:	e000      	b.n	80063a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	fffeff88 	.word	0xfffeff88

080063c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a46      	ldr	r2, [pc, #280]	@ (8006544 <TIM_Base_SetConfig+0x12c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d013      	beq.n	8006458 <TIM_Base_SetConfig+0x40>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006436:	d00f      	beq.n	8006458 <TIM_Base_SetConfig+0x40>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a43      	ldr	r2, [pc, #268]	@ (8006548 <TIM_Base_SetConfig+0x130>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d00b      	beq.n	8006458 <TIM_Base_SetConfig+0x40>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a42      	ldr	r2, [pc, #264]	@ (800654c <TIM_Base_SetConfig+0x134>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d007      	beq.n	8006458 <TIM_Base_SetConfig+0x40>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a41      	ldr	r2, [pc, #260]	@ (8006550 <TIM_Base_SetConfig+0x138>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d003      	beq.n	8006458 <TIM_Base_SetConfig+0x40>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a40      	ldr	r2, [pc, #256]	@ (8006554 <TIM_Base_SetConfig+0x13c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d108      	bne.n	800646a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800645e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a35      	ldr	r2, [pc, #212]	@ (8006544 <TIM_Base_SetConfig+0x12c>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d02b      	beq.n	80064ca <TIM_Base_SetConfig+0xb2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006478:	d027      	beq.n	80064ca <TIM_Base_SetConfig+0xb2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a32      	ldr	r2, [pc, #200]	@ (8006548 <TIM_Base_SetConfig+0x130>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d023      	beq.n	80064ca <TIM_Base_SetConfig+0xb2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a31      	ldr	r2, [pc, #196]	@ (800654c <TIM_Base_SetConfig+0x134>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d01f      	beq.n	80064ca <TIM_Base_SetConfig+0xb2>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a30      	ldr	r2, [pc, #192]	@ (8006550 <TIM_Base_SetConfig+0x138>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d01b      	beq.n	80064ca <TIM_Base_SetConfig+0xb2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a2f      	ldr	r2, [pc, #188]	@ (8006554 <TIM_Base_SetConfig+0x13c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d017      	beq.n	80064ca <TIM_Base_SetConfig+0xb2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a2e      	ldr	r2, [pc, #184]	@ (8006558 <TIM_Base_SetConfig+0x140>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d013      	beq.n	80064ca <TIM_Base_SetConfig+0xb2>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a2d      	ldr	r2, [pc, #180]	@ (800655c <TIM_Base_SetConfig+0x144>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d00f      	beq.n	80064ca <TIM_Base_SetConfig+0xb2>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a2c      	ldr	r2, [pc, #176]	@ (8006560 <TIM_Base_SetConfig+0x148>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d00b      	beq.n	80064ca <TIM_Base_SetConfig+0xb2>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a2b      	ldr	r2, [pc, #172]	@ (8006564 <TIM_Base_SetConfig+0x14c>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d007      	beq.n	80064ca <TIM_Base_SetConfig+0xb2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a2a      	ldr	r2, [pc, #168]	@ (8006568 <TIM_Base_SetConfig+0x150>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d003      	beq.n	80064ca <TIM_Base_SetConfig+0xb2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a29      	ldr	r2, [pc, #164]	@ (800656c <TIM_Base_SetConfig+0x154>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d108      	bne.n	80064dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	4313      	orrs	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a10      	ldr	r2, [pc, #64]	@ (8006544 <TIM_Base_SetConfig+0x12c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d003      	beq.n	8006510 <TIM_Base_SetConfig+0xf8>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a12      	ldr	r2, [pc, #72]	@ (8006554 <TIM_Base_SetConfig+0x13c>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d103      	bne.n	8006518 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	691a      	ldr	r2, [r3, #16]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b01      	cmp	r3, #1
 8006528:	d105      	bne.n	8006536 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f023 0201 	bic.w	r2, r3, #1
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	611a      	str	r2, [r3, #16]
  }
}
 8006536:	bf00      	nop
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	40010000 	.word	0x40010000
 8006548:	40000400 	.word	0x40000400
 800654c:	40000800 	.word	0x40000800
 8006550:	40000c00 	.word	0x40000c00
 8006554:	40010400 	.word	0x40010400
 8006558:	40014000 	.word	0x40014000
 800655c:	40014400 	.word	0x40014400
 8006560:	40014800 	.word	0x40014800
 8006564:	40001800 	.word	0x40001800
 8006568:	40001c00 	.word	0x40001c00
 800656c:	40002000 	.word	0x40002000

08006570 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	f023 0201 	bic.w	r2, r3, #1
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4b2b      	ldr	r3, [pc, #172]	@ (8006648 <TIM_OC1_SetConfig+0xd8>)
 800659c:	4013      	ands	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f023 0303 	bic.w	r3, r3, #3
 80065a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f023 0302 	bic.w	r3, r3, #2
 80065b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a21      	ldr	r2, [pc, #132]	@ (800664c <TIM_OC1_SetConfig+0xdc>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d003      	beq.n	80065d4 <TIM_OC1_SetConfig+0x64>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a20      	ldr	r2, [pc, #128]	@ (8006650 <TIM_OC1_SetConfig+0xe0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d10c      	bne.n	80065ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f023 0308 	bic.w	r3, r3, #8
 80065da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f023 0304 	bic.w	r3, r3, #4
 80065ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a16      	ldr	r2, [pc, #88]	@ (800664c <TIM_OC1_SetConfig+0xdc>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d003      	beq.n	80065fe <TIM_OC1_SetConfig+0x8e>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a15      	ldr	r2, [pc, #84]	@ (8006650 <TIM_OC1_SetConfig+0xe0>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d111      	bne.n	8006622 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800660c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	4313      	orrs	r3, r2
 8006616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	4313      	orrs	r3, r2
 8006620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	621a      	str	r2, [r3, #32]
}
 800663c:	bf00      	nop
 800663e:	371c      	adds	r7, #28
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	fffeff8f 	.word	0xfffeff8f
 800664c:	40010000 	.word	0x40010000
 8006650:	40010400 	.word	0x40010400

08006654 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	f023 0210 	bic.w	r2, r3, #16
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4b2e      	ldr	r3, [pc, #184]	@ (8006738 <TIM_OC2_SetConfig+0xe4>)
 8006680:	4013      	ands	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800668a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	021b      	lsls	r3, r3, #8
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	4313      	orrs	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f023 0320 	bic.w	r3, r3, #32
 800669e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	011b      	lsls	r3, r3, #4
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a23      	ldr	r2, [pc, #140]	@ (800673c <TIM_OC2_SetConfig+0xe8>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d003      	beq.n	80066bc <TIM_OC2_SetConfig+0x68>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a22      	ldr	r2, [pc, #136]	@ (8006740 <TIM_OC2_SetConfig+0xec>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d10d      	bne.n	80066d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a18      	ldr	r2, [pc, #96]	@ (800673c <TIM_OC2_SetConfig+0xe8>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d003      	beq.n	80066e8 <TIM_OC2_SetConfig+0x94>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a17      	ldr	r2, [pc, #92]	@ (8006740 <TIM_OC2_SetConfig+0xec>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d113      	bne.n	8006710 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	4313      	orrs	r3, r2
 8006702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	4313      	orrs	r3, r2
 800670e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	621a      	str	r2, [r3, #32]
}
 800672a:	bf00      	nop
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	feff8fff 	.word	0xfeff8fff
 800673c:	40010000 	.word	0x40010000
 8006740:	40010400 	.word	0x40010400

08006744 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	4b2d      	ldr	r3, [pc, #180]	@ (8006824 <TIM_OC3_SetConfig+0xe0>)
 8006770:	4013      	ands	r3, r2
 8006772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f023 0303 	bic.w	r3, r3, #3
 800677a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4313      	orrs	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800678c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	021b      	lsls	r3, r3, #8
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a22      	ldr	r2, [pc, #136]	@ (8006828 <TIM_OC3_SetConfig+0xe4>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d003      	beq.n	80067aa <TIM_OC3_SetConfig+0x66>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a21      	ldr	r2, [pc, #132]	@ (800682c <TIM_OC3_SetConfig+0xe8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d10d      	bne.n	80067c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	021b      	lsls	r3, r3, #8
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a17      	ldr	r2, [pc, #92]	@ (8006828 <TIM_OC3_SetConfig+0xe4>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d003      	beq.n	80067d6 <TIM_OC3_SetConfig+0x92>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a16      	ldr	r2, [pc, #88]	@ (800682c <TIM_OC3_SetConfig+0xe8>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d113      	bne.n	80067fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	011b      	lsls	r3, r3, #4
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	621a      	str	r2, [r3, #32]
}
 8006818:	bf00      	nop
 800681a:	371c      	adds	r7, #28
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	fffeff8f 	.word	0xfffeff8f
 8006828:	40010000 	.word	0x40010000
 800682c:	40010400 	.word	0x40010400

08006830 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	4b1e      	ldr	r3, [pc, #120]	@ (80068d4 <TIM_OC4_SetConfig+0xa4>)
 800685c:	4013      	ands	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	021b      	lsls	r3, r3, #8
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800687a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	031b      	lsls	r3, r3, #12
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	4313      	orrs	r3, r2
 8006886:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a13      	ldr	r2, [pc, #76]	@ (80068d8 <TIM_OC4_SetConfig+0xa8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d003      	beq.n	8006898 <TIM_OC4_SetConfig+0x68>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a12      	ldr	r2, [pc, #72]	@ (80068dc <TIM_OC4_SetConfig+0xac>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d109      	bne.n	80068ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800689e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	019b      	lsls	r3, r3, #6
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	621a      	str	r2, [r3, #32]
}
 80068c6:	bf00      	nop
 80068c8:	371c      	adds	r7, #28
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	feff8fff 	.word	0xfeff8fff
 80068d8:	40010000 	.word	0x40010000
 80068dc:	40010400 	.word	0x40010400

080068e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	4b1b      	ldr	r3, [pc, #108]	@ (8006978 <TIM_OC5_SetConfig+0x98>)
 800690c:	4013      	ands	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006920:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	041b      	lsls	r3, r3, #16
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	4313      	orrs	r3, r2
 800692c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a12      	ldr	r2, [pc, #72]	@ (800697c <TIM_OC5_SetConfig+0x9c>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d003      	beq.n	800693e <TIM_OC5_SetConfig+0x5e>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a11      	ldr	r2, [pc, #68]	@ (8006980 <TIM_OC5_SetConfig+0xa0>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d109      	bne.n	8006952 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006944:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	021b      	lsls	r3, r3, #8
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	4313      	orrs	r3, r2
 8006950:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	621a      	str	r2, [r3, #32]
}
 800696c:	bf00      	nop
 800696e:	371c      	adds	r7, #28
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	fffeff8f 	.word	0xfffeff8f
 800697c:	40010000 	.word	0x40010000
 8006980:	40010400 	.word	0x40010400

08006984 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4b1c      	ldr	r3, [pc, #112]	@ (8006a20 <TIM_OC6_SetConfig+0x9c>)
 80069b0:	4013      	ands	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	021b      	lsls	r3, r3, #8
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	4313      	orrs	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	051b      	lsls	r3, r3, #20
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a13      	ldr	r2, [pc, #76]	@ (8006a24 <TIM_OC6_SetConfig+0xa0>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d003      	beq.n	80069e4 <TIM_OC6_SetConfig+0x60>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a12      	ldr	r2, [pc, #72]	@ (8006a28 <TIM_OC6_SetConfig+0xa4>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d109      	bne.n	80069f8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	029b      	lsls	r3, r3, #10
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	621a      	str	r2, [r3, #32]
}
 8006a12:	bf00      	nop
 8006a14:	371c      	adds	r7, #28
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	feff8fff 	.word	0xfeff8fff
 8006a24:	40010000 	.word	0x40010000
 8006a28:	40010400 	.word	0x40010400

08006a2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	f023 0201 	bic.w	r2, r3, #1
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f023 030a 	bic.w	r3, r3, #10
 8006a68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	621a      	str	r2, [r3, #32]
}
 8006a7e:	bf00      	nop
 8006a80:	371c      	adds	r7, #28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b087      	sub	sp, #28
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	60f8      	str	r0, [r7, #12]
 8006a92:	60b9      	str	r1, [r7, #8]
 8006a94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	f023 0210 	bic.w	r2, r3, #16
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ab4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	031b      	lsls	r3, r3, #12
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ac6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	011b      	lsls	r3, r3, #4
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	621a      	str	r2, [r3, #32]
}
 8006ade:	bf00      	nop
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b085      	sub	sp, #20
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	f043 0307 	orr.w	r3, r3, #7
 8006b0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	609a      	str	r2, [r3, #8]
}
 8006b14:	bf00      	nop
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	021a      	lsls	r2, r3, #8
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	431a      	orrs	r2, r3
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	609a      	str	r2, [r3, #8]
}
 8006b54:	bf00      	nop
 8006b56:	371c      	adds	r7, #28
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	f003 031f 	and.w	r3, r3, #31
 8006b72:	2201      	movs	r2, #1
 8006b74:	fa02 f303 	lsl.w	r3, r2, r3
 8006b78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a1a      	ldr	r2, [r3, #32]
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	43db      	mvns	r3, r3
 8006b82:	401a      	ands	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a1a      	ldr	r2, [r3, #32]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f003 031f 	and.w	r3, r3, #31
 8006b92:	6879      	ldr	r1, [r7, #4]
 8006b94:	fa01 f303 	lsl.w	r3, r1, r3
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	621a      	str	r2, [r3, #32]
}
 8006b9e:	bf00      	nop
 8006ba0:	371c      	adds	r7, #28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
	...

08006bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d101      	bne.n	8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	e06d      	b.n	8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a30      	ldr	r2, [pc, #192]	@ (8006cac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d004      	beq.n	8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a2f      	ldr	r2, [pc, #188]	@ (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d108      	bne.n	8006c0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006bfe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a20      	ldr	r2, [pc, #128]	@ (8006cac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d022      	beq.n	8006c74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c36:	d01d      	beq.n	8006c74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d018      	beq.n	8006c74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a1c      	ldr	r2, [pc, #112]	@ (8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d013      	beq.n	8006c74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a1a      	ldr	r2, [pc, #104]	@ (8006cbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d00e      	beq.n	8006c74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a15      	ldr	r2, [pc, #84]	@ (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d009      	beq.n	8006c74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a16      	ldr	r2, [pc, #88]	@ (8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d004      	beq.n	8006c74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a15      	ldr	r2, [pc, #84]	@ (8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d10c      	bne.n	8006c8e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	40010000 	.word	0x40010000
 8006cb0:	40010400 	.word	0x40010400
 8006cb4:	40000400 	.word	0x40000400
 8006cb8:	40000800 	.word	0x40000800
 8006cbc:	40000c00 	.word	0x40000c00
 8006cc0:	40014000 	.word	0x40014000
 8006cc4:	40001800 	.word	0x40001800

08006cc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e040      	b.n	8006d98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d106      	bne.n	8006d2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7fb fb7e 	bl	8002428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2224      	movs	r2, #36	@ 0x24
 8006d30:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f022 0201 	bic.w	r2, r2, #1
 8006d40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d002      	beq.n	8006d50 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fe4c 	bl	80079e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fbe5 	bl	8007520 <UART_SetConfig>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d101      	bne.n	8006d60 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e01b      	b.n	8006d98 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689a      	ldr	r2, [r3, #8]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f042 0201 	orr.w	r2, r2, #1
 8006d8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fecb 	bl	8007b2c <UART_CheckIdleState>
 8006d96:	4603      	mov	r3, r0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b08a      	sub	sp, #40	@ 0x28
 8006da4:	af02      	add	r7, sp, #8
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	603b      	str	r3, [r7, #0]
 8006dac:	4613      	mov	r3, r2
 8006dae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006db4:	2b20      	cmp	r3, #32
 8006db6:	d177      	bne.n	8006ea8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d002      	beq.n	8006dc4 <HAL_UART_Transmit+0x24>
 8006dbe:	88fb      	ldrh	r3, [r7, #6]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e070      	b.n	8006eaa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2221      	movs	r2, #33	@ 0x21
 8006dd4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dd6:	f7fb fcf3 	bl	80027c0 <HAL_GetTick>
 8006dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	88fa      	ldrh	r2, [r7, #6]
 8006de0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	88fa      	ldrh	r2, [r7, #6]
 8006de8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006df4:	d108      	bne.n	8006e08 <HAL_UART_Transmit+0x68>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d104      	bne.n	8006e08 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	61bb      	str	r3, [r7, #24]
 8006e06:	e003      	b.n	8006e10 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e10:	e02f      	b.n	8006e72 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2180      	movs	r1, #128	@ 0x80
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 fedc 	bl	8007bda <UART_WaitOnFlagUntilTimeout>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d004      	beq.n	8006e32 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e03b      	b.n	8006eaa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10b      	bne.n	8006e50 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e46:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	3302      	adds	r3, #2
 8006e4c:	61bb      	str	r3, [r7, #24]
 8006e4e:	e007      	b.n	8006e60 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	781a      	ldrb	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1c9      	bne.n	8006e12 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2200      	movs	r2, #0
 8006e86:	2140      	movs	r1, #64	@ 0x40
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 fea6 	bl	8007bda <UART_WaitOnFlagUntilTimeout>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d004      	beq.n	8006e9e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2220      	movs	r2, #32
 8006e98:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e005      	b.n	8006eaa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	e000      	b.n	8006eaa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006ea8:	2302      	movs	r3, #2
  }
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3720      	adds	r7, #32
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b08a      	sub	sp, #40	@ 0x28
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	d132      	bne.n	8006f30 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <HAL_UART_Receive_IT+0x24>
 8006ed0:	88fb      	ldrh	r3, [r7, #6]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e02b      	b.n	8006f32 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d018      	beq.n	8006f20 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	e853 3f00 	ldrex	r3, [r3]
 8006efa:	613b      	str	r3, [r7, #16]
   return(result);
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f02:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0c:	623b      	str	r3, [r7, #32]
 8006f0e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f10:	69f9      	ldr	r1, [r7, #28]
 8006f12:	6a3a      	ldr	r2, [r7, #32]
 8006f14:	e841 2300 	strex	r3, r2, [r1]
 8006f18:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1e6      	bne.n	8006eee <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f20:	88fb      	ldrh	r3, [r7, #6]
 8006f22:	461a      	mov	r2, r3
 8006f24:	68b9      	ldr	r1, [r7, #8]
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f000 fec4 	bl	8007cb4 <UART_Start_Receive_IT>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	e000      	b.n	8006f32 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006f30:	2302      	movs	r3, #2
  }
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3728      	adds	r7, #40	@ 0x28
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b0ba      	sub	sp, #232	@ 0xe8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006f66:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006f70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d115      	bne.n	8006fa4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f7c:	f003 0320 	and.w	r3, r3, #32
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00f      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f88:	f003 0320 	and.w	r3, r3, #32
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d009      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 8297 	beq.w	80074c8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	4798      	blx	r3
      }
      return;
 8006fa2:	e291      	b.n	80074c8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006fa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 8117 	beq.w	80071dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d106      	bne.n	8006fc8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006fba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006fbe:	4b85      	ldr	r3, [pc, #532]	@ (80071d4 <HAL_UART_IRQHandler+0x298>)
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 810a 	beq.w	80071dc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d011      	beq.n	8006ff8 <HAL_UART_IRQHandler+0xbc>
 8006fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00b      	beq.n	8006ff8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fee:	f043 0201 	orr.w	r2, r3, #1
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b00      	cmp	r3, #0
 8007002:	d011      	beq.n	8007028 <HAL_UART_IRQHandler+0xec>
 8007004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00b      	beq.n	8007028 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2202      	movs	r2, #2
 8007016:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800701e:	f043 0204 	orr.w	r2, r3, #4
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800702c:	f003 0304 	and.w	r3, r3, #4
 8007030:	2b00      	cmp	r3, #0
 8007032:	d011      	beq.n	8007058 <HAL_UART_IRQHandler+0x11c>
 8007034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00b      	beq.n	8007058 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2204      	movs	r2, #4
 8007046:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800704e:	f043 0202 	orr.w	r2, r3, #2
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800705c:	f003 0308 	and.w	r3, r3, #8
 8007060:	2b00      	cmp	r3, #0
 8007062:	d017      	beq.n	8007094 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007068:	f003 0320 	and.w	r3, r3, #32
 800706c:	2b00      	cmp	r3, #0
 800706e:	d105      	bne.n	800707c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007074:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00b      	beq.n	8007094 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2208      	movs	r2, #8
 8007082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800708a:	f043 0208 	orr.w	r2, r3, #8
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007098:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800709c:	2b00      	cmp	r3, #0
 800709e:	d012      	beq.n	80070c6 <HAL_UART_IRQHandler+0x18a>
 80070a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00c      	beq.n	80070c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070bc:	f043 0220 	orr.w	r2, r3, #32
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 81fd 	beq.w	80074cc <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80070d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070d6:	f003 0320 	and.w	r3, r3, #32
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00d      	beq.n	80070fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070e2:	f003 0320 	and.w	r3, r3, #32
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d007      	beq.n	80070fa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007100:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800710e:	2b40      	cmp	r3, #64	@ 0x40
 8007110:	d005      	beq.n	800711e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007112:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007116:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800711a:	2b00      	cmp	r3, #0
 800711c:	d04f      	beq.n	80071be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fe8e 	bl	8007e40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800712e:	2b40      	cmp	r3, #64	@ 0x40
 8007130:	d141      	bne.n	80071b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3308      	adds	r3, #8
 8007138:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007140:	e853 3f00 	ldrex	r3, [r3]
 8007144:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007148:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800714c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007150:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3308      	adds	r3, #8
 800715a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800715e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007162:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007166:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800716a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800716e:	e841 2300 	strex	r3, r2, [r1]
 8007172:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007176:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1d9      	bne.n	8007132 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007182:	2b00      	cmp	r3, #0
 8007184:	d013      	beq.n	80071ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800718a:	4a13      	ldr	r2, [pc, #76]	@ (80071d8 <HAL_UART_IRQHandler+0x29c>)
 800718c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007192:	4618      	mov	r0, r3
 8007194:	f7fb fcc5 	bl	8002b22 <HAL_DMA_Abort_IT>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d017      	beq.n	80071ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80071a8:	4610      	mov	r0, r2
 80071aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ac:	e00f      	b.n	80071ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f9a0 	bl	80074f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071b4:	e00b      	b.n	80071ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f99c 	bl	80074f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071bc:	e007      	b.n	80071ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f998 	bl	80074f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80071cc:	e17e      	b.n	80074cc <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ce:	bf00      	nop
    return;
 80071d0:	e17c      	b.n	80074cc <HAL_UART_IRQHandler+0x590>
 80071d2:	bf00      	nop
 80071d4:	04000120 	.word	0x04000120
 80071d8:	08007f09 	.word	0x08007f09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	f040 814c 	bne.w	800747e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80071e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071ea:	f003 0310 	and.w	r3, r3, #16
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 8145 	beq.w	800747e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80071f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071f8:	f003 0310 	and.w	r3, r3, #16
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 813e 	beq.w	800747e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2210      	movs	r2, #16
 8007208:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007214:	2b40      	cmp	r3, #64	@ 0x40
 8007216:	f040 80b6 	bne.w	8007386 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007226:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 8150 	beq.w	80074d0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007236:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800723a:	429a      	cmp	r2, r3
 800723c:	f080 8148 	bcs.w	80074d0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007246:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007254:	f000 8086 	beq.w	8007364 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007260:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007264:	e853 3f00 	ldrex	r3, [r3]
 8007268:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800726c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007270:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007274:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	461a      	mov	r2, r3
 800727e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007282:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007286:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800728e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007292:	e841 2300 	strex	r3, r2, [r1]
 8007296:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800729a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1da      	bne.n	8007258 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3308      	adds	r3, #8
 80072a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072ac:	e853 3f00 	ldrex	r3, [r3]
 80072b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80072b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072b4:	f023 0301 	bic.w	r3, r3, #1
 80072b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3308      	adds	r3, #8
 80072c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80072c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80072ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80072ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80072d2:	e841 2300 	strex	r3, r2, [r1]
 80072d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80072d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1e1      	bne.n	80072a2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3308      	adds	r3, #8
 80072e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072e8:	e853 3f00 	ldrex	r3, [r3]
 80072ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80072ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3308      	adds	r3, #8
 80072fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007302:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007304:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007306:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007308:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800730a:	e841 2300 	strex	r3, r2, [r1]
 800730e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007310:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1e3      	bne.n	80072de <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2220      	movs	r2, #32
 800731a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800732c:	e853 3f00 	ldrex	r3, [r3]
 8007330:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007334:	f023 0310 	bic.w	r3, r3, #16
 8007338:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	461a      	mov	r2, r3
 8007342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007346:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007348:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800734c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800734e:	e841 2300 	strex	r3, r2, [r1]
 8007352:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007354:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1e4      	bne.n	8007324 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800735e:	4618      	mov	r0, r3
 8007360:	f7fb fb6f 	bl	8002a42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007376:	b29b      	uxth	r3, r3
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	b29b      	uxth	r3, r3
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f8c2 	bl	8007508 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007384:	e0a4      	b.n	80074d0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007392:	b29b      	uxth	r3, r3
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f000 8096 	beq.w	80074d4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80073a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 8091 	beq.w	80074d4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ba:	e853 3f00 	ldrex	r3, [r3]
 80073be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80073d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80073d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073dc:	e841 2300 	strex	r3, r2, [r1]
 80073e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e4      	bne.n	80073b2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3308      	adds	r3, #8
 80073ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f2:	e853 3f00 	ldrex	r3, [r3]
 80073f6:	623b      	str	r3, [r7, #32]
   return(result);
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	f023 0301 	bic.w	r3, r3, #1
 80073fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3308      	adds	r3, #8
 8007408:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800740c:	633a      	str	r2, [r7, #48]	@ 0x30
 800740e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007414:	e841 2300 	strex	r3, r2, [r1]
 8007418:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800741a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e3      	bne.n	80073e8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2220      	movs	r2, #32
 8007424:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	60fb      	str	r3, [r7, #12]
   return(result);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f023 0310 	bic.w	r3, r3, #16
 8007448:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	461a      	mov	r2, r3
 8007452:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007456:	61fb      	str	r3, [r7, #28]
 8007458:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	69b9      	ldr	r1, [r7, #24]
 800745c:	69fa      	ldr	r2, [r7, #28]
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	617b      	str	r3, [r7, #20]
   return(result);
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e4      	bne.n	8007434 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2202      	movs	r2, #2
 800746e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007470:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007474:	4619      	mov	r1, r3
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f846 	bl	8007508 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800747c:	e02a      	b.n	80074d4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800747e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00e      	beq.n	80074a8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800748a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800748e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007492:	2b00      	cmp	r3, #0
 8007494:	d008      	beq.n	80074a8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800749a:	2b00      	cmp	r3, #0
 800749c:	d01c      	beq.n	80074d8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	4798      	blx	r3
    }
    return;
 80074a6:	e017      	b.n	80074d8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80074a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d012      	beq.n	80074da <HAL_UART_IRQHandler+0x59e>
 80074b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00c      	beq.n	80074da <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fd37 	bl	8007f34 <UART_EndTransmit_IT>
    return;
 80074c6:	e008      	b.n	80074da <HAL_UART_IRQHandler+0x59e>
      return;
 80074c8:	bf00      	nop
 80074ca:	e006      	b.n	80074da <HAL_UART_IRQHandler+0x59e>
    return;
 80074cc:	bf00      	nop
 80074ce:	e004      	b.n	80074da <HAL_UART_IRQHandler+0x59e>
      return;
 80074d0:	bf00      	nop
 80074d2:	e002      	b.n	80074da <HAL_UART_IRQHandler+0x59e>
      return;
 80074d4:	bf00      	nop
 80074d6:	e000      	b.n	80074da <HAL_UART_IRQHandler+0x59e>
    return;
 80074d8:	bf00      	nop
  }

}
 80074da:	37e8      	adds	r7, #232	@ 0xe8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007528:	2300      	movs	r3, #0
 800752a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	689a      	ldr	r2, [r3, #8]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	431a      	orrs	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	69db      	ldr	r3, [r3, #28]
 8007540:	4313      	orrs	r3, r2
 8007542:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	4ba6      	ldr	r3, [pc, #664]	@ (80077e4 <UART_SetConfig+0x2c4>)
 800754c:	4013      	ands	r3, r2
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	6812      	ldr	r2, [r2, #0]
 8007552:	6979      	ldr	r1, [r7, #20]
 8007554:	430b      	orrs	r3, r1
 8007556:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68da      	ldr	r2, [r3, #12]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	430a      	orrs	r2, r1
 800756c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a1b      	ldr	r3, [r3, #32]
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	4313      	orrs	r3, r2
 800757c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	430a      	orrs	r2, r1
 8007590:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a94      	ldr	r2, [pc, #592]	@ (80077e8 <UART_SetConfig+0x2c8>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d120      	bne.n	80075de <UART_SetConfig+0xbe>
 800759c:	4b93      	ldr	r3, [pc, #588]	@ (80077ec <UART_SetConfig+0x2cc>)
 800759e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075a2:	f003 0303 	and.w	r3, r3, #3
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	d816      	bhi.n	80075d8 <UART_SetConfig+0xb8>
 80075aa:	a201      	add	r2, pc, #4	@ (adr r2, 80075b0 <UART_SetConfig+0x90>)
 80075ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b0:	080075c1 	.word	0x080075c1
 80075b4:	080075cd 	.word	0x080075cd
 80075b8:	080075c7 	.word	0x080075c7
 80075bc:	080075d3 	.word	0x080075d3
 80075c0:	2301      	movs	r3, #1
 80075c2:	77fb      	strb	r3, [r7, #31]
 80075c4:	e150      	b.n	8007868 <UART_SetConfig+0x348>
 80075c6:	2302      	movs	r3, #2
 80075c8:	77fb      	strb	r3, [r7, #31]
 80075ca:	e14d      	b.n	8007868 <UART_SetConfig+0x348>
 80075cc:	2304      	movs	r3, #4
 80075ce:	77fb      	strb	r3, [r7, #31]
 80075d0:	e14a      	b.n	8007868 <UART_SetConfig+0x348>
 80075d2:	2308      	movs	r3, #8
 80075d4:	77fb      	strb	r3, [r7, #31]
 80075d6:	e147      	b.n	8007868 <UART_SetConfig+0x348>
 80075d8:	2310      	movs	r3, #16
 80075da:	77fb      	strb	r3, [r7, #31]
 80075dc:	e144      	b.n	8007868 <UART_SetConfig+0x348>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a83      	ldr	r2, [pc, #524]	@ (80077f0 <UART_SetConfig+0x2d0>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d132      	bne.n	800764e <UART_SetConfig+0x12e>
 80075e8:	4b80      	ldr	r3, [pc, #512]	@ (80077ec <UART_SetConfig+0x2cc>)
 80075ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ee:	f003 030c 	and.w	r3, r3, #12
 80075f2:	2b0c      	cmp	r3, #12
 80075f4:	d828      	bhi.n	8007648 <UART_SetConfig+0x128>
 80075f6:	a201      	add	r2, pc, #4	@ (adr r2, 80075fc <UART_SetConfig+0xdc>)
 80075f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fc:	08007631 	.word	0x08007631
 8007600:	08007649 	.word	0x08007649
 8007604:	08007649 	.word	0x08007649
 8007608:	08007649 	.word	0x08007649
 800760c:	0800763d 	.word	0x0800763d
 8007610:	08007649 	.word	0x08007649
 8007614:	08007649 	.word	0x08007649
 8007618:	08007649 	.word	0x08007649
 800761c:	08007637 	.word	0x08007637
 8007620:	08007649 	.word	0x08007649
 8007624:	08007649 	.word	0x08007649
 8007628:	08007649 	.word	0x08007649
 800762c:	08007643 	.word	0x08007643
 8007630:	2300      	movs	r3, #0
 8007632:	77fb      	strb	r3, [r7, #31]
 8007634:	e118      	b.n	8007868 <UART_SetConfig+0x348>
 8007636:	2302      	movs	r3, #2
 8007638:	77fb      	strb	r3, [r7, #31]
 800763a:	e115      	b.n	8007868 <UART_SetConfig+0x348>
 800763c:	2304      	movs	r3, #4
 800763e:	77fb      	strb	r3, [r7, #31]
 8007640:	e112      	b.n	8007868 <UART_SetConfig+0x348>
 8007642:	2308      	movs	r3, #8
 8007644:	77fb      	strb	r3, [r7, #31]
 8007646:	e10f      	b.n	8007868 <UART_SetConfig+0x348>
 8007648:	2310      	movs	r3, #16
 800764a:	77fb      	strb	r3, [r7, #31]
 800764c:	e10c      	b.n	8007868 <UART_SetConfig+0x348>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a68      	ldr	r2, [pc, #416]	@ (80077f4 <UART_SetConfig+0x2d4>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d120      	bne.n	800769a <UART_SetConfig+0x17a>
 8007658:	4b64      	ldr	r3, [pc, #400]	@ (80077ec <UART_SetConfig+0x2cc>)
 800765a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800765e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007662:	2b30      	cmp	r3, #48	@ 0x30
 8007664:	d013      	beq.n	800768e <UART_SetConfig+0x16e>
 8007666:	2b30      	cmp	r3, #48	@ 0x30
 8007668:	d814      	bhi.n	8007694 <UART_SetConfig+0x174>
 800766a:	2b20      	cmp	r3, #32
 800766c:	d009      	beq.n	8007682 <UART_SetConfig+0x162>
 800766e:	2b20      	cmp	r3, #32
 8007670:	d810      	bhi.n	8007694 <UART_SetConfig+0x174>
 8007672:	2b00      	cmp	r3, #0
 8007674:	d002      	beq.n	800767c <UART_SetConfig+0x15c>
 8007676:	2b10      	cmp	r3, #16
 8007678:	d006      	beq.n	8007688 <UART_SetConfig+0x168>
 800767a:	e00b      	b.n	8007694 <UART_SetConfig+0x174>
 800767c:	2300      	movs	r3, #0
 800767e:	77fb      	strb	r3, [r7, #31]
 8007680:	e0f2      	b.n	8007868 <UART_SetConfig+0x348>
 8007682:	2302      	movs	r3, #2
 8007684:	77fb      	strb	r3, [r7, #31]
 8007686:	e0ef      	b.n	8007868 <UART_SetConfig+0x348>
 8007688:	2304      	movs	r3, #4
 800768a:	77fb      	strb	r3, [r7, #31]
 800768c:	e0ec      	b.n	8007868 <UART_SetConfig+0x348>
 800768e:	2308      	movs	r3, #8
 8007690:	77fb      	strb	r3, [r7, #31]
 8007692:	e0e9      	b.n	8007868 <UART_SetConfig+0x348>
 8007694:	2310      	movs	r3, #16
 8007696:	77fb      	strb	r3, [r7, #31]
 8007698:	e0e6      	b.n	8007868 <UART_SetConfig+0x348>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a56      	ldr	r2, [pc, #344]	@ (80077f8 <UART_SetConfig+0x2d8>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d120      	bne.n	80076e6 <UART_SetConfig+0x1c6>
 80076a4:	4b51      	ldr	r3, [pc, #324]	@ (80077ec <UART_SetConfig+0x2cc>)
 80076a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80076ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80076b0:	d013      	beq.n	80076da <UART_SetConfig+0x1ba>
 80076b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80076b4:	d814      	bhi.n	80076e0 <UART_SetConfig+0x1c0>
 80076b6:	2b80      	cmp	r3, #128	@ 0x80
 80076b8:	d009      	beq.n	80076ce <UART_SetConfig+0x1ae>
 80076ba:	2b80      	cmp	r3, #128	@ 0x80
 80076bc:	d810      	bhi.n	80076e0 <UART_SetConfig+0x1c0>
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d002      	beq.n	80076c8 <UART_SetConfig+0x1a8>
 80076c2:	2b40      	cmp	r3, #64	@ 0x40
 80076c4:	d006      	beq.n	80076d4 <UART_SetConfig+0x1b4>
 80076c6:	e00b      	b.n	80076e0 <UART_SetConfig+0x1c0>
 80076c8:	2300      	movs	r3, #0
 80076ca:	77fb      	strb	r3, [r7, #31]
 80076cc:	e0cc      	b.n	8007868 <UART_SetConfig+0x348>
 80076ce:	2302      	movs	r3, #2
 80076d0:	77fb      	strb	r3, [r7, #31]
 80076d2:	e0c9      	b.n	8007868 <UART_SetConfig+0x348>
 80076d4:	2304      	movs	r3, #4
 80076d6:	77fb      	strb	r3, [r7, #31]
 80076d8:	e0c6      	b.n	8007868 <UART_SetConfig+0x348>
 80076da:	2308      	movs	r3, #8
 80076dc:	77fb      	strb	r3, [r7, #31]
 80076de:	e0c3      	b.n	8007868 <UART_SetConfig+0x348>
 80076e0:	2310      	movs	r3, #16
 80076e2:	77fb      	strb	r3, [r7, #31]
 80076e4:	e0c0      	b.n	8007868 <UART_SetConfig+0x348>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a44      	ldr	r2, [pc, #272]	@ (80077fc <UART_SetConfig+0x2dc>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d125      	bne.n	800773c <UART_SetConfig+0x21c>
 80076f0:	4b3e      	ldr	r3, [pc, #248]	@ (80077ec <UART_SetConfig+0x2cc>)
 80076f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076fe:	d017      	beq.n	8007730 <UART_SetConfig+0x210>
 8007700:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007704:	d817      	bhi.n	8007736 <UART_SetConfig+0x216>
 8007706:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800770a:	d00b      	beq.n	8007724 <UART_SetConfig+0x204>
 800770c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007710:	d811      	bhi.n	8007736 <UART_SetConfig+0x216>
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <UART_SetConfig+0x1fe>
 8007716:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800771a:	d006      	beq.n	800772a <UART_SetConfig+0x20a>
 800771c:	e00b      	b.n	8007736 <UART_SetConfig+0x216>
 800771e:	2300      	movs	r3, #0
 8007720:	77fb      	strb	r3, [r7, #31]
 8007722:	e0a1      	b.n	8007868 <UART_SetConfig+0x348>
 8007724:	2302      	movs	r3, #2
 8007726:	77fb      	strb	r3, [r7, #31]
 8007728:	e09e      	b.n	8007868 <UART_SetConfig+0x348>
 800772a:	2304      	movs	r3, #4
 800772c:	77fb      	strb	r3, [r7, #31]
 800772e:	e09b      	b.n	8007868 <UART_SetConfig+0x348>
 8007730:	2308      	movs	r3, #8
 8007732:	77fb      	strb	r3, [r7, #31]
 8007734:	e098      	b.n	8007868 <UART_SetConfig+0x348>
 8007736:	2310      	movs	r3, #16
 8007738:	77fb      	strb	r3, [r7, #31]
 800773a:	e095      	b.n	8007868 <UART_SetConfig+0x348>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a2f      	ldr	r2, [pc, #188]	@ (8007800 <UART_SetConfig+0x2e0>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d125      	bne.n	8007792 <UART_SetConfig+0x272>
 8007746:	4b29      	ldr	r3, [pc, #164]	@ (80077ec <UART_SetConfig+0x2cc>)
 8007748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800774c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007750:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007754:	d017      	beq.n	8007786 <UART_SetConfig+0x266>
 8007756:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800775a:	d817      	bhi.n	800778c <UART_SetConfig+0x26c>
 800775c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007760:	d00b      	beq.n	800777a <UART_SetConfig+0x25a>
 8007762:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007766:	d811      	bhi.n	800778c <UART_SetConfig+0x26c>
 8007768:	2b00      	cmp	r3, #0
 800776a:	d003      	beq.n	8007774 <UART_SetConfig+0x254>
 800776c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007770:	d006      	beq.n	8007780 <UART_SetConfig+0x260>
 8007772:	e00b      	b.n	800778c <UART_SetConfig+0x26c>
 8007774:	2301      	movs	r3, #1
 8007776:	77fb      	strb	r3, [r7, #31]
 8007778:	e076      	b.n	8007868 <UART_SetConfig+0x348>
 800777a:	2302      	movs	r3, #2
 800777c:	77fb      	strb	r3, [r7, #31]
 800777e:	e073      	b.n	8007868 <UART_SetConfig+0x348>
 8007780:	2304      	movs	r3, #4
 8007782:	77fb      	strb	r3, [r7, #31]
 8007784:	e070      	b.n	8007868 <UART_SetConfig+0x348>
 8007786:	2308      	movs	r3, #8
 8007788:	77fb      	strb	r3, [r7, #31]
 800778a:	e06d      	b.n	8007868 <UART_SetConfig+0x348>
 800778c:	2310      	movs	r3, #16
 800778e:	77fb      	strb	r3, [r7, #31]
 8007790:	e06a      	b.n	8007868 <UART_SetConfig+0x348>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a1b      	ldr	r2, [pc, #108]	@ (8007804 <UART_SetConfig+0x2e4>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d138      	bne.n	800780e <UART_SetConfig+0x2ee>
 800779c:	4b13      	ldr	r3, [pc, #76]	@ (80077ec <UART_SetConfig+0x2cc>)
 800779e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077a2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80077a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077aa:	d017      	beq.n	80077dc <UART_SetConfig+0x2bc>
 80077ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077b0:	d82a      	bhi.n	8007808 <UART_SetConfig+0x2e8>
 80077b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077b6:	d00b      	beq.n	80077d0 <UART_SetConfig+0x2b0>
 80077b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077bc:	d824      	bhi.n	8007808 <UART_SetConfig+0x2e8>
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d003      	beq.n	80077ca <UART_SetConfig+0x2aa>
 80077c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077c6:	d006      	beq.n	80077d6 <UART_SetConfig+0x2b6>
 80077c8:	e01e      	b.n	8007808 <UART_SetConfig+0x2e8>
 80077ca:	2300      	movs	r3, #0
 80077cc:	77fb      	strb	r3, [r7, #31]
 80077ce:	e04b      	b.n	8007868 <UART_SetConfig+0x348>
 80077d0:	2302      	movs	r3, #2
 80077d2:	77fb      	strb	r3, [r7, #31]
 80077d4:	e048      	b.n	8007868 <UART_SetConfig+0x348>
 80077d6:	2304      	movs	r3, #4
 80077d8:	77fb      	strb	r3, [r7, #31]
 80077da:	e045      	b.n	8007868 <UART_SetConfig+0x348>
 80077dc:	2308      	movs	r3, #8
 80077de:	77fb      	strb	r3, [r7, #31]
 80077e0:	e042      	b.n	8007868 <UART_SetConfig+0x348>
 80077e2:	bf00      	nop
 80077e4:	efff69f3 	.word	0xefff69f3
 80077e8:	40011000 	.word	0x40011000
 80077ec:	40023800 	.word	0x40023800
 80077f0:	40004400 	.word	0x40004400
 80077f4:	40004800 	.word	0x40004800
 80077f8:	40004c00 	.word	0x40004c00
 80077fc:	40005000 	.word	0x40005000
 8007800:	40011400 	.word	0x40011400
 8007804:	40007800 	.word	0x40007800
 8007808:	2310      	movs	r3, #16
 800780a:	77fb      	strb	r3, [r7, #31]
 800780c:	e02c      	b.n	8007868 <UART_SetConfig+0x348>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a72      	ldr	r2, [pc, #456]	@ (80079dc <UART_SetConfig+0x4bc>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d125      	bne.n	8007864 <UART_SetConfig+0x344>
 8007818:	4b71      	ldr	r3, [pc, #452]	@ (80079e0 <UART_SetConfig+0x4c0>)
 800781a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800781e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007822:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007826:	d017      	beq.n	8007858 <UART_SetConfig+0x338>
 8007828:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800782c:	d817      	bhi.n	800785e <UART_SetConfig+0x33e>
 800782e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007832:	d00b      	beq.n	800784c <UART_SetConfig+0x32c>
 8007834:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007838:	d811      	bhi.n	800785e <UART_SetConfig+0x33e>
 800783a:	2b00      	cmp	r3, #0
 800783c:	d003      	beq.n	8007846 <UART_SetConfig+0x326>
 800783e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007842:	d006      	beq.n	8007852 <UART_SetConfig+0x332>
 8007844:	e00b      	b.n	800785e <UART_SetConfig+0x33e>
 8007846:	2300      	movs	r3, #0
 8007848:	77fb      	strb	r3, [r7, #31]
 800784a:	e00d      	b.n	8007868 <UART_SetConfig+0x348>
 800784c:	2302      	movs	r3, #2
 800784e:	77fb      	strb	r3, [r7, #31]
 8007850:	e00a      	b.n	8007868 <UART_SetConfig+0x348>
 8007852:	2304      	movs	r3, #4
 8007854:	77fb      	strb	r3, [r7, #31]
 8007856:	e007      	b.n	8007868 <UART_SetConfig+0x348>
 8007858:	2308      	movs	r3, #8
 800785a:	77fb      	strb	r3, [r7, #31]
 800785c:	e004      	b.n	8007868 <UART_SetConfig+0x348>
 800785e:	2310      	movs	r3, #16
 8007860:	77fb      	strb	r3, [r7, #31]
 8007862:	e001      	b.n	8007868 <UART_SetConfig+0x348>
 8007864:	2310      	movs	r3, #16
 8007866:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	69db      	ldr	r3, [r3, #28]
 800786c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007870:	d15b      	bne.n	800792a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007872:	7ffb      	ldrb	r3, [r7, #31]
 8007874:	2b08      	cmp	r3, #8
 8007876:	d828      	bhi.n	80078ca <UART_SetConfig+0x3aa>
 8007878:	a201      	add	r2, pc, #4	@ (adr r2, 8007880 <UART_SetConfig+0x360>)
 800787a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787e:	bf00      	nop
 8007880:	080078a5 	.word	0x080078a5
 8007884:	080078ad 	.word	0x080078ad
 8007888:	080078b5 	.word	0x080078b5
 800788c:	080078cb 	.word	0x080078cb
 8007890:	080078bb 	.word	0x080078bb
 8007894:	080078cb 	.word	0x080078cb
 8007898:	080078cb 	.word	0x080078cb
 800789c:	080078cb 	.word	0x080078cb
 80078a0:	080078c3 	.word	0x080078c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078a4:	f7fd faa8 	bl	8004df8 <HAL_RCC_GetPCLK1Freq>
 80078a8:	61b8      	str	r0, [r7, #24]
        break;
 80078aa:	e013      	b.n	80078d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078ac:	f7fd fab8 	bl	8004e20 <HAL_RCC_GetPCLK2Freq>
 80078b0:	61b8      	str	r0, [r7, #24]
        break;
 80078b2:	e00f      	b.n	80078d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078b4:	4b4b      	ldr	r3, [pc, #300]	@ (80079e4 <UART_SetConfig+0x4c4>)
 80078b6:	61bb      	str	r3, [r7, #24]
        break;
 80078b8:	e00c      	b.n	80078d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078ba:	f7fd f98b 	bl	8004bd4 <HAL_RCC_GetSysClockFreq>
 80078be:	61b8      	str	r0, [r7, #24]
        break;
 80078c0:	e008      	b.n	80078d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078c6:	61bb      	str	r3, [r7, #24]
        break;
 80078c8:	e004      	b.n	80078d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	77bb      	strb	r3, [r7, #30]
        break;
 80078d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d074      	beq.n	80079c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	005a      	lsls	r2, r3, #1
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	085b      	lsrs	r3, r3, #1
 80078e4:	441a      	add	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	2b0f      	cmp	r3, #15
 80078f4:	d916      	bls.n	8007924 <UART_SetConfig+0x404>
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078fc:	d212      	bcs.n	8007924 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	b29b      	uxth	r3, r3
 8007902:	f023 030f 	bic.w	r3, r3, #15
 8007906:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	085b      	lsrs	r3, r3, #1
 800790c:	b29b      	uxth	r3, r3
 800790e:	f003 0307 	and.w	r3, r3, #7
 8007912:	b29a      	uxth	r2, r3
 8007914:	89fb      	ldrh	r3, [r7, #14]
 8007916:	4313      	orrs	r3, r2
 8007918:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	89fa      	ldrh	r2, [r7, #14]
 8007920:	60da      	str	r2, [r3, #12]
 8007922:	e04f      	b.n	80079c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	77bb      	strb	r3, [r7, #30]
 8007928:	e04c      	b.n	80079c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800792a:	7ffb      	ldrb	r3, [r7, #31]
 800792c:	2b08      	cmp	r3, #8
 800792e:	d828      	bhi.n	8007982 <UART_SetConfig+0x462>
 8007930:	a201      	add	r2, pc, #4	@ (adr r2, 8007938 <UART_SetConfig+0x418>)
 8007932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007936:	bf00      	nop
 8007938:	0800795d 	.word	0x0800795d
 800793c:	08007965 	.word	0x08007965
 8007940:	0800796d 	.word	0x0800796d
 8007944:	08007983 	.word	0x08007983
 8007948:	08007973 	.word	0x08007973
 800794c:	08007983 	.word	0x08007983
 8007950:	08007983 	.word	0x08007983
 8007954:	08007983 	.word	0x08007983
 8007958:	0800797b 	.word	0x0800797b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800795c:	f7fd fa4c 	bl	8004df8 <HAL_RCC_GetPCLK1Freq>
 8007960:	61b8      	str	r0, [r7, #24]
        break;
 8007962:	e013      	b.n	800798c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007964:	f7fd fa5c 	bl	8004e20 <HAL_RCC_GetPCLK2Freq>
 8007968:	61b8      	str	r0, [r7, #24]
        break;
 800796a:	e00f      	b.n	800798c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800796c:	4b1d      	ldr	r3, [pc, #116]	@ (80079e4 <UART_SetConfig+0x4c4>)
 800796e:	61bb      	str	r3, [r7, #24]
        break;
 8007970:	e00c      	b.n	800798c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007972:	f7fd f92f 	bl	8004bd4 <HAL_RCC_GetSysClockFreq>
 8007976:	61b8      	str	r0, [r7, #24]
        break;
 8007978:	e008      	b.n	800798c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800797a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800797e:	61bb      	str	r3, [r7, #24]
        break;
 8007980:	e004      	b.n	800798c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007982:	2300      	movs	r3, #0
 8007984:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	77bb      	strb	r3, [r7, #30]
        break;
 800798a:	bf00      	nop
    }

    if (pclk != 0U)
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d018      	beq.n	80079c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	085a      	lsrs	r2, r3, #1
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	441a      	add	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	2b0f      	cmp	r3, #15
 80079aa:	d909      	bls.n	80079c0 <UART_SetConfig+0x4a0>
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079b2:	d205      	bcs.n	80079c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	60da      	str	r2, [r3, #12]
 80079be:	e001      	b.n	80079c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80079d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3720      	adds	r7, #32
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	40007c00 	.word	0x40007c00
 80079e0:	40023800 	.word	0x40023800
 80079e4:	00f42400 	.word	0x00f42400

080079e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f4:	f003 0308 	and.w	r3, r3, #8
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00a      	beq.n	8007a12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	430a      	orrs	r2, r1
 8007a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00a      	beq.n	8007a34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	430a      	orrs	r2, r1
 8007a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a38:	f003 0302 	and.w	r3, r3, #2
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00a      	beq.n	8007a56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a5a:	f003 0304 	and.w	r3, r3, #4
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00a      	beq.n	8007a78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	430a      	orrs	r2, r1
 8007a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a7c:	f003 0310 	and.w	r3, r3, #16
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00a      	beq.n	8007a9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	430a      	orrs	r2, r1
 8007a98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9e:	f003 0320 	and.w	r3, r3, #32
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00a      	beq.n	8007abc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	430a      	orrs	r2, r1
 8007aba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d01a      	beq.n	8007afe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ae2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ae6:	d10a      	bne.n	8007afe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	430a      	orrs	r2, r1
 8007afc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00a      	beq.n	8007b20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	430a      	orrs	r2, r1
 8007b1e:	605a      	str	r2, [r3, #4]
  }
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08c      	sub	sp, #48	@ 0x30
 8007b30:	af02      	add	r7, sp, #8
 8007b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b3c:	f7fa fe40 	bl	80027c0 <HAL_GetTick>
 8007b40:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0308 	and.w	r3, r3, #8
 8007b4c:	2b08      	cmp	r3, #8
 8007b4e:	d12e      	bne.n	8007bae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f83b 	bl	8007bda <UART_WaitOnFlagUntilTimeout>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d021      	beq.n	8007bae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	e853 3f00 	ldrex	r3, [r3]
 8007b76:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b7e:	623b      	str	r3, [r7, #32]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	461a      	mov	r2, r3
 8007b86:	6a3b      	ldr	r3, [r7, #32]
 8007b88:	61fb      	str	r3, [r7, #28]
 8007b8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8c:	69b9      	ldr	r1, [r7, #24]
 8007b8e:	69fa      	ldr	r2, [r7, #28]
 8007b90:	e841 2300 	strex	r3, r2, [r1]
 8007b94:	617b      	str	r3, [r7, #20]
   return(result);
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1e6      	bne.n	8007b6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e011      	b.n	8007bd2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2220      	movs	r2, #32
 8007bb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3728      	adds	r7, #40	@ 0x28
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	60f8      	str	r0, [r7, #12]
 8007be2:	60b9      	str	r1, [r7, #8]
 8007be4:	603b      	str	r3, [r7, #0]
 8007be6:	4613      	mov	r3, r2
 8007be8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bea:	e04f      	b.n	8007c8c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf2:	d04b      	beq.n	8007c8c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bf4:	f7fa fde4 	bl	80027c0 <HAL_GetTick>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d302      	bcc.n	8007c0a <UART_WaitOnFlagUntilTimeout+0x30>
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d101      	bne.n	8007c0e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e04e      	b.n	8007cac <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d037      	beq.n	8007c8c <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2b80      	cmp	r3, #128	@ 0x80
 8007c20:	d034      	beq.n	8007c8c <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	2b40      	cmp	r3, #64	@ 0x40
 8007c26:	d031      	beq.n	8007c8c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	f003 0308 	and.w	r3, r3, #8
 8007c32:	2b08      	cmp	r3, #8
 8007c34:	d110      	bne.n	8007c58 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2208      	movs	r2, #8
 8007c3c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 f8fe 	bl	8007e40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2208      	movs	r2, #8
 8007c48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e029      	b.n	8007cac <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c66:	d111      	bne.n	8007c8c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c70:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f000 f8e4 	bl	8007e40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2220      	movs	r2, #32
 8007c7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e00f      	b.n	8007cac <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	69da      	ldr	r2, [r3, #28]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	4013      	ands	r3, r2
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	bf0c      	ite	eq
 8007c9c:	2301      	moveq	r3, #1
 8007c9e:	2300      	movne	r3, #0
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	79fb      	ldrb	r3, [r7, #7]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d0a0      	beq.n	8007bec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b097      	sub	sp, #92	@ 0x5c
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	88fa      	ldrh	r2, [r7, #6]
 8007ccc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	88fa      	ldrh	r2, [r7, #6]
 8007cd4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ce6:	d10e      	bne.n	8007d06 <UART_Start_Receive_IT+0x52>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d105      	bne.n	8007cfc <UART_Start_Receive_IT+0x48>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007cf6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007cfa:	e02d      	b.n	8007d58 <UART_Start_Receive_IT+0xa4>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	22ff      	movs	r2, #255	@ 0xff
 8007d00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d04:	e028      	b.n	8007d58 <UART_Start_Receive_IT+0xa4>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10d      	bne.n	8007d2a <UART_Start_Receive_IT+0x76>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d104      	bne.n	8007d20 <UART_Start_Receive_IT+0x6c>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	22ff      	movs	r2, #255	@ 0xff
 8007d1a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d1e:	e01b      	b.n	8007d58 <UART_Start_Receive_IT+0xa4>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	227f      	movs	r2, #127	@ 0x7f
 8007d24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d28:	e016      	b.n	8007d58 <UART_Start_Receive_IT+0xa4>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d32:	d10d      	bne.n	8007d50 <UART_Start_Receive_IT+0x9c>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d104      	bne.n	8007d46 <UART_Start_Receive_IT+0x92>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	227f      	movs	r2, #127	@ 0x7f
 8007d40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d44:	e008      	b.n	8007d58 <UART_Start_Receive_IT+0xa4>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	223f      	movs	r2, #63	@ 0x3f
 8007d4a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007d4e:	e003      	b.n	8007d58 <UART_Start_Receive_IT+0xa4>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2222      	movs	r2, #34	@ 0x22
 8007d64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	3308      	adds	r3, #8
 8007d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d72:	e853 3f00 	ldrex	r3, [r3]
 8007d76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7a:	f043 0301 	orr.w	r3, r3, #1
 8007d7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3308      	adds	r3, #8
 8007d86:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d88:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007d8a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007d8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d90:	e841 2300 	strex	r3, r2, [r1]
 8007d94:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007d96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1e5      	bne.n	8007d68 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007da4:	d107      	bne.n	8007db6 <UART_Start_Receive_IT+0x102>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d103      	bne.n	8007db6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4a21      	ldr	r2, [pc, #132]	@ (8007e38 <UART_Start_Receive_IT+0x184>)
 8007db2:	669a      	str	r2, [r3, #104]	@ 0x68
 8007db4:	e002      	b.n	8007dbc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	4a20      	ldr	r2, [pc, #128]	@ (8007e3c <UART_Start_Receive_IT+0x188>)
 8007dba:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d019      	beq.n	8007df8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dcc:	e853 3f00 	ldrex	r3, [r3]
 8007dd0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007de4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007de8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1e6      	bne.n	8007dc4 <UART_Start_Receive_IT+0x110>
 8007df6:	e018      	b.n	8007e2a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	613b      	str	r3, [r7, #16]
   return(result);
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	f043 0320 	orr.w	r3, r3, #32
 8007e0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	461a      	mov	r2, r3
 8007e14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e16:	623b      	str	r3, [r7, #32]
 8007e18:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1a:	69f9      	ldr	r1, [r7, #28]
 8007e1c:	6a3a      	ldr	r2, [r7, #32]
 8007e1e:	e841 2300 	strex	r3, r2, [r1]
 8007e22:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1e6      	bne.n	8007df8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	375c      	adds	r7, #92	@ 0x5c
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	08008131 	.word	0x08008131
 8007e3c:	08007f89 	.word	0x08007f89

08007e40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b095      	sub	sp, #84	@ 0x54
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e66:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e68:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e6e:	e841 2300 	strex	r3, r2, [r1]
 8007e72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1e6      	bne.n	8007e48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3308      	adds	r3, #8
 8007e80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	e853 3f00 	ldrex	r3, [r3]
 8007e88:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	f023 0301 	bic.w	r3, r3, #1
 8007e90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	3308      	adds	r3, #8
 8007e98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ea0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ea2:	e841 2300 	strex	r3, r2, [r1]
 8007ea6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1e5      	bne.n	8007e7a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d118      	bne.n	8007ee8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	e853 3f00 	ldrex	r3, [r3]
 8007ec2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	f023 0310 	bic.w	r3, r3, #16
 8007eca:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ed4:	61bb      	str	r3, [r7, #24]
 8007ed6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed8:	6979      	ldr	r1, [r7, #20]
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	e841 2300 	strex	r3, r2, [r1]
 8007ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1e6      	bne.n	8007eb6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2220      	movs	r2, #32
 8007eec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007efc:	bf00      	nop
 8007efe:	3754      	adds	r7, #84	@ 0x54
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f7ff fae4 	bl	80074f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f2c:	bf00      	nop
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b088      	sub	sp, #32
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	e853 3f00 	ldrex	r3, [r3]
 8007f48:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f50:	61fb      	str	r3, [r7, #28]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	461a      	mov	r2, r3
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	61bb      	str	r3, [r7, #24]
 8007f5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5e:	6979      	ldr	r1, [r7, #20]
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	e841 2300 	strex	r3, r2, [r1]
 8007f66:	613b      	str	r3, [r7, #16]
   return(result);
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1e6      	bne.n	8007f3c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2220      	movs	r2, #32
 8007f72:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7ff fab0 	bl	80074e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f80:	bf00      	nop
 8007f82:	3720      	adds	r7, #32
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b09c      	sub	sp, #112	@ 0x70
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f96:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fa0:	2b22      	cmp	r3, #34	@ 0x22
 8007fa2:	f040 80b9 	bne.w	8008118 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007fb0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007fb4:	b2d9      	uxtb	r1, r3
 8007fb6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fc0:	400a      	ands	r2, r1
 8007fc2:	b2d2      	uxtb	r2, r2
 8007fc4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fca:	1c5a      	adds	r2, r3, #1
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f040 809c 	bne.w	8008128 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ff8:	e853 3f00 	ldrex	r3, [r3]
 8007ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ffe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008000:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008004:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800800e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008010:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008012:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008014:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008016:	e841 2300 	strex	r3, r2, [r1]
 800801a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800801c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1e6      	bne.n	8007ff0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3308      	adds	r3, #8
 8008028:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800802c:	e853 3f00 	ldrex	r3, [r3]
 8008030:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008034:	f023 0301 	bic.w	r3, r3, #1
 8008038:	667b      	str	r3, [r7, #100]	@ 0x64
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	3308      	adds	r3, #8
 8008040:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008042:	647a      	str	r2, [r7, #68]	@ 0x44
 8008044:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008046:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008048:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800804a:	e841 2300 	strex	r3, r2, [r1]
 800804e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1e5      	bne.n	8008022 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2220      	movs	r2, #32
 800805a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d018      	beq.n	80080aa <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008080:	e853 3f00 	ldrex	r3, [r3]
 8008084:	623b      	str	r3, [r7, #32]
   return(result);
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800808c:	663b      	str	r3, [r7, #96]	@ 0x60
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	461a      	mov	r2, r3
 8008094:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008096:	633b      	str	r3, [r7, #48]	@ 0x30
 8008098:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800809c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800809e:	e841 2300 	strex	r3, r2, [r1]
 80080a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1e6      	bne.n	8008078 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d12e      	bne.n	8008110 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	e853 3f00 	ldrex	r3, [r3]
 80080c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f023 0310 	bic.w	r3, r3, #16
 80080cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080d6:	61fb      	str	r3, [r7, #28]
 80080d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080da:	69b9      	ldr	r1, [r7, #24]
 80080dc:	69fa      	ldr	r2, [r7, #28]
 80080de:	e841 2300 	strex	r3, r2, [r1]
 80080e2:	617b      	str	r3, [r7, #20]
   return(result);
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1e6      	bne.n	80080b8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	69db      	ldr	r3, [r3, #28]
 80080f0:	f003 0310 	and.w	r3, r3, #16
 80080f4:	2b10      	cmp	r3, #16
 80080f6:	d103      	bne.n	8008100 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2210      	movs	r2, #16
 80080fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7ff f9fd 	bl	8007508 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800810e:	e00b      	b.n	8008128 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f7f9 fc89 	bl	8001a28 <HAL_UART_RxCpltCallback>
}
 8008116:	e007      	b.n	8008128 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	699a      	ldr	r2, [r3, #24]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f042 0208 	orr.w	r2, r2, #8
 8008126:	619a      	str	r2, [r3, #24]
}
 8008128:	bf00      	nop
 800812a:	3770      	adds	r7, #112	@ 0x70
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b09c      	sub	sp, #112	@ 0x70
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800813e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008148:	2b22      	cmp	r3, #34	@ 0x22
 800814a:	f040 80b9 	bne.w	80082c0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008154:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800815c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800815e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008162:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008166:	4013      	ands	r3, r2
 8008168:	b29a      	uxth	r2, r3
 800816a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800816c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008172:	1c9a      	adds	r2, r3, #2
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800817e:	b29b      	uxth	r3, r3
 8008180:	3b01      	subs	r3, #1
 8008182:	b29a      	uxth	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008190:	b29b      	uxth	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	f040 809c 	bne.w	80082d0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081a0:	e853 3f00 	ldrex	r3, [r3]
 80081a4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80081a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80081b8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80081bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80081be:	e841 2300 	strex	r3, r2, [r1]
 80081c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80081c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1e6      	bne.n	8008198 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3308      	adds	r3, #8
 80081d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081d4:	e853 3f00 	ldrex	r3, [r3]
 80081d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80081da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081dc:	f023 0301 	bic.w	r3, r3, #1
 80081e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3308      	adds	r3, #8
 80081e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80081ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80081ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80081f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80081f2:	e841 2300 	strex	r3, r2, [r1]
 80081f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80081f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1e5      	bne.n	80081ca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2220      	movs	r2, #32
 8008202:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d018      	beq.n	8008252 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008226:	6a3b      	ldr	r3, [r7, #32]
 8008228:	e853 3f00 	ldrex	r3, [r3]
 800822c:	61fb      	str	r3, [r7, #28]
   return(result);
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008234:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800823e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008240:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008242:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008244:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800824c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e6      	bne.n	8008220 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008256:	2b01      	cmp	r3, #1
 8008258:	d12e      	bne.n	80082b8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	e853 3f00 	ldrex	r3, [r3]
 800826c:	60bb      	str	r3, [r7, #8]
   return(result);
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	f023 0310 	bic.w	r3, r3, #16
 8008274:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800827e:	61bb      	str	r3, [r7, #24]
 8008280:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008282:	6979      	ldr	r1, [r7, #20]
 8008284:	69ba      	ldr	r2, [r7, #24]
 8008286:	e841 2300 	strex	r3, r2, [r1]
 800828a:	613b      	str	r3, [r7, #16]
   return(result);
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1e6      	bne.n	8008260 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	69db      	ldr	r3, [r3, #28]
 8008298:	f003 0310 	and.w	r3, r3, #16
 800829c:	2b10      	cmp	r3, #16
 800829e:	d103      	bne.n	80082a8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2210      	movs	r2, #16
 80082a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f7ff f929 	bl	8007508 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082b6:	e00b      	b.n	80082d0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7f9 fbb5 	bl	8001a28 <HAL_UART_RxCpltCallback>
}
 80082be:	e007      	b.n	80082d0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	699a      	ldr	r2, [r3, #24]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f042 0208 	orr.w	r2, r2, #8
 80082ce:	619a      	str	r2, [r3, #24]
}
 80082d0:	bf00      	nop
 80082d2:	3770      	adds	r7, #112	@ 0x70
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082d8:	b084      	sub	sp, #16
 80082da:	b580      	push	{r7, lr}
 80082dc:	b084      	sub	sp, #16
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	f107 001c 	add.w	r0, r7, #28
 80082e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80082ea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d121      	bne.n	8008336 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68da      	ldr	r2, [r3, #12]
 8008302:	4b21      	ldr	r3, [pc, #132]	@ (8008388 <USB_CoreInit+0xb0>)
 8008304:	4013      	ands	r3, r2
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008316:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800831a:	2b01      	cmp	r3, #1
 800831c:	d105      	bne.n	800832a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fa92 	bl	8008854 <USB_CoreReset>
 8008330:	4603      	mov	r3, r0
 8008332:	73fb      	strb	r3, [r7, #15]
 8008334:	e010      	b.n	8008358 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fa86 	bl	8008854 <USB_CoreReset>
 8008348:	4603      	mov	r3, r0
 800834a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008350:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8008358:	7fbb      	ldrb	r3, [r7, #30]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d10b      	bne.n	8008376 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	f043 0206 	orr.w	r2, r3, #6
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f043 0220 	orr.w	r2, r3, #32
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008376:	7bfb      	ldrb	r3, [r7, #15]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008382:	b004      	add	sp, #16
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	ffbdffbf 	.word	0xffbdffbf

0800838c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	f023 0201 	bic.w	r2, r3, #1
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	460b      	mov	r3, r1
 80083b8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80083ba:	2300      	movs	r3, #0
 80083bc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80083ca:	78fb      	ldrb	r3, [r7, #3]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d115      	bne.n	80083fc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80083dc:	200a      	movs	r0, #10
 80083de:	f7fa f9fb 	bl	80027d8 <HAL_Delay>
      ms += 10U;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	330a      	adds	r3, #10
 80083e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fa25 	bl	8008838 <USB_GetMode>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d01e      	beq.n	8008432 <USB_SetCurrentMode+0x84>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2bc7      	cmp	r3, #199	@ 0xc7
 80083f8:	d9f0      	bls.n	80083dc <USB_SetCurrentMode+0x2e>
 80083fa:	e01a      	b.n	8008432 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80083fc:	78fb      	ldrb	r3, [r7, #3]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d115      	bne.n	800842e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800840e:	200a      	movs	r0, #10
 8008410:	f7fa f9e2 	bl	80027d8 <HAL_Delay>
      ms += 10U;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	330a      	adds	r3, #10
 8008418:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fa0c 	bl	8008838 <USB_GetMode>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d005      	beq.n	8008432 <USB_SetCurrentMode+0x84>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2bc7      	cmp	r3, #199	@ 0xc7
 800842a:	d9f0      	bls.n	800840e <USB_SetCurrentMode+0x60>
 800842c:	e001      	b.n	8008432 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e005      	b.n	800843e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2bc8      	cmp	r3, #200	@ 0xc8
 8008436:	d101      	bne.n	800843c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e000      	b.n	800843e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
	...

08008448 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008448:	b084      	sub	sp, #16
 800844a:	b580      	push	{r7, lr}
 800844c:	b086      	sub	sp, #24
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008462:	2300      	movs	r3, #0
 8008464:	613b      	str	r3, [r7, #16]
 8008466:	e009      	b.n	800847c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	3340      	adds	r3, #64	@ 0x40
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4413      	add	r3, r2
 8008472:	2200      	movs	r2, #0
 8008474:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	3301      	adds	r3, #1
 800847a:	613b      	str	r3, [r7, #16]
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	2b0e      	cmp	r3, #14
 8008480:	d9f2      	bls.n	8008468 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008482:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008486:	2b00      	cmp	r3, #0
 8008488:	d11c      	bne.n	80084c4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008498:	f043 0302 	orr.w	r3, r3, #2
 800849c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	601a      	str	r2, [r3, #0]
 80084c2:	e005      	b.n	80084d0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80084d6:	461a      	mov	r2, r3
 80084d8:	2300      	movs	r3, #0
 80084da:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80084dc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d10d      	bne.n	8008500 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80084e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d104      	bne.n	80084f6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80084ec:	2100      	movs	r1, #0
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f968 	bl	80087c4 <USB_SetDevSpeed>
 80084f4:	e008      	b.n	8008508 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80084f6:	2101      	movs	r1, #1
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 f963 	bl	80087c4 <USB_SetDevSpeed>
 80084fe:	e003      	b.n	8008508 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008500:	2103      	movs	r1, #3
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f95e 	bl	80087c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008508:	2110      	movs	r1, #16
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f8fa 	bl	8008704 <USB_FlushTxFifo>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d001      	beq.n	800851a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f924 	bl	8008768 <USB_FlushRxFifo>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008530:	461a      	mov	r2, r3
 8008532:	2300      	movs	r3, #0
 8008534:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800853c:	461a      	mov	r2, r3
 800853e:	2300      	movs	r3, #0
 8008540:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008548:	461a      	mov	r2, r3
 800854a:	2300      	movs	r3, #0
 800854c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800854e:	2300      	movs	r3, #0
 8008550:	613b      	str	r3, [r7, #16]
 8008552:	e043      	b.n	80085dc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	015a      	lsls	r2, r3, #5
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	4413      	add	r3, r2
 800855c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008566:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800856a:	d118      	bne.n	800859e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10a      	bne.n	8008588 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	015a      	lsls	r2, r3, #5
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	4413      	add	r3, r2
 800857a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800857e:	461a      	mov	r2, r3
 8008580:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008584:	6013      	str	r3, [r2, #0]
 8008586:	e013      	b.n	80085b0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008594:	461a      	mov	r2, r3
 8008596:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800859a:	6013      	str	r3, [r2, #0]
 800859c:	e008      	b.n	80085b0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085aa:	461a      	mov	r2, r3
 80085ac:	2300      	movs	r3, #0
 80085ae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085bc:	461a      	mov	r2, r3
 80085be:	2300      	movs	r3, #0
 80085c0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	015a      	lsls	r2, r3, #5
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	4413      	add	r3, r2
 80085ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085ce:	461a      	mov	r2, r3
 80085d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80085d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	3301      	adds	r3, #1
 80085da:	613b      	str	r3, [r7, #16]
 80085dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80085e0:	461a      	mov	r2, r3
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d3b5      	bcc.n	8008554 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085e8:	2300      	movs	r3, #0
 80085ea:	613b      	str	r3, [r7, #16]
 80085ec:	e043      	b.n	8008676 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	015a      	lsls	r2, r3, #5
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	4413      	add	r3, r2
 80085f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008600:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008604:	d118      	bne.n	8008638 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10a      	bne.n	8008622 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	4413      	add	r3, r2
 8008614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008618:	461a      	mov	r2, r3
 800861a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800861e:	6013      	str	r3, [r2, #0]
 8008620:	e013      	b.n	800864a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	015a      	lsls	r2, r3, #5
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	4413      	add	r3, r2
 800862a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800862e:	461a      	mov	r2, r3
 8008630:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	e008      	b.n	800864a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	015a      	lsls	r2, r3, #5
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	4413      	add	r3, r2
 8008640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008644:	461a      	mov	r2, r3
 8008646:	2300      	movs	r3, #0
 8008648:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	4413      	add	r3, r2
 8008652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008656:	461a      	mov	r2, r3
 8008658:	2300      	movs	r3, #0
 800865a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	015a      	lsls	r2, r3, #5
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4413      	add	r3, r2
 8008664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008668:	461a      	mov	r2, r3
 800866a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800866e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	3301      	adds	r3, #1
 8008674:	613b      	str	r3, [r7, #16]
 8008676:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800867a:	461a      	mov	r2, r3
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	4293      	cmp	r3, r2
 8008680:	d3b5      	bcc.n	80085ee <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008690:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008694:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80086a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80086a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d105      	bne.n	80086b8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	f043 0210 	orr.w	r2, r3, #16
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	699a      	ldr	r2, [r3, #24]
 80086bc:	4b0f      	ldr	r3, [pc, #60]	@ (80086fc <USB_DevInit+0x2b4>)
 80086be:	4313      	orrs	r3, r2
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80086c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d005      	beq.n	80086d8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	f043 0208 	orr.w	r2, r3, #8
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80086d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d105      	bne.n	80086ec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	699a      	ldr	r2, [r3, #24]
 80086e4:	4b06      	ldr	r3, [pc, #24]	@ (8008700 <USB_DevInit+0x2b8>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80086ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3718      	adds	r7, #24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086f8:	b004      	add	sp, #16
 80086fa:	4770      	bx	lr
 80086fc:	803c3800 	.word	0x803c3800
 8008700:	40000004 	.word	0x40000004

08008704 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800870e:	2300      	movs	r3, #0
 8008710:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3301      	adds	r3, #1
 8008716:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800871e:	d901      	bls.n	8008724 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e01b      	b.n	800875c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	2b00      	cmp	r3, #0
 800872a:	daf2      	bge.n	8008712 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800872c:	2300      	movs	r3, #0
 800872e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	019b      	lsls	r3, r3, #6
 8008734:	f043 0220 	orr.w	r2, r3, #32
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	3301      	adds	r3, #1
 8008740:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008748:	d901      	bls.n	800874e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e006      	b.n	800875c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	f003 0320 	and.w	r3, r3, #32
 8008756:	2b20      	cmp	r3, #32
 8008758:	d0f0      	beq.n	800873c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	3301      	adds	r3, #1
 8008778:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008780:	d901      	bls.n	8008786 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e018      	b.n	80087b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	2b00      	cmp	r3, #0
 800878c:	daf2      	bge.n	8008774 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800878e:	2300      	movs	r3, #0
 8008790:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2210      	movs	r2, #16
 8008796:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	3301      	adds	r3, #1
 800879c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087a4:	d901      	bls.n	80087aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e006      	b.n	80087b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	f003 0310 	and.w	r3, r3, #16
 80087b2:	2b10      	cmp	r3, #16
 80087b4:	d0f0      	beq.n	8008798 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3714      	adds	r7, #20
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	460b      	mov	r3, r1
 80087ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	78fb      	ldrb	r3, [r7, #3]
 80087de:	68f9      	ldr	r1, [r7, #12]
 80087e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80087e4:	4313      	orrs	r3, r2
 80087e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3714      	adds	r7, #20
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr

080087f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b085      	sub	sp, #20
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008810:	f023 0303 	bic.w	r3, r3, #3
 8008814:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008824:	f043 0302 	orr.w	r3, r3, #2
 8008828:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3714      	adds	r7, #20
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	f003 0301 	and.w	r3, r3, #1
}
 8008848:	4618      	mov	r0, r3
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800885c:	2300      	movs	r3, #0
 800885e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3301      	adds	r3, #1
 8008864:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800886c:	d901      	bls.n	8008872 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	e01b      	b.n	80088aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	2b00      	cmp	r3, #0
 8008878:	daf2      	bge.n	8008860 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800887a:	2300      	movs	r3, #0
 800887c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	f043 0201 	orr.w	r2, r3, #1
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	3301      	adds	r3, #1
 800888e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008896:	d901      	bls.n	800889c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	e006      	b.n	80088aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	f003 0301 	and.w	r3, r3, #1
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d0f0      	beq.n	800888a <USB_CoreReset+0x36>

  return HAL_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3714      	adds	r7, #20
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <atoi>:
 80088b6:	220a      	movs	r2, #10
 80088b8:	2100      	movs	r1, #0
 80088ba:	f000 b87b 	b.w	80089b4 <strtol>
	...

080088c0 <_strtol_l.constprop.0>:
 80088c0:	2b24      	cmp	r3, #36	@ 0x24
 80088c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088c6:	4686      	mov	lr, r0
 80088c8:	4690      	mov	r8, r2
 80088ca:	d801      	bhi.n	80088d0 <_strtol_l.constprop.0+0x10>
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d106      	bne.n	80088de <_strtol_l.constprop.0+0x1e>
 80088d0:	f000 fe5c 	bl	800958c <__errno>
 80088d4:	2316      	movs	r3, #22
 80088d6:	6003      	str	r3, [r0, #0]
 80088d8:	2000      	movs	r0, #0
 80088da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088de:	4834      	ldr	r0, [pc, #208]	@ (80089b0 <_strtol_l.constprop.0+0xf0>)
 80088e0:	460d      	mov	r5, r1
 80088e2:	462a      	mov	r2, r5
 80088e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088e8:	5d06      	ldrb	r6, [r0, r4]
 80088ea:	f016 0608 	ands.w	r6, r6, #8
 80088ee:	d1f8      	bne.n	80088e2 <_strtol_l.constprop.0+0x22>
 80088f0:	2c2d      	cmp	r4, #45	@ 0x2d
 80088f2:	d12d      	bne.n	8008950 <_strtol_l.constprop.0+0x90>
 80088f4:	782c      	ldrb	r4, [r5, #0]
 80088f6:	2601      	movs	r6, #1
 80088f8:	1c95      	adds	r5, r2, #2
 80088fa:	f033 0210 	bics.w	r2, r3, #16
 80088fe:	d109      	bne.n	8008914 <_strtol_l.constprop.0+0x54>
 8008900:	2c30      	cmp	r4, #48	@ 0x30
 8008902:	d12a      	bne.n	800895a <_strtol_l.constprop.0+0x9a>
 8008904:	782a      	ldrb	r2, [r5, #0]
 8008906:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800890a:	2a58      	cmp	r2, #88	@ 0x58
 800890c:	d125      	bne.n	800895a <_strtol_l.constprop.0+0x9a>
 800890e:	786c      	ldrb	r4, [r5, #1]
 8008910:	2310      	movs	r3, #16
 8008912:	3502      	adds	r5, #2
 8008914:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008918:	f10c 3cff 	add.w	ip, ip, #4294967295
 800891c:	2200      	movs	r2, #0
 800891e:	fbbc f9f3 	udiv	r9, ip, r3
 8008922:	4610      	mov	r0, r2
 8008924:	fb03 ca19 	mls	sl, r3, r9, ip
 8008928:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800892c:	2f09      	cmp	r7, #9
 800892e:	d81b      	bhi.n	8008968 <_strtol_l.constprop.0+0xa8>
 8008930:	463c      	mov	r4, r7
 8008932:	42a3      	cmp	r3, r4
 8008934:	dd27      	ble.n	8008986 <_strtol_l.constprop.0+0xc6>
 8008936:	1c57      	adds	r7, r2, #1
 8008938:	d007      	beq.n	800894a <_strtol_l.constprop.0+0x8a>
 800893a:	4581      	cmp	r9, r0
 800893c:	d320      	bcc.n	8008980 <_strtol_l.constprop.0+0xc0>
 800893e:	d101      	bne.n	8008944 <_strtol_l.constprop.0+0x84>
 8008940:	45a2      	cmp	sl, r4
 8008942:	db1d      	blt.n	8008980 <_strtol_l.constprop.0+0xc0>
 8008944:	fb00 4003 	mla	r0, r0, r3, r4
 8008948:	2201      	movs	r2, #1
 800894a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800894e:	e7eb      	b.n	8008928 <_strtol_l.constprop.0+0x68>
 8008950:	2c2b      	cmp	r4, #43	@ 0x2b
 8008952:	bf04      	itt	eq
 8008954:	782c      	ldrbeq	r4, [r5, #0]
 8008956:	1c95      	addeq	r5, r2, #2
 8008958:	e7cf      	b.n	80088fa <_strtol_l.constprop.0+0x3a>
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1da      	bne.n	8008914 <_strtol_l.constprop.0+0x54>
 800895e:	2c30      	cmp	r4, #48	@ 0x30
 8008960:	bf0c      	ite	eq
 8008962:	2308      	moveq	r3, #8
 8008964:	230a      	movne	r3, #10
 8008966:	e7d5      	b.n	8008914 <_strtol_l.constprop.0+0x54>
 8008968:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800896c:	2f19      	cmp	r7, #25
 800896e:	d801      	bhi.n	8008974 <_strtol_l.constprop.0+0xb4>
 8008970:	3c37      	subs	r4, #55	@ 0x37
 8008972:	e7de      	b.n	8008932 <_strtol_l.constprop.0+0x72>
 8008974:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008978:	2f19      	cmp	r7, #25
 800897a:	d804      	bhi.n	8008986 <_strtol_l.constprop.0+0xc6>
 800897c:	3c57      	subs	r4, #87	@ 0x57
 800897e:	e7d8      	b.n	8008932 <_strtol_l.constprop.0+0x72>
 8008980:	f04f 32ff 	mov.w	r2, #4294967295
 8008984:	e7e1      	b.n	800894a <_strtol_l.constprop.0+0x8a>
 8008986:	1c53      	adds	r3, r2, #1
 8008988:	d108      	bne.n	800899c <_strtol_l.constprop.0+0xdc>
 800898a:	2322      	movs	r3, #34	@ 0x22
 800898c:	f8ce 3000 	str.w	r3, [lr]
 8008990:	4660      	mov	r0, ip
 8008992:	f1b8 0f00 	cmp.w	r8, #0
 8008996:	d0a0      	beq.n	80088da <_strtol_l.constprop.0+0x1a>
 8008998:	1e69      	subs	r1, r5, #1
 800899a:	e006      	b.n	80089aa <_strtol_l.constprop.0+0xea>
 800899c:	b106      	cbz	r6, 80089a0 <_strtol_l.constprop.0+0xe0>
 800899e:	4240      	negs	r0, r0
 80089a0:	f1b8 0f00 	cmp.w	r8, #0
 80089a4:	d099      	beq.n	80088da <_strtol_l.constprop.0+0x1a>
 80089a6:	2a00      	cmp	r2, #0
 80089a8:	d1f6      	bne.n	8008998 <_strtol_l.constprop.0+0xd8>
 80089aa:	f8c8 1000 	str.w	r1, [r8]
 80089ae:	e794      	b.n	80088da <_strtol_l.constprop.0+0x1a>
 80089b0:	0800b76d 	.word	0x0800b76d

080089b4 <strtol>:
 80089b4:	4613      	mov	r3, r2
 80089b6:	460a      	mov	r2, r1
 80089b8:	4601      	mov	r1, r0
 80089ba:	4802      	ldr	r0, [pc, #8]	@ (80089c4 <strtol+0x10>)
 80089bc:	6800      	ldr	r0, [r0, #0]
 80089be:	f7ff bf7f 	b.w	80088c0 <_strtol_l.constprop.0>
 80089c2:	bf00      	nop
 80089c4:	2000001c 	.word	0x2000001c

080089c8 <__cvt>:
 80089c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089cc:	ec57 6b10 	vmov	r6, r7, d0
 80089d0:	2f00      	cmp	r7, #0
 80089d2:	460c      	mov	r4, r1
 80089d4:	4619      	mov	r1, r3
 80089d6:	463b      	mov	r3, r7
 80089d8:	bfbb      	ittet	lt
 80089da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80089de:	461f      	movlt	r7, r3
 80089e0:	2300      	movge	r3, #0
 80089e2:	232d      	movlt	r3, #45	@ 0x2d
 80089e4:	700b      	strb	r3, [r1, #0]
 80089e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80089ec:	4691      	mov	r9, r2
 80089ee:	f023 0820 	bic.w	r8, r3, #32
 80089f2:	bfbc      	itt	lt
 80089f4:	4632      	movlt	r2, r6
 80089f6:	4616      	movlt	r6, r2
 80089f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80089fc:	d005      	beq.n	8008a0a <__cvt+0x42>
 80089fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008a02:	d100      	bne.n	8008a06 <__cvt+0x3e>
 8008a04:	3401      	adds	r4, #1
 8008a06:	2102      	movs	r1, #2
 8008a08:	e000      	b.n	8008a0c <__cvt+0x44>
 8008a0a:	2103      	movs	r1, #3
 8008a0c:	ab03      	add	r3, sp, #12
 8008a0e:	9301      	str	r3, [sp, #4]
 8008a10:	ab02      	add	r3, sp, #8
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	ec47 6b10 	vmov	d0, r6, r7
 8008a18:	4653      	mov	r3, sl
 8008a1a:	4622      	mov	r2, r4
 8008a1c:	f000 fe6c 	bl	80096f8 <_dtoa_r>
 8008a20:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008a24:	4605      	mov	r5, r0
 8008a26:	d119      	bne.n	8008a5c <__cvt+0x94>
 8008a28:	f019 0f01 	tst.w	r9, #1
 8008a2c:	d00e      	beq.n	8008a4c <__cvt+0x84>
 8008a2e:	eb00 0904 	add.w	r9, r0, r4
 8008a32:	2200      	movs	r2, #0
 8008a34:	2300      	movs	r3, #0
 8008a36:	4630      	mov	r0, r6
 8008a38:	4639      	mov	r1, r7
 8008a3a:	f7f8 f865 	bl	8000b08 <__aeabi_dcmpeq>
 8008a3e:	b108      	cbz	r0, 8008a44 <__cvt+0x7c>
 8008a40:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a44:	2230      	movs	r2, #48	@ 0x30
 8008a46:	9b03      	ldr	r3, [sp, #12]
 8008a48:	454b      	cmp	r3, r9
 8008a4a:	d31e      	bcc.n	8008a8a <__cvt+0xc2>
 8008a4c:	9b03      	ldr	r3, [sp, #12]
 8008a4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a50:	1b5b      	subs	r3, r3, r5
 8008a52:	4628      	mov	r0, r5
 8008a54:	6013      	str	r3, [r2, #0]
 8008a56:	b004      	add	sp, #16
 8008a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008a60:	eb00 0904 	add.w	r9, r0, r4
 8008a64:	d1e5      	bne.n	8008a32 <__cvt+0x6a>
 8008a66:	7803      	ldrb	r3, [r0, #0]
 8008a68:	2b30      	cmp	r3, #48	@ 0x30
 8008a6a:	d10a      	bne.n	8008a82 <__cvt+0xba>
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	2300      	movs	r3, #0
 8008a70:	4630      	mov	r0, r6
 8008a72:	4639      	mov	r1, r7
 8008a74:	f7f8 f848 	bl	8000b08 <__aeabi_dcmpeq>
 8008a78:	b918      	cbnz	r0, 8008a82 <__cvt+0xba>
 8008a7a:	f1c4 0401 	rsb	r4, r4, #1
 8008a7e:	f8ca 4000 	str.w	r4, [sl]
 8008a82:	f8da 3000 	ldr.w	r3, [sl]
 8008a86:	4499      	add	r9, r3
 8008a88:	e7d3      	b.n	8008a32 <__cvt+0x6a>
 8008a8a:	1c59      	adds	r1, r3, #1
 8008a8c:	9103      	str	r1, [sp, #12]
 8008a8e:	701a      	strb	r2, [r3, #0]
 8008a90:	e7d9      	b.n	8008a46 <__cvt+0x7e>

08008a92 <__exponent>:
 8008a92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a94:	2900      	cmp	r1, #0
 8008a96:	bfba      	itte	lt
 8008a98:	4249      	neglt	r1, r1
 8008a9a:	232d      	movlt	r3, #45	@ 0x2d
 8008a9c:	232b      	movge	r3, #43	@ 0x2b
 8008a9e:	2909      	cmp	r1, #9
 8008aa0:	7002      	strb	r2, [r0, #0]
 8008aa2:	7043      	strb	r3, [r0, #1]
 8008aa4:	dd29      	ble.n	8008afa <__exponent+0x68>
 8008aa6:	f10d 0307 	add.w	r3, sp, #7
 8008aaa:	461d      	mov	r5, r3
 8008aac:	270a      	movs	r7, #10
 8008aae:	461a      	mov	r2, r3
 8008ab0:	fbb1 f6f7 	udiv	r6, r1, r7
 8008ab4:	fb07 1416 	mls	r4, r7, r6, r1
 8008ab8:	3430      	adds	r4, #48	@ 0x30
 8008aba:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008abe:	460c      	mov	r4, r1
 8008ac0:	2c63      	cmp	r4, #99	@ 0x63
 8008ac2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ac6:	4631      	mov	r1, r6
 8008ac8:	dcf1      	bgt.n	8008aae <__exponent+0x1c>
 8008aca:	3130      	adds	r1, #48	@ 0x30
 8008acc:	1e94      	subs	r4, r2, #2
 8008ace:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008ad2:	1c41      	adds	r1, r0, #1
 8008ad4:	4623      	mov	r3, r4
 8008ad6:	42ab      	cmp	r3, r5
 8008ad8:	d30a      	bcc.n	8008af0 <__exponent+0x5e>
 8008ada:	f10d 0309 	add.w	r3, sp, #9
 8008ade:	1a9b      	subs	r3, r3, r2
 8008ae0:	42ac      	cmp	r4, r5
 8008ae2:	bf88      	it	hi
 8008ae4:	2300      	movhi	r3, #0
 8008ae6:	3302      	adds	r3, #2
 8008ae8:	4403      	add	r3, r0
 8008aea:	1a18      	subs	r0, r3, r0
 8008aec:	b003      	add	sp, #12
 8008aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008af0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008af4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008af8:	e7ed      	b.n	8008ad6 <__exponent+0x44>
 8008afa:	2330      	movs	r3, #48	@ 0x30
 8008afc:	3130      	adds	r1, #48	@ 0x30
 8008afe:	7083      	strb	r3, [r0, #2]
 8008b00:	70c1      	strb	r1, [r0, #3]
 8008b02:	1d03      	adds	r3, r0, #4
 8008b04:	e7f1      	b.n	8008aea <__exponent+0x58>
	...

08008b08 <_printf_float>:
 8008b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0c:	b08d      	sub	sp, #52	@ 0x34
 8008b0e:	460c      	mov	r4, r1
 8008b10:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008b14:	4616      	mov	r6, r2
 8008b16:	461f      	mov	r7, r3
 8008b18:	4605      	mov	r5, r0
 8008b1a:	f000 fced 	bl	80094f8 <_localeconv_r>
 8008b1e:	6803      	ldr	r3, [r0, #0]
 8008b20:	9304      	str	r3, [sp, #16]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7f7 fbc4 	bl	80002b0 <strlen>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b30:	9005      	str	r0, [sp, #20]
 8008b32:	3307      	adds	r3, #7
 8008b34:	f023 0307 	bic.w	r3, r3, #7
 8008b38:	f103 0208 	add.w	r2, r3, #8
 8008b3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008b40:	f8d4 b000 	ldr.w	fp, [r4]
 8008b44:	f8c8 2000 	str.w	r2, [r8]
 8008b48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b4c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008b50:	9307      	str	r3, [sp, #28]
 8008b52:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b56:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008b5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b5e:	4b9c      	ldr	r3, [pc, #624]	@ (8008dd0 <_printf_float+0x2c8>)
 8008b60:	f04f 32ff 	mov.w	r2, #4294967295
 8008b64:	f7f8 f802 	bl	8000b6c <__aeabi_dcmpun>
 8008b68:	bb70      	cbnz	r0, 8008bc8 <_printf_float+0xc0>
 8008b6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b6e:	4b98      	ldr	r3, [pc, #608]	@ (8008dd0 <_printf_float+0x2c8>)
 8008b70:	f04f 32ff 	mov.w	r2, #4294967295
 8008b74:	f7f7 ffdc 	bl	8000b30 <__aeabi_dcmple>
 8008b78:	bb30      	cbnz	r0, 8008bc8 <_printf_float+0xc0>
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	4640      	mov	r0, r8
 8008b80:	4649      	mov	r1, r9
 8008b82:	f7f7 ffcb 	bl	8000b1c <__aeabi_dcmplt>
 8008b86:	b110      	cbz	r0, 8008b8e <_printf_float+0x86>
 8008b88:	232d      	movs	r3, #45	@ 0x2d
 8008b8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b8e:	4a91      	ldr	r2, [pc, #580]	@ (8008dd4 <_printf_float+0x2cc>)
 8008b90:	4b91      	ldr	r3, [pc, #580]	@ (8008dd8 <_printf_float+0x2d0>)
 8008b92:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008b96:	bf94      	ite	ls
 8008b98:	4690      	movls	r8, r2
 8008b9a:	4698      	movhi	r8, r3
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	6123      	str	r3, [r4, #16]
 8008ba0:	f02b 0304 	bic.w	r3, fp, #4
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	f04f 0900 	mov.w	r9, #0
 8008baa:	9700      	str	r7, [sp, #0]
 8008bac:	4633      	mov	r3, r6
 8008bae:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	f000 f9d2 	bl	8008f5c <_printf_common>
 8008bb8:	3001      	adds	r0, #1
 8008bba:	f040 808d 	bne.w	8008cd8 <_printf_float+0x1d0>
 8008bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc2:	b00d      	add	sp, #52	@ 0x34
 8008bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc8:	4642      	mov	r2, r8
 8008bca:	464b      	mov	r3, r9
 8008bcc:	4640      	mov	r0, r8
 8008bce:	4649      	mov	r1, r9
 8008bd0:	f7f7 ffcc 	bl	8000b6c <__aeabi_dcmpun>
 8008bd4:	b140      	cbz	r0, 8008be8 <_printf_float+0xe0>
 8008bd6:	464b      	mov	r3, r9
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	bfbc      	itt	lt
 8008bdc:	232d      	movlt	r3, #45	@ 0x2d
 8008bde:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008be2:	4a7e      	ldr	r2, [pc, #504]	@ (8008ddc <_printf_float+0x2d4>)
 8008be4:	4b7e      	ldr	r3, [pc, #504]	@ (8008de0 <_printf_float+0x2d8>)
 8008be6:	e7d4      	b.n	8008b92 <_printf_float+0x8a>
 8008be8:	6863      	ldr	r3, [r4, #4]
 8008bea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008bee:	9206      	str	r2, [sp, #24]
 8008bf0:	1c5a      	adds	r2, r3, #1
 8008bf2:	d13b      	bne.n	8008c6c <_printf_float+0x164>
 8008bf4:	2306      	movs	r3, #6
 8008bf6:	6063      	str	r3, [r4, #4]
 8008bf8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	6022      	str	r2, [r4, #0]
 8008c00:	9303      	str	r3, [sp, #12]
 8008c02:	ab0a      	add	r3, sp, #40	@ 0x28
 8008c04:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008c08:	ab09      	add	r3, sp, #36	@ 0x24
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	6861      	ldr	r1, [r4, #4]
 8008c0e:	ec49 8b10 	vmov	d0, r8, r9
 8008c12:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008c16:	4628      	mov	r0, r5
 8008c18:	f7ff fed6 	bl	80089c8 <__cvt>
 8008c1c:	9b06      	ldr	r3, [sp, #24]
 8008c1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c20:	2b47      	cmp	r3, #71	@ 0x47
 8008c22:	4680      	mov	r8, r0
 8008c24:	d129      	bne.n	8008c7a <_printf_float+0x172>
 8008c26:	1cc8      	adds	r0, r1, #3
 8008c28:	db02      	blt.n	8008c30 <_printf_float+0x128>
 8008c2a:	6863      	ldr	r3, [r4, #4]
 8008c2c:	4299      	cmp	r1, r3
 8008c2e:	dd41      	ble.n	8008cb4 <_printf_float+0x1ac>
 8008c30:	f1aa 0a02 	sub.w	sl, sl, #2
 8008c34:	fa5f fa8a 	uxtb.w	sl, sl
 8008c38:	3901      	subs	r1, #1
 8008c3a:	4652      	mov	r2, sl
 8008c3c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008c40:	9109      	str	r1, [sp, #36]	@ 0x24
 8008c42:	f7ff ff26 	bl	8008a92 <__exponent>
 8008c46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c48:	1813      	adds	r3, r2, r0
 8008c4a:	2a01      	cmp	r2, #1
 8008c4c:	4681      	mov	r9, r0
 8008c4e:	6123      	str	r3, [r4, #16]
 8008c50:	dc02      	bgt.n	8008c58 <_printf_float+0x150>
 8008c52:	6822      	ldr	r2, [r4, #0]
 8008c54:	07d2      	lsls	r2, r2, #31
 8008c56:	d501      	bpl.n	8008c5c <_printf_float+0x154>
 8008c58:	3301      	adds	r3, #1
 8008c5a:	6123      	str	r3, [r4, #16]
 8008c5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d0a2      	beq.n	8008baa <_printf_float+0xa2>
 8008c64:	232d      	movs	r3, #45	@ 0x2d
 8008c66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c6a:	e79e      	b.n	8008baa <_printf_float+0xa2>
 8008c6c:	9a06      	ldr	r2, [sp, #24]
 8008c6e:	2a47      	cmp	r2, #71	@ 0x47
 8008c70:	d1c2      	bne.n	8008bf8 <_printf_float+0xf0>
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1c0      	bne.n	8008bf8 <_printf_float+0xf0>
 8008c76:	2301      	movs	r3, #1
 8008c78:	e7bd      	b.n	8008bf6 <_printf_float+0xee>
 8008c7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008c7e:	d9db      	bls.n	8008c38 <_printf_float+0x130>
 8008c80:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008c84:	d118      	bne.n	8008cb8 <_printf_float+0x1b0>
 8008c86:	2900      	cmp	r1, #0
 8008c88:	6863      	ldr	r3, [r4, #4]
 8008c8a:	dd0b      	ble.n	8008ca4 <_printf_float+0x19c>
 8008c8c:	6121      	str	r1, [r4, #16]
 8008c8e:	b913      	cbnz	r3, 8008c96 <_printf_float+0x18e>
 8008c90:	6822      	ldr	r2, [r4, #0]
 8008c92:	07d0      	lsls	r0, r2, #31
 8008c94:	d502      	bpl.n	8008c9c <_printf_float+0x194>
 8008c96:	3301      	adds	r3, #1
 8008c98:	440b      	add	r3, r1
 8008c9a:	6123      	str	r3, [r4, #16]
 8008c9c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008c9e:	f04f 0900 	mov.w	r9, #0
 8008ca2:	e7db      	b.n	8008c5c <_printf_float+0x154>
 8008ca4:	b913      	cbnz	r3, 8008cac <_printf_float+0x1a4>
 8008ca6:	6822      	ldr	r2, [r4, #0]
 8008ca8:	07d2      	lsls	r2, r2, #31
 8008caa:	d501      	bpl.n	8008cb0 <_printf_float+0x1a8>
 8008cac:	3302      	adds	r3, #2
 8008cae:	e7f4      	b.n	8008c9a <_printf_float+0x192>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e7f2      	b.n	8008c9a <_printf_float+0x192>
 8008cb4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008cb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cba:	4299      	cmp	r1, r3
 8008cbc:	db05      	blt.n	8008cca <_printf_float+0x1c2>
 8008cbe:	6823      	ldr	r3, [r4, #0]
 8008cc0:	6121      	str	r1, [r4, #16]
 8008cc2:	07d8      	lsls	r0, r3, #31
 8008cc4:	d5ea      	bpl.n	8008c9c <_printf_float+0x194>
 8008cc6:	1c4b      	adds	r3, r1, #1
 8008cc8:	e7e7      	b.n	8008c9a <_printf_float+0x192>
 8008cca:	2900      	cmp	r1, #0
 8008ccc:	bfd4      	ite	le
 8008cce:	f1c1 0202 	rsble	r2, r1, #2
 8008cd2:	2201      	movgt	r2, #1
 8008cd4:	4413      	add	r3, r2
 8008cd6:	e7e0      	b.n	8008c9a <_printf_float+0x192>
 8008cd8:	6823      	ldr	r3, [r4, #0]
 8008cda:	055a      	lsls	r2, r3, #21
 8008cdc:	d407      	bmi.n	8008cee <_printf_float+0x1e6>
 8008cde:	6923      	ldr	r3, [r4, #16]
 8008ce0:	4642      	mov	r2, r8
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	47b8      	blx	r7
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d12b      	bne.n	8008d44 <_printf_float+0x23c>
 8008cec:	e767      	b.n	8008bbe <_printf_float+0xb6>
 8008cee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008cf2:	f240 80dd 	bls.w	8008eb0 <_printf_float+0x3a8>
 8008cf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	f7f7 ff03 	bl	8000b08 <__aeabi_dcmpeq>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	d033      	beq.n	8008d6e <_printf_float+0x266>
 8008d06:	4a37      	ldr	r2, [pc, #220]	@ (8008de4 <_printf_float+0x2dc>)
 8008d08:	2301      	movs	r3, #1
 8008d0a:	4631      	mov	r1, r6
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	47b8      	blx	r7
 8008d10:	3001      	adds	r0, #1
 8008d12:	f43f af54 	beq.w	8008bbe <_printf_float+0xb6>
 8008d16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008d1a:	4543      	cmp	r3, r8
 8008d1c:	db02      	blt.n	8008d24 <_printf_float+0x21c>
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	07d8      	lsls	r0, r3, #31
 8008d22:	d50f      	bpl.n	8008d44 <_printf_float+0x23c>
 8008d24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d28:	4631      	mov	r1, r6
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	47b8      	blx	r7
 8008d2e:	3001      	adds	r0, #1
 8008d30:	f43f af45 	beq.w	8008bbe <_printf_float+0xb6>
 8008d34:	f04f 0900 	mov.w	r9, #0
 8008d38:	f108 38ff 	add.w	r8, r8, #4294967295
 8008d3c:	f104 0a1a 	add.w	sl, r4, #26
 8008d40:	45c8      	cmp	r8, r9
 8008d42:	dc09      	bgt.n	8008d58 <_printf_float+0x250>
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	079b      	lsls	r3, r3, #30
 8008d48:	f100 8103 	bmi.w	8008f52 <_printf_float+0x44a>
 8008d4c:	68e0      	ldr	r0, [r4, #12]
 8008d4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d50:	4298      	cmp	r0, r3
 8008d52:	bfb8      	it	lt
 8008d54:	4618      	movlt	r0, r3
 8008d56:	e734      	b.n	8008bc2 <_printf_float+0xba>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	4652      	mov	r2, sl
 8008d5c:	4631      	mov	r1, r6
 8008d5e:	4628      	mov	r0, r5
 8008d60:	47b8      	blx	r7
 8008d62:	3001      	adds	r0, #1
 8008d64:	f43f af2b 	beq.w	8008bbe <_printf_float+0xb6>
 8008d68:	f109 0901 	add.w	r9, r9, #1
 8008d6c:	e7e8      	b.n	8008d40 <_printf_float+0x238>
 8008d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	dc39      	bgt.n	8008de8 <_printf_float+0x2e0>
 8008d74:	4a1b      	ldr	r2, [pc, #108]	@ (8008de4 <_printf_float+0x2dc>)
 8008d76:	2301      	movs	r3, #1
 8008d78:	4631      	mov	r1, r6
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	47b8      	blx	r7
 8008d7e:	3001      	adds	r0, #1
 8008d80:	f43f af1d 	beq.w	8008bbe <_printf_float+0xb6>
 8008d84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008d88:	ea59 0303 	orrs.w	r3, r9, r3
 8008d8c:	d102      	bne.n	8008d94 <_printf_float+0x28c>
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	07d9      	lsls	r1, r3, #31
 8008d92:	d5d7      	bpl.n	8008d44 <_printf_float+0x23c>
 8008d94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d98:	4631      	mov	r1, r6
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	47b8      	blx	r7
 8008d9e:	3001      	adds	r0, #1
 8008da0:	f43f af0d 	beq.w	8008bbe <_printf_float+0xb6>
 8008da4:	f04f 0a00 	mov.w	sl, #0
 8008da8:	f104 0b1a 	add.w	fp, r4, #26
 8008dac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dae:	425b      	negs	r3, r3
 8008db0:	4553      	cmp	r3, sl
 8008db2:	dc01      	bgt.n	8008db8 <_printf_float+0x2b0>
 8008db4:	464b      	mov	r3, r9
 8008db6:	e793      	b.n	8008ce0 <_printf_float+0x1d8>
 8008db8:	2301      	movs	r3, #1
 8008dba:	465a      	mov	r2, fp
 8008dbc:	4631      	mov	r1, r6
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	47b8      	blx	r7
 8008dc2:	3001      	adds	r0, #1
 8008dc4:	f43f aefb 	beq.w	8008bbe <_printf_float+0xb6>
 8008dc8:	f10a 0a01 	add.w	sl, sl, #1
 8008dcc:	e7ee      	b.n	8008dac <_printf_float+0x2a4>
 8008dce:	bf00      	nop
 8008dd0:	7fefffff 	.word	0x7fefffff
 8008dd4:	0800b86d 	.word	0x0800b86d
 8008dd8:	0800b871 	.word	0x0800b871
 8008ddc:	0800b875 	.word	0x0800b875
 8008de0:	0800b879 	.word	0x0800b879
 8008de4:	0800b87d 	.word	0x0800b87d
 8008de8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008dea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008dee:	4553      	cmp	r3, sl
 8008df0:	bfa8      	it	ge
 8008df2:	4653      	movge	r3, sl
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	4699      	mov	r9, r3
 8008df8:	dc36      	bgt.n	8008e68 <_printf_float+0x360>
 8008dfa:	f04f 0b00 	mov.w	fp, #0
 8008dfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e02:	f104 021a 	add.w	r2, r4, #26
 8008e06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008e08:	9306      	str	r3, [sp, #24]
 8008e0a:	eba3 0309 	sub.w	r3, r3, r9
 8008e0e:	455b      	cmp	r3, fp
 8008e10:	dc31      	bgt.n	8008e76 <_printf_float+0x36e>
 8008e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e14:	459a      	cmp	sl, r3
 8008e16:	dc3a      	bgt.n	8008e8e <_printf_float+0x386>
 8008e18:	6823      	ldr	r3, [r4, #0]
 8008e1a:	07da      	lsls	r2, r3, #31
 8008e1c:	d437      	bmi.n	8008e8e <_printf_float+0x386>
 8008e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e20:	ebaa 0903 	sub.w	r9, sl, r3
 8008e24:	9b06      	ldr	r3, [sp, #24]
 8008e26:	ebaa 0303 	sub.w	r3, sl, r3
 8008e2a:	4599      	cmp	r9, r3
 8008e2c:	bfa8      	it	ge
 8008e2e:	4699      	movge	r9, r3
 8008e30:	f1b9 0f00 	cmp.w	r9, #0
 8008e34:	dc33      	bgt.n	8008e9e <_printf_float+0x396>
 8008e36:	f04f 0800 	mov.w	r8, #0
 8008e3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e3e:	f104 0b1a 	add.w	fp, r4, #26
 8008e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e44:	ebaa 0303 	sub.w	r3, sl, r3
 8008e48:	eba3 0309 	sub.w	r3, r3, r9
 8008e4c:	4543      	cmp	r3, r8
 8008e4e:	f77f af79 	ble.w	8008d44 <_printf_float+0x23c>
 8008e52:	2301      	movs	r3, #1
 8008e54:	465a      	mov	r2, fp
 8008e56:	4631      	mov	r1, r6
 8008e58:	4628      	mov	r0, r5
 8008e5a:	47b8      	blx	r7
 8008e5c:	3001      	adds	r0, #1
 8008e5e:	f43f aeae 	beq.w	8008bbe <_printf_float+0xb6>
 8008e62:	f108 0801 	add.w	r8, r8, #1
 8008e66:	e7ec      	b.n	8008e42 <_printf_float+0x33a>
 8008e68:	4642      	mov	r2, r8
 8008e6a:	4631      	mov	r1, r6
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	47b8      	blx	r7
 8008e70:	3001      	adds	r0, #1
 8008e72:	d1c2      	bne.n	8008dfa <_printf_float+0x2f2>
 8008e74:	e6a3      	b.n	8008bbe <_printf_float+0xb6>
 8008e76:	2301      	movs	r3, #1
 8008e78:	4631      	mov	r1, r6
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	9206      	str	r2, [sp, #24]
 8008e7e:	47b8      	blx	r7
 8008e80:	3001      	adds	r0, #1
 8008e82:	f43f ae9c 	beq.w	8008bbe <_printf_float+0xb6>
 8008e86:	9a06      	ldr	r2, [sp, #24]
 8008e88:	f10b 0b01 	add.w	fp, fp, #1
 8008e8c:	e7bb      	b.n	8008e06 <_printf_float+0x2fe>
 8008e8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e92:	4631      	mov	r1, r6
 8008e94:	4628      	mov	r0, r5
 8008e96:	47b8      	blx	r7
 8008e98:	3001      	adds	r0, #1
 8008e9a:	d1c0      	bne.n	8008e1e <_printf_float+0x316>
 8008e9c:	e68f      	b.n	8008bbe <_printf_float+0xb6>
 8008e9e:	9a06      	ldr	r2, [sp, #24]
 8008ea0:	464b      	mov	r3, r9
 8008ea2:	4442      	add	r2, r8
 8008ea4:	4631      	mov	r1, r6
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	47b8      	blx	r7
 8008eaa:	3001      	adds	r0, #1
 8008eac:	d1c3      	bne.n	8008e36 <_printf_float+0x32e>
 8008eae:	e686      	b.n	8008bbe <_printf_float+0xb6>
 8008eb0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008eb4:	f1ba 0f01 	cmp.w	sl, #1
 8008eb8:	dc01      	bgt.n	8008ebe <_printf_float+0x3b6>
 8008eba:	07db      	lsls	r3, r3, #31
 8008ebc:	d536      	bpl.n	8008f2c <_printf_float+0x424>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	4642      	mov	r2, r8
 8008ec2:	4631      	mov	r1, r6
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	47b8      	blx	r7
 8008ec8:	3001      	adds	r0, #1
 8008eca:	f43f ae78 	beq.w	8008bbe <_printf_float+0xb6>
 8008ece:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ed2:	4631      	mov	r1, r6
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	47b8      	blx	r7
 8008ed8:	3001      	adds	r0, #1
 8008eda:	f43f ae70 	beq.w	8008bbe <_printf_float+0xb6>
 8008ede:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008eea:	f7f7 fe0d 	bl	8000b08 <__aeabi_dcmpeq>
 8008eee:	b9c0      	cbnz	r0, 8008f22 <_printf_float+0x41a>
 8008ef0:	4653      	mov	r3, sl
 8008ef2:	f108 0201 	add.w	r2, r8, #1
 8008ef6:	4631      	mov	r1, r6
 8008ef8:	4628      	mov	r0, r5
 8008efa:	47b8      	blx	r7
 8008efc:	3001      	adds	r0, #1
 8008efe:	d10c      	bne.n	8008f1a <_printf_float+0x412>
 8008f00:	e65d      	b.n	8008bbe <_printf_float+0xb6>
 8008f02:	2301      	movs	r3, #1
 8008f04:	465a      	mov	r2, fp
 8008f06:	4631      	mov	r1, r6
 8008f08:	4628      	mov	r0, r5
 8008f0a:	47b8      	blx	r7
 8008f0c:	3001      	adds	r0, #1
 8008f0e:	f43f ae56 	beq.w	8008bbe <_printf_float+0xb6>
 8008f12:	f108 0801 	add.w	r8, r8, #1
 8008f16:	45d0      	cmp	r8, sl
 8008f18:	dbf3      	blt.n	8008f02 <_printf_float+0x3fa>
 8008f1a:	464b      	mov	r3, r9
 8008f1c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008f20:	e6df      	b.n	8008ce2 <_printf_float+0x1da>
 8008f22:	f04f 0800 	mov.w	r8, #0
 8008f26:	f104 0b1a 	add.w	fp, r4, #26
 8008f2a:	e7f4      	b.n	8008f16 <_printf_float+0x40e>
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	4642      	mov	r2, r8
 8008f30:	e7e1      	b.n	8008ef6 <_printf_float+0x3ee>
 8008f32:	2301      	movs	r3, #1
 8008f34:	464a      	mov	r2, r9
 8008f36:	4631      	mov	r1, r6
 8008f38:	4628      	mov	r0, r5
 8008f3a:	47b8      	blx	r7
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	f43f ae3e 	beq.w	8008bbe <_printf_float+0xb6>
 8008f42:	f108 0801 	add.w	r8, r8, #1
 8008f46:	68e3      	ldr	r3, [r4, #12]
 8008f48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f4a:	1a5b      	subs	r3, r3, r1
 8008f4c:	4543      	cmp	r3, r8
 8008f4e:	dcf0      	bgt.n	8008f32 <_printf_float+0x42a>
 8008f50:	e6fc      	b.n	8008d4c <_printf_float+0x244>
 8008f52:	f04f 0800 	mov.w	r8, #0
 8008f56:	f104 0919 	add.w	r9, r4, #25
 8008f5a:	e7f4      	b.n	8008f46 <_printf_float+0x43e>

08008f5c <_printf_common>:
 8008f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f60:	4616      	mov	r6, r2
 8008f62:	4698      	mov	r8, r3
 8008f64:	688a      	ldr	r2, [r1, #8]
 8008f66:	690b      	ldr	r3, [r1, #16]
 8008f68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	bfb8      	it	lt
 8008f70:	4613      	movlt	r3, r2
 8008f72:	6033      	str	r3, [r6, #0]
 8008f74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f78:	4607      	mov	r7, r0
 8008f7a:	460c      	mov	r4, r1
 8008f7c:	b10a      	cbz	r2, 8008f82 <_printf_common+0x26>
 8008f7e:	3301      	adds	r3, #1
 8008f80:	6033      	str	r3, [r6, #0]
 8008f82:	6823      	ldr	r3, [r4, #0]
 8008f84:	0699      	lsls	r1, r3, #26
 8008f86:	bf42      	ittt	mi
 8008f88:	6833      	ldrmi	r3, [r6, #0]
 8008f8a:	3302      	addmi	r3, #2
 8008f8c:	6033      	strmi	r3, [r6, #0]
 8008f8e:	6825      	ldr	r5, [r4, #0]
 8008f90:	f015 0506 	ands.w	r5, r5, #6
 8008f94:	d106      	bne.n	8008fa4 <_printf_common+0x48>
 8008f96:	f104 0a19 	add.w	sl, r4, #25
 8008f9a:	68e3      	ldr	r3, [r4, #12]
 8008f9c:	6832      	ldr	r2, [r6, #0]
 8008f9e:	1a9b      	subs	r3, r3, r2
 8008fa0:	42ab      	cmp	r3, r5
 8008fa2:	dc26      	bgt.n	8008ff2 <_printf_common+0x96>
 8008fa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008fa8:	6822      	ldr	r2, [r4, #0]
 8008faa:	3b00      	subs	r3, #0
 8008fac:	bf18      	it	ne
 8008fae:	2301      	movne	r3, #1
 8008fb0:	0692      	lsls	r2, r2, #26
 8008fb2:	d42b      	bmi.n	800900c <_printf_common+0xb0>
 8008fb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008fb8:	4641      	mov	r1, r8
 8008fba:	4638      	mov	r0, r7
 8008fbc:	47c8      	blx	r9
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	d01e      	beq.n	8009000 <_printf_common+0xa4>
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	6922      	ldr	r2, [r4, #16]
 8008fc6:	f003 0306 	and.w	r3, r3, #6
 8008fca:	2b04      	cmp	r3, #4
 8008fcc:	bf02      	ittt	eq
 8008fce:	68e5      	ldreq	r5, [r4, #12]
 8008fd0:	6833      	ldreq	r3, [r6, #0]
 8008fd2:	1aed      	subeq	r5, r5, r3
 8008fd4:	68a3      	ldr	r3, [r4, #8]
 8008fd6:	bf0c      	ite	eq
 8008fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fdc:	2500      	movne	r5, #0
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	bfc4      	itt	gt
 8008fe2:	1a9b      	subgt	r3, r3, r2
 8008fe4:	18ed      	addgt	r5, r5, r3
 8008fe6:	2600      	movs	r6, #0
 8008fe8:	341a      	adds	r4, #26
 8008fea:	42b5      	cmp	r5, r6
 8008fec:	d11a      	bne.n	8009024 <_printf_common+0xc8>
 8008fee:	2000      	movs	r0, #0
 8008ff0:	e008      	b.n	8009004 <_printf_common+0xa8>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	4652      	mov	r2, sl
 8008ff6:	4641      	mov	r1, r8
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	47c8      	blx	r9
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	d103      	bne.n	8009008 <_printf_common+0xac>
 8009000:	f04f 30ff 	mov.w	r0, #4294967295
 8009004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009008:	3501      	adds	r5, #1
 800900a:	e7c6      	b.n	8008f9a <_printf_common+0x3e>
 800900c:	18e1      	adds	r1, r4, r3
 800900e:	1c5a      	adds	r2, r3, #1
 8009010:	2030      	movs	r0, #48	@ 0x30
 8009012:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009016:	4422      	add	r2, r4
 8009018:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800901c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009020:	3302      	adds	r3, #2
 8009022:	e7c7      	b.n	8008fb4 <_printf_common+0x58>
 8009024:	2301      	movs	r3, #1
 8009026:	4622      	mov	r2, r4
 8009028:	4641      	mov	r1, r8
 800902a:	4638      	mov	r0, r7
 800902c:	47c8      	blx	r9
 800902e:	3001      	adds	r0, #1
 8009030:	d0e6      	beq.n	8009000 <_printf_common+0xa4>
 8009032:	3601      	adds	r6, #1
 8009034:	e7d9      	b.n	8008fea <_printf_common+0x8e>
	...

08009038 <_printf_i>:
 8009038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800903c:	7e0f      	ldrb	r7, [r1, #24]
 800903e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009040:	2f78      	cmp	r7, #120	@ 0x78
 8009042:	4691      	mov	r9, r2
 8009044:	4680      	mov	r8, r0
 8009046:	460c      	mov	r4, r1
 8009048:	469a      	mov	sl, r3
 800904a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800904e:	d807      	bhi.n	8009060 <_printf_i+0x28>
 8009050:	2f62      	cmp	r7, #98	@ 0x62
 8009052:	d80a      	bhi.n	800906a <_printf_i+0x32>
 8009054:	2f00      	cmp	r7, #0
 8009056:	f000 80d2 	beq.w	80091fe <_printf_i+0x1c6>
 800905a:	2f58      	cmp	r7, #88	@ 0x58
 800905c:	f000 80b9 	beq.w	80091d2 <_printf_i+0x19a>
 8009060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009064:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009068:	e03a      	b.n	80090e0 <_printf_i+0xa8>
 800906a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800906e:	2b15      	cmp	r3, #21
 8009070:	d8f6      	bhi.n	8009060 <_printf_i+0x28>
 8009072:	a101      	add	r1, pc, #4	@ (adr r1, 8009078 <_printf_i+0x40>)
 8009074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009078:	080090d1 	.word	0x080090d1
 800907c:	080090e5 	.word	0x080090e5
 8009080:	08009061 	.word	0x08009061
 8009084:	08009061 	.word	0x08009061
 8009088:	08009061 	.word	0x08009061
 800908c:	08009061 	.word	0x08009061
 8009090:	080090e5 	.word	0x080090e5
 8009094:	08009061 	.word	0x08009061
 8009098:	08009061 	.word	0x08009061
 800909c:	08009061 	.word	0x08009061
 80090a0:	08009061 	.word	0x08009061
 80090a4:	080091e5 	.word	0x080091e5
 80090a8:	0800910f 	.word	0x0800910f
 80090ac:	0800919f 	.word	0x0800919f
 80090b0:	08009061 	.word	0x08009061
 80090b4:	08009061 	.word	0x08009061
 80090b8:	08009207 	.word	0x08009207
 80090bc:	08009061 	.word	0x08009061
 80090c0:	0800910f 	.word	0x0800910f
 80090c4:	08009061 	.word	0x08009061
 80090c8:	08009061 	.word	0x08009061
 80090cc:	080091a7 	.word	0x080091a7
 80090d0:	6833      	ldr	r3, [r6, #0]
 80090d2:	1d1a      	adds	r2, r3, #4
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	6032      	str	r2, [r6, #0]
 80090d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80090e0:	2301      	movs	r3, #1
 80090e2:	e09d      	b.n	8009220 <_printf_i+0x1e8>
 80090e4:	6833      	ldr	r3, [r6, #0]
 80090e6:	6820      	ldr	r0, [r4, #0]
 80090e8:	1d19      	adds	r1, r3, #4
 80090ea:	6031      	str	r1, [r6, #0]
 80090ec:	0606      	lsls	r6, r0, #24
 80090ee:	d501      	bpl.n	80090f4 <_printf_i+0xbc>
 80090f0:	681d      	ldr	r5, [r3, #0]
 80090f2:	e003      	b.n	80090fc <_printf_i+0xc4>
 80090f4:	0645      	lsls	r5, r0, #25
 80090f6:	d5fb      	bpl.n	80090f0 <_printf_i+0xb8>
 80090f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80090fc:	2d00      	cmp	r5, #0
 80090fe:	da03      	bge.n	8009108 <_printf_i+0xd0>
 8009100:	232d      	movs	r3, #45	@ 0x2d
 8009102:	426d      	negs	r5, r5
 8009104:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009108:	4859      	ldr	r0, [pc, #356]	@ (8009270 <_printf_i+0x238>)
 800910a:	230a      	movs	r3, #10
 800910c:	e011      	b.n	8009132 <_printf_i+0xfa>
 800910e:	6821      	ldr	r1, [r4, #0]
 8009110:	6833      	ldr	r3, [r6, #0]
 8009112:	0608      	lsls	r0, r1, #24
 8009114:	f853 5b04 	ldr.w	r5, [r3], #4
 8009118:	d402      	bmi.n	8009120 <_printf_i+0xe8>
 800911a:	0649      	lsls	r1, r1, #25
 800911c:	bf48      	it	mi
 800911e:	b2ad      	uxthmi	r5, r5
 8009120:	2f6f      	cmp	r7, #111	@ 0x6f
 8009122:	4853      	ldr	r0, [pc, #332]	@ (8009270 <_printf_i+0x238>)
 8009124:	6033      	str	r3, [r6, #0]
 8009126:	bf14      	ite	ne
 8009128:	230a      	movne	r3, #10
 800912a:	2308      	moveq	r3, #8
 800912c:	2100      	movs	r1, #0
 800912e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009132:	6866      	ldr	r6, [r4, #4]
 8009134:	60a6      	str	r6, [r4, #8]
 8009136:	2e00      	cmp	r6, #0
 8009138:	bfa2      	ittt	ge
 800913a:	6821      	ldrge	r1, [r4, #0]
 800913c:	f021 0104 	bicge.w	r1, r1, #4
 8009140:	6021      	strge	r1, [r4, #0]
 8009142:	b90d      	cbnz	r5, 8009148 <_printf_i+0x110>
 8009144:	2e00      	cmp	r6, #0
 8009146:	d04b      	beq.n	80091e0 <_printf_i+0x1a8>
 8009148:	4616      	mov	r6, r2
 800914a:	fbb5 f1f3 	udiv	r1, r5, r3
 800914e:	fb03 5711 	mls	r7, r3, r1, r5
 8009152:	5dc7      	ldrb	r7, [r0, r7]
 8009154:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009158:	462f      	mov	r7, r5
 800915a:	42bb      	cmp	r3, r7
 800915c:	460d      	mov	r5, r1
 800915e:	d9f4      	bls.n	800914a <_printf_i+0x112>
 8009160:	2b08      	cmp	r3, #8
 8009162:	d10b      	bne.n	800917c <_printf_i+0x144>
 8009164:	6823      	ldr	r3, [r4, #0]
 8009166:	07df      	lsls	r7, r3, #31
 8009168:	d508      	bpl.n	800917c <_printf_i+0x144>
 800916a:	6923      	ldr	r3, [r4, #16]
 800916c:	6861      	ldr	r1, [r4, #4]
 800916e:	4299      	cmp	r1, r3
 8009170:	bfde      	ittt	le
 8009172:	2330      	movle	r3, #48	@ 0x30
 8009174:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009178:	f106 36ff 	addle.w	r6, r6, #4294967295
 800917c:	1b92      	subs	r2, r2, r6
 800917e:	6122      	str	r2, [r4, #16]
 8009180:	f8cd a000 	str.w	sl, [sp]
 8009184:	464b      	mov	r3, r9
 8009186:	aa03      	add	r2, sp, #12
 8009188:	4621      	mov	r1, r4
 800918a:	4640      	mov	r0, r8
 800918c:	f7ff fee6 	bl	8008f5c <_printf_common>
 8009190:	3001      	adds	r0, #1
 8009192:	d14a      	bne.n	800922a <_printf_i+0x1f2>
 8009194:	f04f 30ff 	mov.w	r0, #4294967295
 8009198:	b004      	add	sp, #16
 800919a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	f043 0320 	orr.w	r3, r3, #32
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	4833      	ldr	r0, [pc, #204]	@ (8009274 <_printf_i+0x23c>)
 80091a8:	2778      	movs	r7, #120	@ 0x78
 80091aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	6831      	ldr	r1, [r6, #0]
 80091b2:	061f      	lsls	r7, r3, #24
 80091b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80091b8:	d402      	bmi.n	80091c0 <_printf_i+0x188>
 80091ba:	065f      	lsls	r7, r3, #25
 80091bc:	bf48      	it	mi
 80091be:	b2ad      	uxthmi	r5, r5
 80091c0:	6031      	str	r1, [r6, #0]
 80091c2:	07d9      	lsls	r1, r3, #31
 80091c4:	bf44      	itt	mi
 80091c6:	f043 0320 	orrmi.w	r3, r3, #32
 80091ca:	6023      	strmi	r3, [r4, #0]
 80091cc:	b11d      	cbz	r5, 80091d6 <_printf_i+0x19e>
 80091ce:	2310      	movs	r3, #16
 80091d0:	e7ac      	b.n	800912c <_printf_i+0xf4>
 80091d2:	4827      	ldr	r0, [pc, #156]	@ (8009270 <_printf_i+0x238>)
 80091d4:	e7e9      	b.n	80091aa <_printf_i+0x172>
 80091d6:	6823      	ldr	r3, [r4, #0]
 80091d8:	f023 0320 	bic.w	r3, r3, #32
 80091dc:	6023      	str	r3, [r4, #0]
 80091de:	e7f6      	b.n	80091ce <_printf_i+0x196>
 80091e0:	4616      	mov	r6, r2
 80091e2:	e7bd      	b.n	8009160 <_printf_i+0x128>
 80091e4:	6833      	ldr	r3, [r6, #0]
 80091e6:	6825      	ldr	r5, [r4, #0]
 80091e8:	6961      	ldr	r1, [r4, #20]
 80091ea:	1d18      	adds	r0, r3, #4
 80091ec:	6030      	str	r0, [r6, #0]
 80091ee:	062e      	lsls	r6, r5, #24
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	d501      	bpl.n	80091f8 <_printf_i+0x1c0>
 80091f4:	6019      	str	r1, [r3, #0]
 80091f6:	e002      	b.n	80091fe <_printf_i+0x1c6>
 80091f8:	0668      	lsls	r0, r5, #25
 80091fa:	d5fb      	bpl.n	80091f4 <_printf_i+0x1bc>
 80091fc:	8019      	strh	r1, [r3, #0]
 80091fe:	2300      	movs	r3, #0
 8009200:	6123      	str	r3, [r4, #16]
 8009202:	4616      	mov	r6, r2
 8009204:	e7bc      	b.n	8009180 <_printf_i+0x148>
 8009206:	6833      	ldr	r3, [r6, #0]
 8009208:	1d1a      	adds	r2, r3, #4
 800920a:	6032      	str	r2, [r6, #0]
 800920c:	681e      	ldr	r6, [r3, #0]
 800920e:	6862      	ldr	r2, [r4, #4]
 8009210:	2100      	movs	r1, #0
 8009212:	4630      	mov	r0, r6
 8009214:	f7f6 fffc 	bl	8000210 <memchr>
 8009218:	b108      	cbz	r0, 800921e <_printf_i+0x1e6>
 800921a:	1b80      	subs	r0, r0, r6
 800921c:	6060      	str	r0, [r4, #4]
 800921e:	6863      	ldr	r3, [r4, #4]
 8009220:	6123      	str	r3, [r4, #16]
 8009222:	2300      	movs	r3, #0
 8009224:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009228:	e7aa      	b.n	8009180 <_printf_i+0x148>
 800922a:	6923      	ldr	r3, [r4, #16]
 800922c:	4632      	mov	r2, r6
 800922e:	4649      	mov	r1, r9
 8009230:	4640      	mov	r0, r8
 8009232:	47d0      	blx	sl
 8009234:	3001      	adds	r0, #1
 8009236:	d0ad      	beq.n	8009194 <_printf_i+0x15c>
 8009238:	6823      	ldr	r3, [r4, #0]
 800923a:	079b      	lsls	r3, r3, #30
 800923c:	d413      	bmi.n	8009266 <_printf_i+0x22e>
 800923e:	68e0      	ldr	r0, [r4, #12]
 8009240:	9b03      	ldr	r3, [sp, #12]
 8009242:	4298      	cmp	r0, r3
 8009244:	bfb8      	it	lt
 8009246:	4618      	movlt	r0, r3
 8009248:	e7a6      	b.n	8009198 <_printf_i+0x160>
 800924a:	2301      	movs	r3, #1
 800924c:	4632      	mov	r2, r6
 800924e:	4649      	mov	r1, r9
 8009250:	4640      	mov	r0, r8
 8009252:	47d0      	blx	sl
 8009254:	3001      	adds	r0, #1
 8009256:	d09d      	beq.n	8009194 <_printf_i+0x15c>
 8009258:	3501      	adds	r5, #1
 800925a:	68e3      	ldr	r3, [r4, #12]
 800925c:	9903      	ldr	r1, [sp, #12]
 800925e:	1a5b      	subs	r3, r3, r1
 8009260:	42ab      	cmp	r3, r5
 8009262:	dcf2      	bgt.n	800924a <_printf_i+0x212>
 8009264:	e7eb      	b.n	800923e <_printf_i+0x206>
 8009266:	2500      	movs	r5, #0
 8009268:	f104 0619 	add.w	r6, r4, #25
 800926c:	e7f5      	b.n	800925a <_printf_i+0x222>
 800926e:	bf00      	nop
 8009270:	0800b87f 	.word	0x0800b87f
 8009274:	0800b890 	.word	0x0800b890

08009278 <std>:
 8009278:	2300      	movs	r3, #0
 800927a:	b510      	push	{r4, lr}
 800927c:	4604      	mov	r4, r0
 800927e:	e9c0 3300 	strd	r3, r3, [r0]
 8009282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009286:	6083      	str	r3, [r0, #8]
 8009288:	8181      	strh	r1, [r0, #12]
 800928a:	6643      	str	r3, [r0, #100]	@ 0x64
 800928c:	81c2      	strh	r2, [r0, #14]
 800928e:	6183      	str	r3, [r0, #24]
 8009290:	4619      	mov	r1, r3
 8009292:	2208      	movs	r2, #8
 8009294:	305c      	adds	r0, #92	@ 0x5c
 8009296:	f000 f914 	bl	80094c2 <memset>
 800929a:	4b0d      	ldr	r3, [pc, #52]	@ (80092d0 <std+0x58>)
 800929c:	6263      	str	r3, [r4, #36]	@ 0x24
 800929e:	4b0d      	ldr	r3, [pc, #52]	@ (80092d4 <std+0x5c>)
 80092a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80092a2:	4b0d      	ldr	r3, [pc, #52]	@ (80092d8 <std+0x60>)
 80092a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80092a6:	4b0d      	ldr	r3, [pc, #52]	@ (80092dc <std+0x64>)
 80092a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80092aa:	4b0d      	ldr	r3, [pc, #52]	@ (80092e0 <std+0x68>)
 80092ac:	6224      	str	r4, [r4, #32]
 80092ae:	429c      	cmp	r4, r3
 80092b0:	d006      	beq.n	80092c0 <std+0x48>
 80092b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80092b6:	4294      	cmp	r4, r2
 80092b8:	d002      	beq.n	80092c0 <std+0x48>
 80092ba:	33d0      	adds	r3, #208	@ 0xd0
 80092bc:	429c      	cmp	r4, r3
 80092be:	d105      	bne.n	80092cc <std+0x54>
 80092c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80092c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092c8:	f000 b98a 	b.w	80095e0 <__retarget_lock_init_recursive>
 80092cc:	bd10      	pop	{r4, pc}
 80092ce:	bf00      	nop
 80092d0:	0800943d 	.word	0x0800943d
 80092d4:	0800945f 	.word	0x0800945f
 80092d8:	08009497 	.word	0x08009497
 80092dc:	080094bb 	.word	0x080094bb
 80092e0:	20000bc0 	.word	0x20000bc0

080092e4 <stdio_exit_handler>:
 80092e4:	4a02      	ldr	r2, [pc, #8]	@ (80092f0 <stdio_exit_handler+0xc>)
 80092e6:	4903      	ldr	r1, [pc, #12]	@ (80092f4 <stdio_exit_handler+0x10>)
 80092e8:	4803      	ldr	r0, [pc, #12]	@ (80092f8 <stdio_exit_handler+0x14>)
 80092ea:	f000 b869 	b.w	80093c0 <_fwalk_sglue>
 80092ee:	bf00      	nop
 80092f0:	20000010 	.word	0x20000010
 80092f4:	0800af3d 	.word	0x0800af3d
 80092f8:	20000020 	.word	0x20000020

080092fc <cleanup_stdio>:
 80092fc:	6841      	ldr	r1, [r0, #4]
 80092fe:	4b0c      	ldr	r3, [pc, #48]	@ (8009330 <cleanup_stdio+0x34>)
 8009300:	4299      	cmp	r1, r3
 8009302:	b510      	push	{r4, lr}
 8009304:	4604      	mov	r4, r0
 8009306:	d001      	beq.n	800930c <cleanup_stdio+0x10>
 8009308:	f001 fe18 	bl	800af3c <_fflush_r>
 800930c:	68a1      	ldr	r1, [r4, #8]
 800930e:	4b09      	ldr	r3, [pc, #36]	@ (8009334 <cleanup_stdio+0x38>)
 8009310:	4299      	cmp	r1, r3
 8009312:	d002      	beq.n	800931a <cleanup_stdio+0x1e>
 8009314:	4620      	mov	r0, r4
 8009316:	f001 fe11 	bl	800af3c <_fflush_r>
 800931a:	68e1      	ldr	r1, [r4, #12]
 800931c:	4b06      	ldr	r3, [pc, #24]	@ (8009338 <cleanup_stdio+0x3c>)
 800931e:	4299      	cmp	r1, r3
 8009320:	d004      	beq.n	800932c <cleanup_stdio+0x30>
 8009322:	4620      	mov	r0, r4
 8009324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009328:	f001 be08 	b.w	800af3c <_fflush_r>
 800932c:	bd10      	pop	{r4, pc}
 800932e:	bf00      	nop
 8009330:	20000bc0 	.word	0x20000bc0
 8009334:	20000c28 	.word	0x20000c28
 8009338:	20000c90 	.word	0x20000c90

0800933c <global_stdio_init.part.0>:
 800933c:	b510      	push	{r4, lr}
 800933e:	4b0b      	ldr	r3, [pc, #44]	@ (800936c <global_stdio_init.part.0+0x30>)
 8009340:	4c0b      	ldr	r4, [pc, #44]	@ (8009370 <global_stdio_init.part.0+0x34>)
 8009342:	4a0c      	ldr	r2, [pc, #48]	@ (8009374 <global_stdio_init.part.0+0x38>)
 8009344:	601a      	str	r2, [r3, #0]
 8009346:	4620      	mov	r0, r4
 8009348:	2200      	movs	r2, #0
 800934a:	2104      	movs	r1, #4
 800934c:	f7ff ff94 	bl	8009278 <std>
 8009350:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009354:	2201      	movs	r2, #1
 8009356:	2109      	movs	r1, #9
 8009358:	f7ff ff8e 	bl	8009278 <std>
 800935c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009360:	2202      	movs	r2, #2
 8009362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009366:	2112      	movs	r1, #18
 8009368:	f7ff bf86 	b.w	8009278 <std>
 800936c:	20000cf8 	.word	0x20000cf8
 8009370:	20000bc0 	.word	0x20000bc0
 8009374:	080092e5 	.word	0x080092e5

08009378 <__sfp_lock_acquire>:
 8009378:	4801      	ldr	r0, [pc, #4]	@ (8009380 <__sfp_lock_acquire+0x8>)
 800937a:	f000 b932 	b.w	80095e2 <__retarget_lock_acquire_recursive>
 800937e:	bf00      	nop
 8009380:	20000d01 	.word	0x20000d01

08009384 <__sfp_lock_release>:
 8009384:	4801      	ldr	r0, [pc, #4]	@ (800938c <__sfp_lock_release+0x8>)
 8009386:	f000 b92d 	b.w	80095e4 <__retarget_lock_release_recursive>
 800938a:	bf00      	nop
 800938c:	20000d01 	.word	0x20000d01

08009390 <__sinit>:
 8009390:	b510      	push	{r4, lr}
 8009392:	4604      	mov	r4, r0
 8009394:	f7ff fff0 	bl	8009378 <__sfp_lock_acquire>
 8009398:	6a23      	ldr	r3, [r4, #32]
 800939a:	b11b      	cbz	r3, 80093a4 <__sinit+0x14>
 800939c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093a0:	f7ff bff0 	b.w	8009384 <__sfp_lock_release>
 80093a4:	4b04      	ldr	r3, [pc, #16]	@ (80093b8 <__sinit+0x28>)
 80093a6:	6223      	str	r3, [r4, #32]
 80093a8:	4b04      	ldr	r3, [pc, #16]	@ (80093bc <__sinit+0x2c>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d1f5      	bne.n	800939c <__sinit+0xc>
 80093b0:	f7ff ffc4 	bl	800933c <global_stdio_init.part.0>
 80093b4:	e7f2      	b.n	800939c <__sinit+0xc>
 80093b6:	bf00      	nop
 80093b8:	080092fd 	.word	0x080092fd
 80093bc:	20000cf8 	.word	0x20000cf8

080093c0 <_fwalk_sglue>:
 80093c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093c4:	4607      	mov	r7, r0
 80093c6:	4688      	mov	r8, r1
 80093c8:	4614      	mov	r4, r2
 80093ca:	2600      	movs	r6, #0
 80093cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093d0:	f1b9 0901 	subs.w	r9, r9, #1
 80093d4:	d505      	bpl.n	80093e2 <_fwalk_sglue+0x22>
 80093d6:	6824      	ldr	r4, [r4, #0]
 80093d8:	2c00      	cmp	r4, #0
 80093da:	d1f7      	bne.n	80093cc <_fwalk_sglue+0xc>
 80093dc:	4630      	mov	r0, r6
 80093de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093e2:	89ab      	ldrh	r3, [r5, #12]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d907      	bls.n	80093f8 <_fwalk_sglue+0x38>
 80093e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093ec:	3301      	adds	r3, #1
 80093ee:	d003      	beq.n	80093f8 <_fwalk_sglue+0x38>
 80093f0:	4629      	mov	r1, r5
 80093f2:	4638      	mov	r0, r7
 80093f4:	47c0      	blx	r8
 80093f6:	4306      	orrs	r6, r0
 80093f8:	3568      	adds	r5, #104	@ 0x68
 80093fa:	e7e9      	b.n	80093d0 <_fwalk_sglue+0x10>

080093fc <siprintf>:
 80093fc:	b40e      	push	{r1, r2, r3}
 80093fe:	b500      	push	{lr}
 8009400:	b09c      	sub	sp, #112	@ 0x70
 8009402:	ab1d      	add	r3, sp, #116	@ 0x74
 8009404:	9002      	str	r0, [sp, #8]
 8009406:	9006      	str	r0, [sp, #24]
 8009408:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800940c:	4809      	ldr	r0, [pc, #36]	@ (8009434 <siprintf+0x38>)
 800940e:	9107      	str	r1, [sp, #28]
 8009410:	9104      	str	r1, [sp, #16]
 8009412:	4909      	ldr	r1, [pc, #36]	@ (8009438 <siprintf+0x3c>)
 8009414:	f853 2b04 	ldr.w	r2, [r3], #4
 8009418:	9105      	str	r1, [sp, #20]
 800941a:	6800      	ldr	r0, [r0, #0]
 800941c:	9301      	str	r3, [sp, #4]
 800941e:	a902      	add	r1, sp, #8
 8009420:	f001 fc0c 	bl	800ac3c <_svfiprintf_r>
 8009424:	9b02      	ldr	r3, [sp, #8]
 8009426:	2200      	movs	r2, #0
 8009428:	701a      	strb	r2, [r3, #0]
 800942a:	b01c      	add	sp, #112	@ 0x70
 800942c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009430:	b003      	add	sp, #12
 8009432:	4770      	bx	lr
 8009434:	2000001c 	.word	0x2000001c
 8009438:	ffff0208 	.word	0xffff0208

0800943c <__sread>:
 800943c:	b510      	push	{r4, lr}
 800943e:	460c      	mov	r4, r1
 8009440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009444:	f000 f87e 	bl	8009544 <_read_r>
 8009448:	2800      	cmp	r0, #0
 800944a:	bfab      	itete	ge
 800944c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800944e:	89a3      	ldrhlt	r3, [r4, #12]
 8009450:	181b      	addge	r3, r3, r0
 8009452:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009456:	bfac      	ite	ge
 8009458:	6563      	strge	r3, [r4, #84]	@ 0x54
 800945a:	81a3      	strhlt	r3, [r4, #12]
 800945c:	bd10      	pop	{r4, pc}

0800945e <__swrite>:
 800945e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009462:	461f      	mov	r7, r3
 8009464:	898b      	ldrh	r3, [r1, #12]
 8009466:	05db      	lsls	r3, r3, #23
 8009468:	4605      	mov	r5, r0
 800946a:	460c      	mov	r4, r1
 800946c:	4616      	mov	r6, r2
 800946e:	d505      	bpl.n	800947c <__swrite+0x1e>
 8009470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009474:	2302      	movs	r3, #2
 8009476:	2200      	movs	r2, #0
 8009478:	f000 f852 	bl	8009520 <_lseek_r>
 800947c:	89a3      	ldrh	r3, [r4, #12]
 800947e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009482:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009486:	81a3      	strh	r3, [r4, #12]
 8009488:	4632      	mov	r2, r6
 800948a:	463b      	mov	r3, r7
 800948c:	4628      	mov	r0, r5
 800948e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009492:	f000 b869 	b.w	8009568 <_write_r>

08009496 <__sseek>:
 8009496:	b510      	push	{r4, lr}
 8009498:	460c      	mov	r4, r1
 800949a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800949e:	f000 f83f 	bl	8009520 <_lseek_r>
 80094a2:	1c43      	adds	r3, r0, #1
 80094a4:	89a3      	ldrh	r3, [r4, #12]
 80094a6:	bf15      	itete	ne
 80094a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80094aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80094ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80094b2:	81a3      	strheq	r3, [r4, #12]
 80094b4:	bf18      	it	ne
 80094b6:	81a3      	strhne	r3, [r4, #12]
 80094b8:	bd10      	pop	{r4, pc}

080094ba <__sclose>:
 80094ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094be:	f000 b81f 	b.w	8009500 <_close_r>

080094c2 <memset>:
 80094c2:	4402      	add	r2, r0
 80094c4:	4603      	mov	r3, r0
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d100      	bne.n	80094cc <memset+0xa>
 80094ca:	4770      	bx	lr
 80094cc:	f803 1b01 	strb.w	r1, [r3], #1
 80094d0:	e7f9      	b.n	80094c6 <memset+0x4>

080094d2 <strncmp>:
 80094d2:	b510      	push	{r4, lr}
 80094d4:	b16a      	cbz	r2, 80094f2 <strncmp+0x20>
 80094d6:	3901      	subs	r1, #1
 80094d8:	1884      	adds	r4, r0, r2
 80094da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094de:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d103      	bne.n	80094ee <strncmp+0x1c>
 80094e6:	42a0      	cmp	r0, r4
 80094e8:	d001      	beq.n	80094ee <strncmp+0x1c>
 80094ea:	2a00      	cmp	r2, #0
 80094ec:	d1f5      	bne.n	80094da <strncmp+0x8>
 80094ee:	1ad0      	subs	r0, r2, r3
 80094f0:	bd10      	pop	{r4, pc}
 80094f2:	4610      	mov	r0, r2
 80094f4:	e7fc      	b.n	80094f0 <strncmp+0x1e>
	...

080094f8 <_localeconv_r>:
 80094f8:	4800      	ldr	r0, [pc, #0]	@ (80094fc <_localeconv_r+0x4>)
 80094fa:	4770      	bx	lr
 80094fc:	2000015c 	.word	0x2000015c

08009500 <_close_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	4d06      	ldr	r5, [pc, #24]	@ (800951c <_close_r+0x1c>)
 8009504:	2300      	movs	r3, #0
 8009506:	4604      	mov	r4, r0
 8009508:	4608      	mov	r0, r1
 800950a:	602b      	str	r3, [r5, #0]
 800950c:	f7f8 fd7a 	bl	8002004 <_close>
 8009510:	1c43      	adds	r3, r0, #1
 8009512:	d102      	bne.n	800951a <_close_r+0x1a>
 8009514:	682b      	ldr	r3, [r5, #0]
 8009516:	b103      	cbz	r3, 800951a <_close_r+0x1a>
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	bd38      	pop	{r3, r4, r5, pc}
 800951c:	20000cfc 	.word	0x20000cfc

08009520 <_lseek_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4d07      	ldr	r5, [pc, #28]	@ (8009540 <_lseek_r+0x20>)
 8009524:	4604      	mov	r4, r0
 8009526:	4608      	mov	r0, r1
 8009528:	4611      	mov	r1, r2
 800952a:	2200      	movs	r2, #0
 800952c:	602a      	str	r2, [r5, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	f7f8 fd8f 	bl	8002052 <_lseek>
 8009534:	1c43      	adds	r3, r0, #1
 8009536:	d102      	bne.n	800953e <_lseek_r+0x1e>
 8009538:	682b      	ldr	r3, [r5, #0]
 800953a:	b103      	cbz	r3, 800953e <_lseek_r+0x1e>
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	bd38      	pop	{r3, r4, r5, pc}
 8009540:	20000cfc 	.word	0x20000cfc

08009544 <_read_r>:
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	4d07      	ldr	r5, [pc, #28]	@ (8009564 <_read_r+0x20>)
 8009548:	4604      	mov	r4, r0
 800954a:	4608      	mov	r0, r1
 800954c:	4611      	mov	r1, r2
 800954e:	2200      	movs	r2, #0
 8009550:	602a      	str	r2, [r5, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	f7f8 fd1d 	bl	8001f92 <_read>
 8009558:	1c43      	adds	r3, r0, #1
 800955a:	d102      	bne.n	8009562 <_read_r+0x1e>
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	b103      	cbz	r3, 8009562 <_read_r+0x1e>
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	bd38      	pop	{r3, r4, r5, pc}
 8009564:	20000cfc 	.word	0x20000cfc

08009568 <_write_r>:
 8009568:	b538      	push	{r3, r4, r5, lr}
 800956a:	4d07      	ldr	r5, [pc, #28]	@ (8009588 <_write_r+0x20>)
 800956c:	4604      	mov	r4, r0
 800956e:	4608      	mov	r0, r1
 8009570:	4611      	mov	r1, r2
 8009572:	2200      	movs	r2, #0
 8009574:	602a      	str	r2, [r5, #0]
 8009576:	461a      	mov	r2, r3
 8009578:	f7f8 fd28 	bl	8001fcc <_write>
 800957c:	1c43      	adds	r3, r0, #1
 800957e:	d102      	bne.n	8009586 <_write_r+0x1e>
 8009580:	682b      	ldr	r3, [r5, #0]
 8009582:	b103      	cbz	r3, 8009586 <_write_r+0x1e>
 8009584:	6023      	str	r3, [r4, #0]
 8009586:	bd38      	pop	{r3, r4, r5, pc}
 8009588:	20000cfc 	.word	0x20000cfc

0800958c <__errno>:
 800958c:	4b01      	ldr	r3, [pc, #4]	@ (8009594 <__errno+0x8>)
 800958e:	6818      	ldr	r0, [r3, #0]
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	2000001c 	.word	0x2000001c

08009598 <__libc_init_array>:
 8009598:	b570      	push	{r4, r5, r6, lr}
 800959a:	4d0d      	ldr	r5, [pc, #52]	@ (80095d0 <__libc_init_array+0x38>)
 800959c:	4c0d      	ldr	r4, [pc, #52]	@ (80095d4 <__libc_init_array+0x3c>)
 800959e:	1b64      	subs	r4, r4, r5
 80095a0:	10a4      	asrs	r4, r4, #2
 80095a2:	2600      	movs	r6, #0
 80095a4:	42a6      	cmp	r6, r4
 80095a6:	d109      	bne.n	80095bc <__libc_init_array+0x24>
 80095a8:	4d0b      	ldr	r5, [pc, #44]	@ (80095d8 <__libc_init_array+0x40>)
 80095aa:	4c0c      	ldr	r4, [pc, #48]	@ (80095dc <__libc_init_array+0x44>)
 80095ac:	f002 f864 	bl	800b678 <_init>
 80095b0:	1b64      	subs	r4, r4, r5
 80095b2:	10a4      	asrs	r4, r4, #2
 80095b4:	2600      	movs	r6, #0
 80095b6:	42a6      	cmp	r6, r4
 80095b8:	d105      	bne.n	80095c6 <__libc_init_array+0x2e>
 80095ba:	bd70      	pop	{r4, r5, r6, pc}
 80095bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80095c0:	4798      	blx	r3
 80095c2:	3601      	adds	r6, #1
 80095c4:	e7ee      	b.n	80095a4 <__libc_init_array+0xc>
 80095c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ca:	4798      	blx	r3
 80095cc:	3601      	adds	r6, #1
 80095ce:	e7f2      	b.n	80095b6 <__libc_init_array+0x1e>
 80095d0:	0800bae8 	.word	0x0800bae8
 80095d4:	0800bae8 	.word	0x0800bae8
 80095d8:	0800bae8 	.word	0x0800bae8
 80095dc:	0800baec 	.word	0x0800baec

080095e0 <__retarget_lock_init_recursive>:
 80095e0:	4770      	bx	lr

080095e2 <__retarget_lock_acquire_recursive>:
 80095e2:	4770      	bx	lr

080095e4 <__retarget_lock_release_recursive>:
 80095e4:	4770      	bx	lr

080095e6 <quorem>:
 80095e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ea:	6903      	ldr	r3, [r0, #16]
 80095ec:	690c      	ldr	r4, [r1, #16]
 80095ee:	42a3      	cmp	r3, r4
 80095f0:	4607      	mov	r7, r0
 80095f2:	db7e      	blt.n	80096f2 <quorem+0x10c>
 80095f4:	3c01      	subs	r4, #1
 80095f6:	f101 0814 	add.w	r8, r1, #20
 80095fa:	00a3      	lsls	r3, r4, #2
 80095fc:	f100 0514 	add.w	r5, r0, #20
 8009600:	9300      	str	r3, [sp, #0]
 8009602:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009606:	9301      	str	r3, [sp, #4]
 8009608:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800960c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009610:	3301      	adds	r3, #1
 8009612:	429a      	cmp	r2, r3
 8009614:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009618:	fbb2 f6f3 	udiv	r6, r2, r3
 800961c:	d32e      	bcc.n	800967c <quorem+0x96>
 800961e:	f04f 0a00 	mov.w	sl, #0
 8009622:	46c4      	mov	ip, r8
 8009624:	46ae      	mov	lr, r5
 8009626:	46d3      	mov	fp, sl
 8009628:	f85c 3b04 	ldr.w	r3, [ip], #4
 800962c:	b298      	uxth	r0, r3
 800962e:	fb06 a000 	mla	r0, r6, r0, sl
 8009632:	0c02      	lsrs	r2, r0, #16
 8009634:	0c1b      	lsrs	r3, r3, #16
 8009636:	fb06 2303 	mla	r3, r6, r3, r2
 800963a:	f8de 2000 	ldr.w	r2, [lr]
 800963e:	b280      	uxth	r0, r0
 8009640:	b292      	uxth	r2, r2
 8009642:	1a12      	subs	r2, r2, r0
 8009644:	445a      	add	r2, fp
 8009646:	f8de 0000 	ldr.w	r0, [lr]
 800964a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800964e:	b29b      	uxth	r3, r3
 8009650:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009654:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009658:	b292      	uxth	r2, r2
 800965a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800965e:	45e1      	cmp	r9, ip
 8009660:	f84e 2b04 	str.w	r2, [lr], #4
 8009664:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009668:	d2de      	bcs.n	8009628 <quorem+0x42>
 800966a:	9b00      	ldr	r3, [sp, #0]
 800966c:	58eb      	ldr	r3, [r5, r3]
 800966e:	b92b      	cbnz	r3, 800967c <quorem+0x96>
 8009670:	9b01      	ldr	r3, [sp, #4]
 8009672:	3b04      	subs	r3, #4
 8009674:	429d      	cmp	r5, r3
 8009676:	461a      	mov	r2, r3
 8009678:	d32f      	bcc.n	80096da <quorem+0xf4>
 800967a:	613c      	str	r4, [r7, #16]
 800967c:	4638      	mov	r0, r7
 800967e:	f001 f979 	bl	800a974 <__mcmp>
 8009682:	2800      	cmp	r0, #0
 8009684:	db25      	blt.n	80096d2 <quorem+0xec>
 8009686:	4629      	mov	r1, r5
 8009688:	2000      	movs	r0, #0
 800968a:	f858 2b04 	ldr.w	r2, [r8], #4
 800968e:	f8d1 c000 	ldr.w	ip, [r1]
 8009692:	fa1f fe82 	uxth.w	lr, r2
 8009696:	fa1f f38c 	uxth.w	r3, ip
 800969a:	eba3 030e 	sub.w	r3, r3, lr
 800969e:	4403      	add	r3, r0
 80096a0:	0c12      	lsrs	r2, r2, #16
 80096a2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80096a6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096b0:	45c1      	cmp	r9, r8
 80096b2:	f841 3b04 	str.w	r3, [r1], #4
 80096b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80096ba:	d2e6      	bcs.n	800968a <quorem+0xa4>
 80096bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096c4:	b922      	cbnz	r2, 80096d0 <quorem+0xea>
 80096c6:	3b04      	subs	r3, #4
 80096c8:	429d      	cmp	r5, r3
 80096ca:	461a      	mov	r2, r3
 80096cc:	d30b      	bcc.n	80096e6 <quorem+0x100>
 80096ce:	613c      	str	r4, [r7, #16]
 80096d0:	3601      	adds	r6, #1
 80096d2:	4630      	mov	r0, r6
 80096d4:	b003      	add	sp, #12
 80096d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096da:	6812      	ldr	r2, [r2, #0]
 80096dc:	3b04      	subs	r3, #4
 80096de:	2a00      	cmp	r2, #0
 80096e0:	d1cb      	bne.n	800967a <quorem+0x94>
 80096e2:	3c01      	subs	r4, #1
 80096e4:	e7c6      	b.n	8009674 <quorem+0x8e>
 80096e6:	6812      	ldr	r2, [r2, #0]
 80096e8:	3b04      	subs	r3, #4
 80096ea:	2a00      	cmp	r2, #0
 80096ec:	d1ef      	bne.n	80096ce <quorem+0xe8>
 80096ee:	3c01      	subs	r4, #1
 80096f0:	e7ea      	b.n	80096c8 <quorem+0xe2>
 80096f2:	2000      	movs	r0, #0
 80096f4:	e7ee      	b.n	80096d4 <quorem+0xee>
	...

080096f8 <_dtoa_r>:
 80096f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fc:	69c7      	ldr	r7, [r0, #28]
 80096fe:	b099      	sub	sp, #100	@ 0x64
 8009700:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009704:	ec55 4b10 	vmov	r4, r5, d0
 8009708:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800970a:	9109      	str	r1, [sp, #36]	@ 0x24
 800970c:	4683      	mov	fp, r0
 800970e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009710:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009712:	b97f      	cbnz	r7, 8009734 <_dtoa_r+0x3c>
 8009714:	2010      	movs	r0, #16
 8009716:	f000 fdfd 	bl	800a314 <malloc>
 800971a:	4602      	mov	r2, r0
 800971c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009720:	b920      	cbnz	r0, 800972c <_dtoa_r+0x34>
 8009722:	4ba7      	ldr	r3, [pc, #668]	@ (80099c0 <_dtoa_r+0x2c8>)
 8009724:	21ef      	movs	r1, #239	@ 0xef
 8009726:	48a7      	ldr	r0, [pc, #668]	@ (80099c4 <_dtoa_r+0x2cc>)
 8009728:	f001 fc68 	bl	800affc <__assert_func>
 800972c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009730:	6007      	str	r7, [r0, #0]
 8009732:	60c7      	str	r7, [r0, #12]
 8009734:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009738:	6819      	ldr	r1, [r3, #0]
 800973a:	b159      	cbz	r1, 8009754 <_dtoa_r+0x5c>
 800973c:	685a      	ldr	r2, [r3, #4]
 800973e:	604a      	str	r2, [r1, #4]
 8009740:	2301      	movs	r3, #1
 8009742:	4093      	lsls	r3, r2
 8009744:	608b      	str	r3, [r1, #8]
 8009746:	4658      	mov	r0, fp
 8009748:	f000 feda 	bl	800a500 <_Bfree>
 800974c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009750:	2200      	movs	r2, #0
 8009752:	601a      	str	r2, [r3, #0]
 8009754:	1e2b      	subs	r3, r5, #0
 8009756:	bfb9      	ittee	lt
 8009758:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800975c:	9303      	strlt	r3, [sp, #12]
 800975e:	2300      	movge	r3, #0
 8009760:	6033      	strge	r3, [r6, #0]
 8009762:	9f03      	ldr	r7, [sp, #12]
 8009764:	4b98      	ldr	r3, [pc, #608]	@ (80099c8 <_dtoa_r+0x2d0>)
 8009766:	bfbc      	itt	lt
 8009768:	2201      	movlt	r2, #1
 800976a:	6032      	strlt	r2, [r6, #0]
 800976c:	43bb      	bics	r3, r7
 800976e:	d112      	bne.n	8009796 <_dtoa_r+0x9e>
 8009770:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009772:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009776:	6013      	str	r3, [r2, #0]
 8009778:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800977c:	4323      	orrs	r3, r4
 800977e:	f000 854d 	beq.w	800a21c <_dtoa_r+0xb24>
 8009782:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009784:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80099dc <_dtoa_r+0x2e4>
 8009788:	2b00      	cmp	r3, #0
 800978a:	f000 854f 	beq.w	800a22c <_dtoa_r+0xb34>
 800978e:	f10a 0303 	add.w	r3, sl, #3
 8009792:	f000 bd49 	b.w	800a228 <_dtoa_r+0xb30>
 8009796:	ed9d 7b02 	vldr	d7, [sp, #8]
 800979a:	2200      	movs	r2, #0
 800979c:	ec51 0b17 	vmov	r0, r1, d7
 80097a0:	2300      	movs	r3, #0
 80097a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80097a6:	f7f7 f9af 	bl	8000b08 <__aeabi_dcmpeq>
 80097aa:	4680      	mov	r8, r0
 80097ac:	b158      	cbz	r0, 80097c6 <_dtoa_r+0xce>
 80097ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80097b0:	2301      	movs	r3, #1
 80097b2:	6013      	str	r3, [r2, #0]
 80097b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80097b6:	b113      	cbz	r3, 80097be <_dtoa_r+0xc6>
 80097b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80097ba:	4b84      	ldr	r3, [pc, #528]	@ (80099cc <_dtoa_r+0x2d4>)
 80097bc:	6013      	str	r3, [r2, #0]
 80097be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80099e0 <_dtoa_r+0x2e8>
 80097c2:	f000 bd33 	b.w	800a22c <_dtoa_r+0xb34>
 80097c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80097ca:	aa16      	add	r2, sp, #88	@ 0x58
 80097cc:	a917      	add	r1, sp, #92	@ 0x5c
 80097ce:	4658      	mov	r0, fp
 80097d0:	f001 f980 	bl	800aad4 <__d2b>
 80097d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80097d8:	4681      	mov	r9, r0
 80097da:	2e00      	cmp	r6, #0
 80097dc:	d077      	beq.n	80098ce <_dtoa_r+0x1d6>
 80097de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80097e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80097f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80097f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80097f8:	4619      	mov	r1, r3
 80097fa:	2200      	movs	r2, #0
 80097fc:	4b74      	ldr	r3, [pc, #464]	@ (80099d0 <_dtoa_r+0x2d8>)
 80097fe:	f7f6 fd63 	bl	80002c8 <__aeabi_dsub>
 8009802:	a369      	add	r3, pc, #420	@ (adr r3, 80099a8 <_dtoa_r+0x2b0>)
 8009804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009808:	f7f6 ff16 	bl	8000638 <__aeabi_dmul>
 800980c:	a368      	add	r3, pc, #416	@ (adr r3, 80099b0 <_dtoa_r+0x2b8>)
 800980e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009812:	f7f6 fd5b 	bl	80002cc <__adddf3>
 8009816:	4604      	mov	r4, r0
 8009818:	4630      	mov	r0, r6
 800981a:	460d      	mov	r5, r1
 800981c:	f7f6 fea2 	bl	8000564 <__aeabi_i2d>
 8009820:	a365      	add	r3, pc, #404	@ (adr r3, 80099b8 <_dtoa_r+0x2c0>)
 8009822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009826:	f7f6 ff07 	bl	8000638 <__aeabi_dmul>
 800982a:	4602      	mov	r2, r0
 800982c:	460b      	mov	r3, r1
 800982e:	4620      	mov	r0, r4
 8009830:	4629      	mov	r1, r5
 8009832:	f7f6 fd4b 	bl	80002cc <__adddf3>
 8009836:	4604      	mov	r4, r0
 8009838:	460d      	mov	r5, r1
 800983a:	f7f7 f9ad 	bl	8000b98 <__aeabi_d2iz>
 800983e:	2200      	movs	r2, #0
 8009840:	4607      	mov	r7, r0
 8009842:	2300      	movs	r3, #0
 8009844:	4620      	mov	r0, r4
 8009846:	4629      	mov	r1, r5
 8009848:	f7f7 f968 	bl	8000b1c <__aeabi_dcmplt>
 800984c:	b140      	cbz	r0, 8009860 <_dtoa_r+0x168>
 800984e:	4638      	mov	r0, r7
 8009850:	f7f6 fe88 	bl	8000564 <__aeabi_i2d>
 8009854:	4622      	mov	r2, r4
 8009856:	462b      	mov	r3, r5
 8009858:	f7f7 f956 	bl	8000b08 <__aeabi_dcmpeq>
 800985c:	b900      	cbnz	r0, 8009860 <_dtoa_r+0x168>
 800985e:	3f01      	subs	r7, #1
 8009860:	2f16      	cmp	r7, #22
 8009862:	d851      	bhi.n	8009908 <_dtoa_r+0x210>
 8009864:	4b5b      	ldr	r3, [pc, #364]	@ (80099d4 <_dtoa_r+0x2dc>)
 8009866:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800986a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009872:	f7f7 f953 	bl	8000b1c <__aeabi_dcmplt>
 8009876:	2800      	cmp	r0, #0
 8009878:	d048      	beq.n	800990c <_dtoa_r+0x214>
 800987a:	3f01      	subs	r7, #1
 800987c:	2300      	movs	r3, #0
 800987e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009880:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009882:	1b9b      	subs	r3, r3, r6
 8009884:	1e5a      	subs	r2, r3, #1
 8009886:	bf44      	itt	mi
 8009888:	f1c3 0801 	rsbmi	r8, r3, #1
 800988c:	2300      	movmi	r3, #0
 800988e:	9208      	str	r2, [sp, #32]
 8009890:	bf54      	ite	pl
 8009892:	f04f 0800 	movpl.w	r8, #0
 8009896:	9308      	strmi	r3, [sp, #32]
 8009898:	2f00      	cmp	r7, #0
 800989a:	db39      	blt.n	8009910 <_dtoa_r+0x218>
 800989c:	9b08      	ldr	r3, [sp, #32]
 800989e:	970f      	str	r7, [sp, #60]	@ 0x3c
 80098a0:	443b      	add	r3, r7
 80098a2:	9308      	str	r3, [sp, #32]
 80098a4:	2300      	movs	r3, #0
 80098a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80098a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098aa:	2b09      	cmp	r3, #9
 80098ac:	d864      	bhi.n	8009978 <_dtoa_r+0x280>
 80098ae:	2b05      	cmp	r3, #5
 80098b0:	bfc4      	itt	gt
 80098b2:	3b04      	subgt	r3, #4
 80098b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80098b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098b8:	f1a3 0302 	sub.w	r3, r3, #2
 80098bc:	bfcc      	ite	gt
 80098be:	2400      	movgt	r4, #0
 80098c0:	2401      	movle	r4, #1
 80098c2:	2b03      	cmp	r3, #3
 80098c4:	d863      	bhi.n	800998e <_dtoa_r+0x296>
 80098c6:	e8df f003 	tbb	[pc, r3]
 80098ca:	372a      	.short	0x372a
 80098cc:	5535      	.short	0x5535
 80098ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80098d2:	441e      	add	r6, r3
 80098d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80098d8:	2b20      	cmp	r3, #32
 80098da:	bfc1      	itttt	gt
 80098dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80098e0:	409f      	lslgt	r7, r3
 80098e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80098e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80098ea:	bfd6      	itet	le
 80098ec:	f1c3 0320 	rsble	r3, r3, #32
 80098f0:	ea47 0003 	orrgt.w	r0, r7, r3
 80098f4:	fa04 f003 	lslle.w	r0, r4, r3
 80098f8:	f7f6 fe24 	bl	8000544 <__aeabi_ui2d>
 80098fc:	2201      	movs	r2, #1
 80098fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009902:	3e01      	subs	r6, #1
 8009904:	9214      	str	r2, [sp, #80]	@ 0x50
 8009906:	e777      	b.n	80097f8 <_dtoa_r+0x100>
 8009908:	2301      	movs	r3, #1
 800990a:	e7b8      	b.n	800987e <_dtoa_r+0x186>
 800990c:	9012      	str	r0, [sp, #72]	@ 0x48
 800990e:	e7b7      	b.n	8009880 <_dtoa_r+0x188>
 8009910:	427b      	negs	r3, r7
 8009912:	930a      	str	r3, [sp, #40]	@ 0x28
 8009914:	2300      	movs	r3, #0
 8009916:	eba8 0807 	sub.w	r8, r8, r7
 800991a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800991c:	e7c4      	b.n	80098a8 <_dtoa_r+0x1b0>
 800991e:	2300      	movs	r3, #0
 8009920:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009924:	2b00      	cmp	r3, #0
 8009926:	dc35      	bgt.n	8009994 <_dtoa_r+0x29c>
 8009928:	2301      	movs	r3, #1
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	9307      	str	r3, [sp, #28]
 800992e:	461a      	mov	r2, r3
 8009930:	920e      	str	r2, [sp, #56]	@ 0x38
 8009932:	e00b      	b.n	800994c <_dtoa_r+0x254>
 8009934:	2301      	movs	r3, #1
 8009936:	e7f3      	b.n	8009920 <_dtoa_r+0x228>
 8009938:	2300      	movs	r3, #0
 800993a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800993c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800993e:	18fb      	adds	r3, r7, r3
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	3301      	adds	r3, #1
 8009944:	2b01      	cmp	r3, #1
 8009946:	9307      	str	r3, [sp, #28]
 8009948:	bfb8      	it	lt
 800994a:	2301      	movlt	r3, #1
 800994c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009950:	2100      	movs	r1, #0
 8009952:	2204      	movs	r2, #4
 8009954:	f102 0514 	add.w	r5, r2, #20
 8009958:	429d      	cmp	r5, r3
 800995a:	d91f      	bls.n	800999c <_dtoa_r+0x2a4>
 800995c:	6041      	str	r1, [r0, #4]
 800995e:	4658      	mov	r0, fp
 8009960:	f000 fd8e 	bl	800a480 <_Balloc>
 8009964:	4682      	mov	sl, r0
 8009966:	2800      	cmp	r0, #0
 8009968:	d13c      	bne.n	80099e4 <_dtoa_r+0x2ec>
 800996a:	4b1b      	ldr	r3, [pc, #108]	@ (80099d8 <_dtoa_r+0x2e0>)
 800996c:	4602      	mov	r2, r0
 800996e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009972:	e6d8      	b.n	8009726 <_dtoa_r+0x2e>
 8009974:	2301      	movs	r3, #1
 8009976:	e7e0      	b.n	800993a <_dtoa_r+0x242>
 8009978:	2401      	movs	r4, #1
 800997a:	2300      	movs	r3, #0
 800997c:	9309      	str	r3, [sp, #36]	@ 0x24
 800997e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009980:	f04f 33ff 	mov.w	r3, #4294967295
 8009984:	9300      	str	r3, [sp, #0]
 8009986:	9307      	str	r3, [sp, #28]
 8009988:	2200      	movs	r2, #0
 800998a:	2312      	movs	r3, #18
 800998c:	e7d0      	b.n	8009930 <_dtoa_r+0x238>
 800998e:	2301      	movs	r3, #1
 8009990:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009992:	e7f5      	b.n	8009980 <_dtoa_r+0x288>
 8009994:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	9307      	str	r3, [sp, #28]
 800999a:	e7d7      	b.n	800994c <_dtoa_r+0x254>
 800999c:	3101      	adds	r1, #1
 800999e:	0052      	lsls	r2, r2, #1
 80099a0:	e7d8      	b.n	8009954 <_dtoa_r+0x25c>
 80099a2:	bf00      	nop
 80099a4:	f3af 8000 	nop.w
 80099a8:	636f4361 	.word	0x636f4361
 80099ac:	3fd287a7 	.word	0x3fd287a7
 80099b0:	8b60c8b3 	.word	0x8b60c8b3
 80099b4:	3fc68a28 	.word	0x3fc68a28
 80099b8:	509f79fb 	.word	0x509f79fb
 80099bc:	3fd34413 	.word	0x3fd34413
 80099c0:	0800b8ae 	.word	0x0800b8ae
 80099c4:	0800b8c5 	.word	0x0800b8c5
 80099c8:	7ff00000 	.word	0x7ff00000
 80099cc:	0800b87e 	.word	0x0800b87e
 80099d0:	3ff80000 	.word	0x3ff80000
 80099d4:	0800b9c0 	.word	0x0800b9c0
 80099d8:	0800b91d 	.word	0x0800b91d
 80099dc:	0800b8aa 	.word	0x0800b8aa
 80099e0:	0800b87d 	.word	0x0800b87d
 80099e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80099e8:	6018      	str	r0, [r3, #0]
 80099ea:	9b07      	ldr	r3, [sp, #28]
 80099ec:	2b0e      	cmp	r3, #14
 80099ee:	f200 80a4 	bhi.w	8009b3a <_dtoa_r+0x442>
 80099f2:	2c00      	cmp	r4, #0
 80099f4:	f000 80a1 	beq.w	8009b3a <_dtoa_r+0x442>
 80099f8:	2f00      	cmp	r7, #0
 80099fa:	dd33      	ble.n	8009a64 <_dtoa_r+0x36c>
 80099fc:	4bad      	ldr	r3, [pc, #692]	@ (8009cb4 <_dtoa_r+0x5bc>)
 80099fe:	f007 020f 	and.w	r2, r7, #15
 8009a02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a06:	ed93 7b00 	vldr	d7, [r3]
 8009a0a:	05f8      	lsls	r0, r7, #23
 8009a0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009a10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009a14:	d516      	bpl.n	8009a44 <_dtoa_r+0x34c>
 8009a16:	4ba8      	ldr	r3, [pc, #672]	@ (8009cb8 <_dtoa_r+0x5c0>)
 8009a18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a20:	f7f6 ff34 	bl	800088c <__aeabi_ddiv>
 8009a24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a28:	f004 040f 	and.w	r4, r4, #15
 8009a2c:	2603      	movs	r6, #3
 8009a2e:	4da2      	ldr	r5, [pc, #648]	@ (8009cb8 <_dtoa_r+0x5c0>)
 8009a30:	b954      	cbnz	r4, 8009a48 <_dtoa_r+0x350>
 8009a32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a3a:	f7f6 ff27 	bl	800088c <__aeabi_ddiv>
 8009a3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a42:	e028      	b.n	8009a96 <_dtoa_r+0x39e>
 8009a44:	2602      	movs	r6, #2
 8009a46:	e7f2      	b.n	8009a2e <_dtoa_r+0x336>
 8009a48:	07e1      	lsls	r1, r4, #31
 8009a4a:	d508      	bpl.n	8009a5e <_dtoa_r+0x366>
 8009a4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a54:	f7f6 fdf0 	bl	8000638 <__aeabi_dmul>
 8009a58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a5c:	3601      	adds	r6, #1
 8009a5e:	1064      	asrs	r4, r4, #1
 8009a60:	3508      	adds	r5, #8
 8009a62:	e7e5      	b.n	8009a30 <_dtoa_r+0x338>
 8009a64:	f000 80d2 	beq.w	8009c0c <_dtoa_r+0x514>
 8009a68:	427c      	negs	r4, r7
 8009a6a:	4b92      	ldr	r3, [pc, #584]	@ (8009cb4 <_dtoa_r+0x5bc>)
 8009a6c:	4d92      	ldr	r5, [pc, #584]	@ (8009cb8 <_dtoa_r+0x5c0>)
 8009a6e:	f004 020f 	and.w	r2, r4, #15
 8009a72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a7e:	f7f6 fddb 	bl	8000638 <__aeabi_dmul>
 8009a82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a86:	1124      	asrs	r4, r4, #4
 8009a88:	2300      	movs	r3, #0
 8009a8a:	2602      	movs	r6, #2
 8009a8c:	2c00      	cmp	r4, #0
 8009a8e:	f040 80b2 	bne.w	8009bf6 <_dtoa_r+0x4fe>
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1d3      	bne.n	8009a3e <_dtoa_r+0x346>
 8009a96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009a98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 80b7 	beq.w	8009c10 <_dtoa_r+0x518>
 8009aa2:	4b86      	ldr	r3, [pc, #536]	@ (8009cbc <_dtoa_r+0x5c4>)
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	f7f7 f837 	bl	8000b1c <__aeabi_dcmplt>
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	f000 80ae 	beq.w	8009c10 <_dtoa_r+0x518>
 8009ab4:	9b07      	ldr	r3, [sp, #28]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f000 80aa 	beq.w	8009c10 <_dtoa_r+0x518>
 8009abc:	9b00      	ldr	r3, [sp, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	dd37      	ble.n	8009b32 <_dtoa_r+0x43a>
 8009ac2:	1e7b      	subs	r3, r7, #1
 8009ac4:	9304      	str	r3, [sp, #16]
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	4b7d      	ldr	r3, [pc, #500]	@ (8009cc0 <_dtoa_r+0x5c8>)
 8009aca:	2200      	movs	r2, #0
 8009acc:	4629      	mov	r1, r5
 8009ace:	f7f6 fdb3 	bl	8000638 <__aeabi_dmul>
 8009ad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ad6:	9c00      	ldr	r4, [sp, #0]
 8009ad8:	3601      	adds	r6, #1
 8009ada:	4630      	mov	r0, r6
 8009adc:	f7f6 fd42 	bl	8000564 <__aeabi_i2d>
 8009ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ae4:	f7f6 fda8 	bl	8000638 <__aeabi_dmul>
 8009ae8:	4b76      	ldr	r3, [pc, #472]	@ (8009cc4 <_dtoa_r+0x5cc>)
 8009aea:	2200      	movs	r2, #0
 8009aec:	f7f6 fbee 	bl	80002cc <__adddf3>
 8009af0:	4605      	mov	r5, r0
 8009af2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009af6:	2c00      	cmp	r4, #0
 8009af8:	f040 808d 	bne.w	8009c16 <_dtoa_r+0x51e>
 8009afc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b00:	4b71      	ldr	r3, [pc, #452]	@ (8009cc8 <_dtoa_r+0x5d0>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	f7f6 fbe0 	bl	80002c8 <__aeabi_dsub>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b10:	462a      	mov	r2, r5
 8009b12:	4633      	mov	r3, r6
 8009b14:	f7f7 f820 	bl	8000b58 <__aeabi_dcmpgt>
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	f040 828b 	bne.w	800a034 <_dtoa_r+0x93c>
 8009b1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b22:	462a      	mov	r2, r5
 8009b24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009b28:	f7f6 fff8 	bl	8000b1c <__aeabi_dcmplt>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	f040 8128 	bne.w	8009d82 <_dtoa_r+0x68a>
 8009b32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009b36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009b3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f2c0 815a 	blt.w	8009df6 <_dtoa_r+0x6fe>
 8009b42:	2f0e      	cmp	r7, #14
 8009b44:	f300 8157 	bgt.w	8009df6 <_dtoa_r+0x6fe>
 8009b48:	4b5a      	ldr	r3, [pc, #360]	@ (8009cb4 <_dtoa_r+0x5bc>)
 8009b4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b4e:	ed93 7b00 	vldr	d7, [r3]
 8009b52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	ed8d 7b00 	vstr	d7, [sp]
 8009b5a:	da03      	bge.n	8009b64 <_dtoa_r+0x46c>
 8009b5c:	9b07      	ldr	r3, [sp, #28]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f340 8101 	ble.w	8009d66 <_dtoa_r+0x66e>
 8009b64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009b68:	4656      	mov	r6, sl
 8009b6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b6e:	4620      	mov	r0, r4
 8009b70:	4629      	mov	r1, r5
 8009b72:	f7f6 fe8b 	bl	800088c <__aeabi_ddiv>
 8009b76:	f7f7 f80f 	bl	8000b98 <__aeabi_d2iz>
 8009b7a:	4680      	mov	r8, r0
 8009b7c:	f7f6 fcf2 	bl	8000564 <__aeabi_i2d>
 8009b80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b84:	f7f6 fd58 	bl	8000638 <__aeabi_dmul>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	4629      	mov	r1, r5
 8009b90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009b94:	f7f6 fb98 	bl	80002c8 <__aeabi_dsub>
 8009b98:	f806 4b01 	strb.w	r4, [r6], #1
 8009b9c:	9d07      	ldr	r5, [sp, #28]
 8009b9e:	eba6 040a 	sub.w	r4, r6, sl
 8009ba2:	42a5      	cmp	r5, r4
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	f040 8117 	bne.w	8009dda <_dtoa_r+0x6e2>
 8009bac:	f7f6 fb8e 	bl	80002cc <__adddf3>
 8009bb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bb4:	4604      	mov	r4, r0
 8009bb6:	460d      	mov	r5, r1
 8009bb8:	f7f6 ffce 	bl	8000b58 <__aeabi_dcmpgt>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	f040 80f9 	bne.w	8009db4 <_dtoa_r+0x6bc>
 8009bc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	4629      	mov	r1, r5
 8009bca:	f7f6 ff9d 	bl	8000b08 <__aeabi_dcmpeq>
 8009bce:	b118      	cbz	r0, 8009bd8 <_dtoa_r+0x4e0>
 8009bd0:	f018 0f01 	tst.w	r8, #1
 8009bd4:	f040 80ee 	bne.w	8009db4 <_dtoa_r+0x6bc>
 8009bd8:	4649      	mov	r1, r9
 8009bda:	4658      	mov	r0, fp
 8009bdc:	f000 fc90 	bl	800a500 <_Bfree>
 8009be0:	2300      	movs	r3, #0
 8009be2:	7033      	strb	r3, [r6, #0]
 8009be4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009be6:	3701      	adds	r7, #1
 8009be8:	601f      	str	r7, [r3, #0]
 8009bea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f000 831d 	beq.w	800a22c <_dtoa_r+0xb34>
 8009bf2:	601e      	str	r6, [r3, #0]
 8009bf4:	e31a      	b.n	800a22c <_dtoa_r+0xb34>
 8009bf6:	07e2      	lsls	r2, r4, #31
 8009bf8:	d505      	bpl.n	8009c06 <_dtoa_r+0x50e>
 8009bfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009bfe:	f7f6 fd1b 	bl	8000638 <__aeabi_dmul>
 8009c02:	3601      	adds	r6, #1
 8009c04:	2301      	movs	r3, #1
 8009c06:	1064      	asrs	r4, r4, #1
 8009c08:	3508      	adds	r5, #8
 8009c0a:	e73f      	b.n	8009a8c <_dtoa_r+0x394>
 8009c0c:	2602      	movs	r6, #2
 8009c0e:	e742      	b.n	8009a96 <_dtoa_r+0x39e>
 8009c10:	9c07      	ldr	r4, [sp, #28]
 8009c12:	9704      	str	r7, [sp, #16]
 8009c14:	e761      	b.n	8009ada <_dtoa_r+0x3e2>
 8009c16:	4b27      	ldr	r3, [pc, #156]	@ (8009cb4 <_dtoa_r+0x5bc>)
 8009c18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c22:	4454      	add	r4, sl
 8009c24:	2900      	cmp	r1, #0
 8009c26:	d053      	beq.n	8009cd0 <_dtoa_r+0x5d8>
 8009c28:	4928      	ldr	r1, [pc, #160]	@ (8009ccc <_dtoa_r+0x5d4>)
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	f7f6 fe2e 	bl	800088c <__aeabi_ddiv>
 8009c30:	4633      	mov	r3, r6
 8009c32:	462a      	mov	r2, r5
 8009c34:	f7f6 fb48 	bl	80002c8 <__aeabi_dsub>
 8009c38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c3c:	4656      	mov	r6, sl
 8009c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c42:	f7f6 ffa9 	bl	8000b98 <__aeabi_d2iz>
 8009c46:	4605      	mov	r5, r0
 8009c48:	f7f6 fc8c 	bl	8000564 <__aeabi_i2d>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c54:	f7f6 fb38 	bl	80002c8 <__aeabi_dsub>
 8009c58:	3530      	adds	r5, #48	@ 0x30
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c62:	f806 5b01 	strb.w	r5, [r6], #1
 8009c66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c6a:	f7f6 ff57 	bl	8000b1c <__aeabi_dcmplt>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d171      	bne.n	8009d56 <_dtoa_r+0x65e>
 8009c72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c76:	4911      	ldr	r1, [pc, #68]	@ (8009cbc <_dtoa_r+0x5c4>)
 8009c78:	2000      	movs	r0, #0
 8009c7a:	f7f6 fb25 	bl	80002c8 <__aeabi_dsub>
 8009c7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c82:	f7f6 ff4b 	bl	8000b1c <__aeabi_dcmplt>
 8009c86:	2800      	cmp	r0, #0
 8009c88:	f040 8095 	bne.w	8009db6 <_dtoa_r+0x6be>
 8009c8c:	42a6      	cmp	r6, r4
 8009c8e:	f43f af50 	beq.w	8009b32 <_dtoa_r+0x43a>
 8009c92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009c96:	4b0a      	ldr	r3, [pc, #40]	@ (8009cc0 <_dtoa_r+0x5c8>)
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f7f6 fccd 	bl	8000638 <__aeabi_dmul>
 8009c9e:	4b08      	ldr	r3, [pc, #32]	@ (8009cc0 <_dtoa_r+0x5c8>)
 8009ca0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009caa:	f7f6 fcc5 	bl	8000638 <__aeabi_dmul>
 8009cae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cb2:	e7c4      	b.n	8009c3e <_dtoa_r+0x546>
 8009cb4:	0800b9c0 	.word	0x0800b9c0
 8009cb8:	0800b998 	.word	0x0800b998
 8009cbc:	3ff00000 	.word	0x3ff00000
 8009cc0:	40240000 	.word	0x40240000
 8009cc4:	401c0000 	.word	0x401c0000
 8009cc8:	40140000 	.word	0x40140000
 8009ccc:	3fe00000 	.word	0x3fe00000
 8009cd0:	4631      	mov	r1, r6
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	f7f6 fcb0 	bl	8000638 <__aeabi_dmul>
 8009cd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009cdc:	9415      	str	r4, [sp, #84]	@ 0x54
 8009cde:	4656      	mov	r6, sl
 8009ce0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ce4:	f7f6 ff58 	bl	8000b98 <__aeabi_d2iz>
 8009ce8:	4605      	mov	r5, r0
 8009cea:	f7f6 fc3b 	bl	8000564 <__aeabi_i2d>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cf6:	f7f6 fae7 	bl	80002c8 <__aeabi_dsub>
 8009cfa:	3530      	adds	r5, #48	@ 0x30
 8009cfc:	f806 5b01 	strb.w	r5, [r6], #1
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	42a6      	cmp	r6, r4
 8009d06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d0a:	f04f 0200 	mov.w	r2, #0
 8009d0e:	d124      	bne.n	8009d5a <_dtoa_r+0x662>
 8009d10:	4bac      	ldr	r3, [pc, #688]	@ (8009fc4 <_dtoa_r+0x8cc>)
 8009d12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009d16:	f7f6 fad9 	bl	80002cc <__adddf3>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d22:	f7f6 ff19 	bl	8000b58 <__aeabi_dcmpgt>
 8009d26:	2800      	cmp	r0, #0
 8009d28:	d145      	bne.n	8009db6 <_dtoa_r+0x6be>
 8009d2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009d2e:	49a5      	ldr	r1, [pc, #660]	@ (8009fc4 <_dtoa_r+0x8cc>)
 8009d30:	2000      	movs	r0, #0
 8009d32:	f7f6 fac9 	bl	80002c8 <__aeabi_dsub>
 8009d36:	4602      	mov	r2, r0
 8009d38:	460b      	mov	r3, r1
 8009d3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d3e:	f7f6 feed 	bl	8000b1c <__aeabi_dcmplt>
 8009d42:	2800      	cmp	r0, #0
 8009d44:	f43f aef5 	beq.w	8009b32 <_dtoa_r+0x43a>
 8009d48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009d4a:	1e73      	subs	r3, r6, #1
 8009d4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009d4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009d52:	2b30      	cmp	r3, #48	@ 0x30
 8009d54:	d0f8      	beq.n	8009d48 <_dtoa_r+0x650>
 8009d56:	9f04      	ldr	r7, [sp, #16]
 8009d58:	e73e      	b.n	8009bd8 <_dtoa_r+0x4e0>
 8009d5a:	4b9b      	ldr	r3, [pc, #620]	@ (8009fc8 <_dtoa_r+0x8d0>)
 8009d5c:	f7f6 fc6c 	bl	8000638 <__aeabi_dmul>
 8009d60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d64:	e7bc      	b.n	8009ce0 <_dtoa_r+0x5e8>
 8009d66:	d10c      	bne.n	8009d82 <_dtoa_r+0x68a>
 8009d68:	4b98      	ldr	r3, [pc, #608]	@ (8009fcc <_dtoa_r+0x8d4>)
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d70:	f7f6 fc62 	bl	8000638 <__aeabi_dmul>
 8009d74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d78:	f7f6 fee4 	bl	8000b44 <__aeabi_dcmpge>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	f000 8157 	beq.w	800a030 <_dtoa_r+0x938>
 8009d82:	2400      	movs	r4, #0
 8009d84:	4625      	mov	r5, r4
 8009d86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d88:	43db      	mvns	r3, r3
 8009d8a:	9304      	str	r3, [sp, #16]
 8009d8c:	4656      	mov	r6, sl
 8009d8e:	2700      	movs	r7, #0
 8009d90:	4621      	mov	r1, r4
 8009d92:	4658      	mov	r0, fp
 8009d94:	f000 fbb4 	bl	800a500 <_Bfree>
 8009d98:	2d00      	cmp	r5, #0
 8009d9a:	d0dc      	beq.n	8009d56 <_dtoa_r+0x65e>
 8009d9c:	b12f      	cbz	r7, 8009daa <_dtoa_r+0x6b2>
 8009d9e:	42af      	cmp	r7, r5
 8009da0:	d003      	beq.n	8009daa <_dtoa_r+0x6b2>
 8009da2:	4639      	mov	r1, r7
 8009da4:	4658      	mov	r0, fp
 8009da6:	f000 fbab 	bl	800a500 <_Bfree>
 8009daa:	4629      	mov	r1, r5
 8009dac:	4658      	mov	r0, fp
 8009dae:	f000 fba7 	bl	800a500 <_Bfree>
 8009db2:	e7d0      	b.n	8009d56 <_dtoa_r+0x65e>
 8009db4:	9704      	str	r7, [sp, #16]
 8009db6:	4633      	mov	r3, r6
 8009db8:	461e      	mov	r6, r3
 8009dba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dbe:	2a39      	cmp	r2, #57	@ 0x39
 8009dc0:	d107      	bne.n	8009dd2 <_dtoa_r+0x6da>
 8009dc2:	459a      	cmp	sl, r3
 8009dc4:	d1f8      	bne.n	8009db8 <_dtoa_r+0x6c0>
 8009dc6:	9a04      	ldr	r2, [sp, #16]
 8009dc8:	3201      	adds	r2, #1
 8009dca:	9204      	str	r2, [sp, #16]
 8009dcc:	2230      	movs	r2, #48	@ 0x30
 8009dce:	f88a 2000 	strb.w	r2, [sl]
 8009dd2:	781a      	ldrb	r2, [r3, #0]
 8009dd4:	3201      	adds	r2, #1
 8009dd6:	701a      	strb	r2, [r3, #0]
 8009dd8:	e7bd      	b.n	8009d56 <_dtoa_r+0x65e>
 8009dda:	4b7b      	ldr	r3, [pc, #492]	@ (8009fc8 <_dtoa_r+0x8d0>)
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f7f6 fc2b 	bl	8000638 <__aeabi_dmul>
 8009de2:	2200      	movs	r2, #0
 8009de4:	2300      	movs	r3, #0
 8009de6:	4604      	mov	r4, r0
 8009de8:	460d      	mov	r5, r1
 8009dea:	f7f6 fe8d 	bl	8000b08 <__aeabi_dcmpeq>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	f43f aebb 	beq.w	8009b6a <_dtoa_r+0x472>
 8009df4:	e6f0      	b.n	8009bd8 <_dtoa_r+0x4e0>
 8009df6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009df8:	2a00      	cmp	r2, #0
 8009dfa:	f000 80db 	beq.w	8009fb4 <_dtoa_r+0x8bc>
 8009dfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e00:	2a01      	cmp	r2, #1
 8009e02:	f300 80bf 	bgt.w	8009f84 <_dtoa_r+0x88c>
 8009e06:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009e08:	2a00      	cmp	r2, #0
 8009e0a:	f000 80b7 	beq.w	8009f7c <_dtoa_r+0x884>
 8009e0e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009e12:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009e14:	4646      	mov	r6, r8
 8009e16:	9a08      	ldr	r2, [sp, #32]
 8009e18:	2101      	movs	r1, #1
 8009e1a:	441a      	add	r2, r3
 8009e1c:	4658      	mov	r0, fp
 8009e1e:	4498      	add	r8, r3
 8009e20:	9208      	str	r2, [sp, #32]
 8009e22:	f000 fc21 	bl	800a668 <__i2b>
 8009e26:	4605      	mov	r5, r0
 8009e28:	b15e      	cbz	r6, 8009e42 <_dtoa_r+0x74a>
 8009e2a:	9b08      	ldr	r3, [sp, #32]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	dd08      	ble.n	8009e42 <_dtoa_r+0x74a>
 8009e30:	42b3      	cmp	r3, r6
 8009e32:	9a08      	ldr	r2, [sp, #32]
 8009e34:	bfa8      	it	ge
 8009e36:	4633      	movge	r3, r6
 8009e38:	eba8 0803 	sub.w	r8, r8, r3
 8009e3c:	1af6      	subs	r6, r6, r3
 8009e3e:	1ad3      	subs	r3, r2, r3
 8009e40:	9308      	str	r3, [sp, #32]
 8009e42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e44:	b1f3      	cbz	r3, 8009e84 <_dtoa_r+0x78c>
 8009e46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 80b7 	beq.w	8009fbc <_dtoa_r+0x8c4>
 8009e4e:	b18c      	cbz	r4, 8009e74 <_dtoa_r+0x77c>
 8009e50:	4629      	mov	r1, r5
 8009e52:	4622      	mov	r2, r4
 8009e54:	4658      	mov	r0, fp
 8009e56:	f000 fcc7 	bl	800a7e8 <__pow5mult>
 8009e5a:	464a      	mov	r2, r9
 8009e5c:	4601      	mov	r1, r0
 8009e5e:	4605      	mov	r5, r0
 8009e60:	4658      	mov	r0, fp
 8009e62:	f000 fc17 	bl	800a694 <__multiply>
 8009e66:	4649      	mov	r1, r9
 8009e68:	9004      	str	r0, [sp, #16]
 8009e6a:	4658      	mov	r0, fp
 8009e6c:	f000 fb48 	bl	800a500 <_Bfree>
 8009e70:	9b04      	ldr	r3, [sp, #16]
 8009e72:	4699      	mov	r9, r3
 8009e74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e76:	1b1a      	subs	r2, r3, r4
 8009e78:	d004      	beq.n	8009e84 <_dtoa_r+0x78c>
 8009e7a:	4649      	mov	r1, r9
 8009e7c:	4658      	mov	r0, fp
 8009e7e:	f000 fcb3 	bl	800a7e8 <__pow5mult>
 8009e82:	4681      	mov	r9, r0
 8009e84:	2101      	movs	r1, #1
 8009e86:	4658      	mov	r0, fp
 8009e88:	f000 fbee 	bl	800a668 <__i2b>
 8009e8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e8e:	4604      	mov	r4, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	f000 81cf 	beq.w	800a234 <_dtoa_r+0xb3c>
 8009e96:	461a      	mov	r2, r3
 8009e98:	4601      	mov	r1, r0
 8009e9a:	4658      	mov	r0, fp
 8009e9c:	f000 fca4 	bl	800a7e8 <__pow5mult>
 8009ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	4604      	mov	r4, r0
 8009ea6:	f300 8095 	bgt.w	8009fd4 <_dtoa_r+0x8dc>
 8009eaa:	9b02      	ldr	r3, [sp, #8]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f040 8087 	bne.w	8009fc0 <_dtoa_r+0x8c8>
 8009eb2:	9b03      	ldr	r3, [sp, #12]
 8009eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f040 8089 	bne.w	8009fd0 <_dtoa_r+0x8d8>
 8009ebe:	9b03      	ldr	r3, [sp, #12]
 8009ec0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ec4:	0d1b      	lsrs	r3, r3, #20
 8009ec6:	051b      	lsls	r3, r3, #20
 8009ec8:	b12b      	cbz	r3, 8009ed6 <_dtoa_r+0x7de>
 8009eca:	9b08      	ldr	r3, [sp, #32]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	9308      	str	r3, [sp, #32]
 8009ed0:	f108 0801 	add.w	r8, r8, #1
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ed8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f000 81b0 	beq.w	800a240 <_dtoa_r+0xb48>
 8009ee0:	6923      	ldr	r3, [r4, #16]
 8009ee2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ee6:	6918      	ldr	r0, [r3, #16]
 8009ee8:	f000 fb72 	bl	800a5d0 <__hi0bits>
 8009eec:	f1c0 0020 	rsb	r0, r0, #32
 8009ef0:	9b08      	ldr	r3, [sp, #32]
 8009ef2:	4418      	add	r0, r3
 8009ef4:	f010 001f 	ands.w	r0, r0, #31
 8009ef8:	d077      	beq.n	8009fea <_dtoa_r+0x8f2>
 8009efa:	f1c0 0320 	rsb	r3, r0, #32
 8009efe:	2b04      	cmp	r3, #4
 8009f00:	dd6b      	ble.n	8009fda <_dtoa_r+0x8e2>
 8009f02:	9b08      	ldr	r3, [sp, #32]
 8009f04:	f1c0 001c 	rsb	r0, r0, #28
 8009f08:	4403      	add	r3, r0
 8009f0a:	4480      	add	r8, r0
 8009f0c:	4406      	add	r6, r0
 8009f0e:	9308      	str	r3, [sp, #32]
 8009f10:	f1b8 0f00 	cmp.w	r8, #0
 8009f14:	dd05      	ble.n	8009f22 <_dtoa_r+0x82a>
 8009f16:	4649      	mov	r1, r9
 8009f18:	4642      	mov	r2, r8
 8009f1a:	4658      	mov	r0, fp
 8009f1c:	f000 fcbe 	bl	800a89c <__lshift>
 8009f20:	4681      	mov	r9, r0
 8009f22:	9b08      	ldr	r3, [sp, #32]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	dd05      	ble.n	8009f34 <_dtoa_r+0x83c>
 8009f28:	4621      	mov	r1, r4
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	4658      	mov	r0, fp
 8009f2e:	f000 fcb5 	bl	800a89c <__lshift>
 8009f32:	4604      	mov	r4, r0
 8009f34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d059      	beq.n	8009fee <_dtoa_r+0x8f6>
 8009f3a:	4621      	mov	r1, r4
 8009f3c:	4648      	mov	r0, r9
 8009f3e:	f000 fd19 	bl	800a974 <__mcmp>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	da53      	bge.n	8009fee <_dtoa_r+0x8f6>
 8009f46:	1e7b      	subs	r3, r7, #1
 8009f48:	9304      	str	r3, [sp, #16]
 8009f4a:	4649      	mov	r1, r9
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	220a      	movs	r2, #10
 8009f50:	4658      	mov	r0, fp
 8009f52:	f000 faf7 	bl	800a544 <__multadd>
 8009f56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f58:	4681      	mov	r9, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f000 8172 	beq.w	800a244 <_dtoa_r+0xb4c>
 8009f60:	2300      	movs	r3, #0
 8009f62:	4629      	mov	r1, r5
 8009f64:	220a      	movs	r2, #10
 8009f66:	4658      	mov	r0, fp
 8009f68:	f000 faec 	bl	800a544 <__multadd>
 8009f6c:	9b00      	ldr	r3, [sp, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	4605      	mov	r5, r0
 8009f72:	dc67      	bgt.n	800a044 <_dtoa_r+0x94c>
 8009f74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	dc41      	bgt.n	8009ffe <_dtoa_r+0x906>
 8009f7a:	e063      	b.n	800a044 <_dtoa_r+0x94c>
 8009f7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009f7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009f82:	e746      	b.n	8009e12 <_dtoa_r+0x71a>
 8009f84:	9b07      	ldr	r3, [sp, #28]
 8009f86:	1e5c      	subs	r4, r3, #1
 8009f88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f8a:	42a3      	cmp	r3, r4
 8009f8c:	bfbf      	itttt	lt
 8009f8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009f90:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009f92:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009f94:	1ae3      	sublt	r3, r4, r3
 8009f96:	bfb4      	ite	lt
 8009f98:	18d2      	addlt	r2, r2, r3
 8009f9a:	1b1c      	subge	r4, r3, r4
 8009f9c:	9b07      	ldr	r3, [sp, #28]
 8009f9e:	bfbc      	itt	lt
 8009fa0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009fa2:	2400      	movlt	r4, #0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	bfb5      	itete	lt
 8009fa8:	eba8 0603 	sublt.w	r6, r8, r3
 8009fac:	9b07      	ldrge	r3, [sp, #28]
 8009fae:	2300      	movlt	r3, #0
 8009fb0:	4646      	movge	r6, r8
 8009fb2:	e730      	b.n	8009e16 <_dtoa_r+0x71e>
 8009fb4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009fb6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009fb8:	4646      	mov	r6, r8
 8009fba:	e735      	b.n	8009e28 <_dtoa_r+0x730>
 8009fbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009fbe:	e75c      	b.n	8009e7a <_dtoa_r+0x782>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	e788      	b.n	8009ed6 <_dtoa_r+0x7de>
 8009fc4:	3fe00000 	.word	0x3fe00000
 8009fc8:	40240000 	.word	0x40240000
 8009fcc:	40140000 	.word	0x40140000
 8009fd0:	9b02      	ldr	r3, [sp, #8]
 8009fd2:	e780      	b.n	8009ed6 <_dtoa_r+0x7de>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fd8:	e782      	b.n	8009ee0 <_dtoa_r+0x7e8>
 8009fda:	d099      	beq.n	8009f10 <_dtoa_r+0x818>
 8009fdc:	9a08      	ldr	r2, [sp, #32]
 8009fde:	331c      	adds	r3, #28
 8009fe0:	441a      	add	r2, r3
 8009fe2:	4498      	add	r8, r3
 8009fe4:	441e      	add	r6, r3
 8009fe6:	9208      	str	r2, [sp, #32]
 8009fe8:	e792      	b.n	8009f10 <_dtoa_r+0x818>
 8009fea:	4603      	mov	r3, r0
 8009fec:	e7f6      	b.n	8009fdc <_dtoa_r+0x8e4>
 8009fee:	9b07      	ldr	r3, [sp, #28]
 8009ff0:	9704      	str	r7, [sp, #16]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	dc20      	bgt.n	800a038 <_dtoa_r+0x940>
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	dd1e      	ble.n	800a03c <_dtoa_r+0x944>
 8009ffe:	9b00      	ldr	r3, [sp, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	f47f aec0 	bne.w	8009d86 <_dtoa_r+0x68e>
 800a006:	4621      	mov	r1, r4
 800a008:	2205      	movs	r2, #5
 800a00a:	4658      	mov	r0, fp
 800a00c:	f000 fa9a 	bl	800a544 <__multadd>
 800a010:	4601      	mov	r1, r0
 800a012:	4604      	mov	r4, r0
 800a014:	4648      	mov	r0, r9
 800a016:	f000 fcad 	bl	800a974 <__mcmp>
 800a01a:	2800      	cmp	r0, #0
 800a01c:	f77f aeb3 	ble.w	8009d86 <_dtoa_r+0x68e>
 800a020:	4656      	mov	r6, sl
 800a022:	2331      	movs	r3, #49	@ 0x31
 800a024:	f806 3b01 	strb.w	r3, [r6], #1
 800a028:	9b04      	ldr	r3, [sp, #16]
 800a02a:	3301      	adds	r3, #1
 800a02c:	9304      	str	r3, [sp, #16]
 800a02e:	e6ae      	b.n	8009d8e <_dtoa_r+0x696>
 800a030:	9c07      	ldr	r4, [sp, #28]
 800a032:	9704      	str	r7, [sp, #16]
 800a034:	4625      	mov	r5, r4
 800a036:	e7f3      	b.n	800a020 <_dtoa_r+0x928>
 800a038:	9b07      	ldr	r3, [sp, #28]
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a03e:	2b00      	cmp	r3, #0
 800a040:	f000 8104 	beq.w	800a24c <_dtoa_r+0xb54>
 800a044:	2e00      	cmp	r6, #0
 800a046:	dd05      	ble.n	800a054 <_dtoa_r+0x95c>
 800a048:	4629      	mov	r1, r5
 800a04a:	4632      	mov	r2, r6
 800a04c:	4658      	mov	r0, fp
 800a04e:	f000 fc25 	bl	800a89c <__lshift>
 800a052:	4605      	mov	r5, r0
 800a054:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a056:	2b00      	cmp	r3, #0
 800a058:	d05a      	beq.n	800a110 <_dtoa_r+0xa18>
 800a05a:	6869      	ldr	r1, [r5, #4]
 800a05c:	4658      	mov	r0, fp
 800a05e:	f000 fa0f 	bl	800a480 <_Balloc>
 800a062:	4606      	mov	r6, r0
 800a064:	b928      	cbnz	r0, 800a072 <_dtoa_r+0x97a>
 800a066:	4b84      	ldr	r3, [pc, #528]	@ (800a278 <_dtoa_r+0xb80>)
 800a068:	4602      	mov	r2, r0
 800a06a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a06e:	f7ff bb5a 	b.w	8009726 <_dtoa_r+0x2e>
 800a072:	692a      	ldr	r2, [r5, #16]
 800a074:	3202      	adds	r2, #2
 800a076:	0092      	lsls	r2, r2, #2
 800a078:	f105 010c 	add.w	r1, r5, #12
 800a07c:	300c      	adds	r0, #12
 800a07e:	f000 ffaf 	bl	800afe0 <memcpy>
 800a082:	2201      	movs	r2, #1
 800a084:	4631      	mov	r1, r6
 800a086:	4658      	mov	r0, fp
 800a088:	f000 fc08 	bl	800a89c <__lshift>
 800a08c:	f10a 0301 	add.w	r3, sl, #1
 800a090:	9307      	str	r3, [sp, #28]
 800a092:	9b00      	ldr	r3, [sp, #0]
 800a094:	4453      	add	r3, sl
 800a096:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a098:	9b02      	ldr	r3, [sp, #8]
 800a09a:	f003 0301 	and.w	r3, r3, #1
 800a09e:	462f      	mov	r7, r5
 800a0a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0a2:	4605      	mov	r5, r0
 800a0a4:	9b07      	ldr	r3, [sp, #28]
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	4648      	mov	r0, r9
 800a0ac:	9300      	str	r3, [sp, #0]
 800a0ae:	f7ff fa9a 	bl	80095e6 <quorem>
 800a0b2:	4639      	mov	r1, r7
 800a0b4:	9002      	str	r0, [sp, #8]
 800a0b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a0ba:	4648      	mov	r0, r9
 800a0bc:	f000 fc5a 	bl	800a974 <__mcmp>
 800a0c0:	462a      	mov	r2, r5
 800a0c2:	9008      	str	r0, [sp, #32]
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	4658      	mov	r0, fp
 800a0c8:	f000 fc70 	bl	800a9ac <__mdiff>
 800a0cc:	68c2      	ldr	r2, [r0, #12]
 800a0ce:	4606      	mov	r6, r0
 800a0d0:	bb02      	cbnz	r2, 800a114 <_dtoa_r+0xa1c>
 800a0d2:	4601      	mov	r1, r0
 800a0d4:	4648      	mov	r0, r9
 800a0d6:	f000 fc4d 	bl	800a974 <__mcmp>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	4631      	mov	r1, r6
 800a0de:	4658      	mov	r0, fp
 800a0e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a0e2:	f000 fa0d 	bl	800a500 <_Bfree>
 800a0e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0ea:	9e07      	ldr	r6, [sp, #28]
 800a0ec:	ea43 0102 	orr.w	r1, r3, r2
 800a0f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0f2:	4319      	orrs	r1, r3
 800a0f4:	d110      	bne.n	800a118 <_dtoa_r+0xa20>
 800a0f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a0fa:	d029      	beq.n	800a150 <_dtoa_r+0xa58>
 800a0fc:	9b08      	ldr	r3, [sp, #32]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	dd02      	ble.n	800a108 <_dtoa_r+0xa10>
 800a102:	9b02      	ldr	r3, [sp, #8]
 800a104:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a108:	9b00      	ldr	r3, [sp, #0]
 800a10a:	f883 8000 	strb.w	r8, [r3]
 800a10e:	e63f      	b.n	8009d90 <_dtoa_r+0x698>
 800a110:	4628      	mov	r0, r5
 800a112:	e7bb      	b.n	800a08c <_dtoa_r+0x994>
 800a114:	2201      	movs	r2, #1
 800a116:	e7e1      	b.n	800a0dc <_dtoa_r+0x9e4>
 800a118:	9b08      	ldr	r3, [sp, #32]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	db04      	blt.n	800a128 <_dtoa_r+0xa30>
 800a11e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a120:	430b      	orrs	r3, r1
 800a122:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a124:	430b      	orrs	r3, r1
 800a126:	d120      	bne.n	800a16a <_dtoa_r+0xa72>
 800a128:	2a00      	cmp	r2, #0
 800a12a:	dded      	ble.n	800a108 <_dtoa_r+0xa10>
 800a12c:	4649      	mov	r1, r9
 800a12e:	2201      	movs	r2, #1
 800a130:	4658      	mov	r0, fp
 800a132:	f000 fbb3 	bl	800a89c <__lshift>
 800a136:	4621      	mov	r1, r4
 800a138:	4681      	mov	r9, r0
 800a13a:	f000 fc1b 	bl	800a974 <__mcmp>
 800a13e:	2800      	cmp	r0, #0
 800a140:	dc03      	bgt.n	800a14a <_dtoa_r+0xa52>
 800a142:	d1e1      	bne.n	800a108 <_dtoa_r+0xa10>
 800a144:	f018 0f01 	tst.w	r8, #1
 800a148:	d0de      	beq.n	800a108 <_dtoa_r+0xa10>
 800a14a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a14e:	d1d8      	bne.n	800a102 <_dtoa_r+0xa0a>
 800a150:	9a00      	ldr	r2, [sp, #0]
 800a152:	2339      	movs	r3, #57	@ 0x39
 800a154:	7013      	strb	r3, [r2, #0]
 800a156:	4633      	mov	r3, r6
 800a158:	461e      	mov	r6, r3
 800a15a:	3b01      	subs	r3, #1
 800a15c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a160:	2a39      	cmp	r2, #57	@ 0x39
 800a162:	d052      	beq.n	800a20a <_dtoa_r+0xb12>
 800a164:	3201      	adds	r2, #1
 800a166:	701a      	strb	r2, [r3, #0]
 800a168:	e612      	b.n	8009d90 <_dtoa_r+0x698>
 800a16a:	2a00      	cmp	r2, #0
 800a16c:	dd07      	ble.n	800a17e <_dtoa_r+0xa86>
 800a16e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a172:	d0ed      	beq.n	800a150 <_dtoa_r+0xa58>
 800a174:	9a00      	ldr	r2, [sp, #0]
 800a176:	f108 0301 	add.w	r3, r8, #1
 800a17a:	7013      	strb	r3, [r2, #0]
 800a17c:	e608      	b.n	8009d90 <_dtoa_r+0x698>
 800a17e:	9b07      	ldr	r3, [sp, #28]
 800a180:	9a07      	ldr	r2, [sp, #28]
 800a182:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a188:	4293      	cmp	r3, r2
 800a18a:	d028      	beq.n	800a1de <_dtoa_r+0xae6>
 800a18c:	4649      	mov	r1, r9
 800a18e:	2300      	movs	r3, #0
 800a190:	220a      	movs	r2, #10
 800a192:	4658      	mov	r0, fp
 800a194:	f000 f9d6 	bl	800a544 <__multadd>
 800a198:	42af      	cmp	r7, r5
 800a19a:	4681      	mov	r9, r0
 800a19c:	f04f 0300 	mov.w	r3, #0
 800a1a0:	f04f 020a 	mov.w	r2, #10
 800a1a4:	4639      	mov	r1, r7
 800a1a6:	4658      	mov	r0, fp
 800a1a8:	d107      	bne.n	800a1ba <_dtoa_r+0xac2>
 800a1aa:	f000 f9cb 	bl	800a544 <__multadd>
 800a1ae:	4607      	mov	r7, r0
 800a1b0:	4605      	mov	r5, r0
 800a1b2:	9b07      	ldr	r3, [sp, #28]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	9307      	str	r3, [sp, #28]
 800a1b8:	e774      	b.n	800a0a4 <_dtoa_r+0x9ac>
 800a1ba:	f000 f9c3 	bl	800a544 <__multadd>
 800a1be:	4629      	mov	r1, r5
 800a1c0:	4607      	mov	r7, r0
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	220a      	movs	r2, #10
 800a1c6:	4658      	mov	r0, fp
 800a1c8:	f000 f9bc 	bl	800a544 <__multadd>
 800a1cc:	4605      	mov	r5, r0
 800a1ce:	e7f0      	b.n	800a1b2 <_dtoa_r+0xaba>
 800a1d0:	9b00      	ldr	r3, [sp, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	bfcc      	ite	gt
 800a1d6:	461e      	movgt	r6, r3
 800a1d8:	2601      	movle	r6, #1
 800a1da:	4456      	add	r6, sl
 800a1dc:	2700      	movs	r7, #0
 800a1de:	4649      	mov	r1, r9
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	4658      	mov	r0, fp
 800a1e4:	f000 fb5a 	bl	800a89c <__lshift>
 800a1e8:	4621      	mov	r1, r4
 800a1ea:	4681      	mov	r9, r0
 800a1ec:	f000 fbc2 	bl	800a974 <__mcmp>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	dcb0      	bgt.n	800a156 <_dtoa_r+0xa5e>
 800a1f4:	d102      	bne.n	800a1fc <_dtoa_r+0xb04>
 800a1f6:	f018 0f01 	tst.w	r8, #1
 800a1fa:	d1ac      	bne.n	800a156 <_dtoa_r+0xa5e>
 800a1fc:	4633      	mov	r3, r6
 800a1fe:	461e      	mov	r6, r3
 800a200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a204:	2a30      	cmp	r2, #48	@ 0x30
 800a206:	d0fa      	beq.n	800a1fe <_dtoa_r+0xb06>
 800a208:	e5c2      	b.n	8009d90 <_dtoa_r+0x698>
 800a20a:	459a      	cmp	sl, r3
 800a20c:	d1a4      	bne.n	800a158 <_dtoa_r+0xa60>
 800a20e:	9b04      	ldr	r3, [sp, #16]
 800a210:	3301      	adds	r3, #1
 800a212:	9304      	str	r3, [sp, #16]
 800a214:	2331      	movs	r3, #49	@ 0x31
 800a216:	f88a 3000 	strb.w	r3, [sl]
 800a21a:	e5b9      	b.n	8009d90 <_dtoa_r+0x698>
 800a21c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a21e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a27c <_dtoa_r+0xb84>
 800a222:	b11b      	cbz	r3, 800a22c <_dtoa_r+0xb34>
 800a224:	f10a 0308 	add.w	r3, sl, #8
 800a228:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a22a:	6013      	str	r3, [r2, #0]
 800a22c:	4650      	mov	r0, sl
 800a22e:	b019      	add	sp, #100	@ 0x64
 800a230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a236:	2b01      	cmp	r3, #1
 800a238:	f77f ae37 	ble.w	8009eaa <_dtoa_r+0x7b2>
 800a23c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a23e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a240:	2001      	movs	r0, #1
 800a242:	e655      	b.n	8009ef0 <_dtoa_r+0x7f8>
 800a244:	9b00      	ldr	r3, [sp, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	f77f aed6 	ble.w	8009ff8 <_dtoa_r+0x900>
 800a24c:	4656      	mov	r6, sl
 800a24e:	4621      	mov	r1, r4
 800a250:	4648      	mov	r0, r9
 800a252:	f7ff f9c8 	bl	80095e6 <quorem>
 800a256:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a25a:	f806 8b01 	strb.w	r8, [r6], #1
 800a25e:	9b00      	ldr	r3, [sp, #0]
 800a260:	eba6 020a 	sub.w	r2, r6, sl
 800a264:	4293      	cmp	r3, r2
 800a266:	ddb3      	ble.n	800a1d0 <_dtoa_r+0xad8>
 800a268:	4649      	mov	r1, r9
 800a26a:	2300      	movs	r3, #0
 800a26c:	220a      	movs	r2, #10
 800a26e:	4658      	mov	r0, fp
 800a270:	f000 f968 	bl	800a544 <__multadd>
 800a274:	4681      	mov	r9, r0
 800a276:	e7ea      	b.n	800a24e <_dtoa_r+0xb56>
 800a278:	0800b91d 	.word	0x0800b91d
 800a27c:	0800b8a1 	.word	0x0800b8a1

0800a280 <_free_r>:
 800a280:	b538      	push	{r3, r4, r5, lr}
 800a282:	4605      	mov	r5, r0
 800a284:	2900      	cmp	r1, #0
 800a286:	d041      	beq.n	800a30c <_free_r+0x8c>
 800a288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a28c:	1f0c      	subs	r4, r1, #4
 800a28e:	2b00      	cmp	r3, #0
 800a290:	bfb8      	it	lt
 800a292:	18e4      	addlt	r4, r4, r3
 800a294:	f000 f8e8 	bl	800a468 <__malloc_lock>
 800a298:	4a1d      	ldr	r2, [pc, #116]	@ (800a310 <_free_r+0x90>)
 800a29a:	6813      	ldr	r3, [r2, #0]
 800a29c:	b933      	cbnz	r3, 800a2ac <_free_r+0x2c>
 800a29e:	6063      	str	r3, [r4, #4]
 800a2a0:	6014      	str	r4, [r2, #0]
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2a8:	f000 b8e4 	b.w	800a474 <__malloc_unlock>
 800a2ac:	42a3      	cmp	r3, r4
 800a2ae:	d908      	bls.n	800a2c2 <_free_r+0x42>
 800a2b0:	6820      	ldr	r0, [r4, #0]
 800a2b2:	1821      	adds	r1, r4, r0
 800a2b4:	428b      	cmp	r3, r1
 800a2b6:	bf01      	itttt	eq
 800a2b8:	6819      	ldreq	r1, [r3, #0]
 800a2ba:	685b      	ldreq	r3, [r3, #4]
 800a2bc:	1809      	addeq	r1, r1, r0
 800a2be:	6021      	streq	r1, [r4, #0]
 800a2c0:	e7ed      	b.n	800a29e <_free_r+0x1e>
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	b10b      	cbz	r3, 800a2cc <_free_r+0x4c>
 800a2c8:	42a3      	cmp	r3, r4
 800a2ca:	d9fa      	bls.n	800a2c2 <_free_r+0x42>
 800a2cc:	6811      	ldr	r1, [r2, #0]
 800a2ce:	1850      	adds	r0, r2, r1
 800a2d0:	42a0      	cmp	r0, r4
 800a2d2:	d10b      	bne.n	800a2ec <_free_r+0x6c>
 800a2d4:	6820      	ldr	r0, [r4, #0]
 800a2d6:	4401      	add	r1, r0
 800a2d8:	1850      	adds	r0, r2, r1
 800a2da:	4283      	cmp	r3, r0
 800a2dc:	6011      	str	r1, [r2, #0]
 800a2de:	d1e0      	bne.n	800a2a2 <_free_r+0x22>
 800a2e0:	6818      	ldr	r0, [r3, #0]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	6053      	str	r3, [r2, #4]
 800a2e6:	4408      	add	r0, r1
 800a2e8:	6010      	str	r0, [r2, #0]
 800a2ea:	e7da      	b.n	800a2a2 <_free_r+0x22>
 800a2ec:	d902      	bls.n	800a2f4 <_free_r+0x74>
 800a2ee:	230c      	movs	r3, #12
 800a2f0:	602b      	str	r3, [r5, #0]
 800a2f2:	e7d6      	b.n	800a2a2 <_free_r+0x22>
 800a2f4:	6820      	ldr	r0, [r4, #0]
 800a2f6:	1821      	adds	r1, r4, r0
 800a2f8:	428b      	cmp	r3, r1
 800a2fa:	bf04      	itt	eq
 800a2fc:	6819      	ldreq	r1, [r3, #0]
 800a2fe:	685b      	ldreq	r3, [r3, #4]
 800a300:	6063      	str	r3, [r4, #4]
 800a302:	bf04      	itt	eq
 800a304:	1809      	addeq	r1, r1, r0
 800a306:	6021      	streq	r1, [r4, #0]
 800a308:	6054      	str	r4, [r2, #4]
 800a30a:	e7ca      	b.n	800a2a2 <_free_r+0x22>
 800a30c:	bd38      	pop	{r3, r4, r5, pc}
 800a30e:	bf00      	nop
 800a310:	20000d08 	.word	0x20000d08

0800a314 <malloc>:
 800a314:	4b02      	ldr	r3, [pc, #8]	@ (800a320 <malloc+0xc>)
 800a316:	4601      	mov	r1, r0
 800a318:	6818      	ldr	r0, [r3, #0]
 800a31a:	f000 b825 	b.w	800a368 <_malloc_r>
 800a31e:	bf00      	nop
 800a320:	2000001c 	.word	0x2000001c

0800a324 <sbrk_aligned>:
 800a324:	b570      	push	{r4, r5, r6, lr}
 800a326:	4e0f      	ldr	r6, [pc, #60]	@ (800a364 <sbrk_aligned+0x40>)
 800a328:	460c      	mov	r4, r1
 800a32a:	6831      	ldr	r1, [r6, #0]
 800a32c:	4605      	mov	r5, r0
 800a32e:	b911      	cbnz	r1, 800a336 <sbrk_aligned+0x12>
 800a330:	f000 fe46 	bl	800afc0 <_sbrk_r>
 800a334:	6030      	str	r0, [r6, #0]
 800a336:	4621      	mov	r1, r4
 800a338:	4628      	mov	r0, r5
 800a33a:	f000 fe41 	bl	800afc0 <_sbrk_r>
 800a33e:	1c43      	adds	r3, r0, #1
 800a340:	d103      	bne.n	800a34a <sbrk_aligned+0x26>
 800a342:	f04f 34ff 	mov.w	r4, #4294967295
 800a346:	4620      	mov	r0, r4
 800a348:	bd70      	pop	{r4, r5, r6, pc}
 800a34a:	1cc4      	adds	r4, r0, #3
 800a34c:	f024 0403 	bic.w	r4, r4, #3
 800a350:	42a0      	cmp	r0, r4
 800a352:	d0f8      	beq.n	800a346 <sbrk_aligned+0x22>
 800a354:	1a21      	subs	r1, r4, r0
 800a356:	4628      	mov	r0, r5
 800a358:	f000 fe32 	bl	800afc0 <_sbrk_r>
 800a35c:	3001      	adds	r0, #1
 800a35e:	d1f2      	bne.n	800a346 <sbrk_aligned+0x22>
 800a360:	e7ef      	b.n	800a342 <sbrk_aligned+0x1e>
 800a362:	bf00      	nop
 800a364:	20000d04 	.word	0x20000d04

0800a368 <_malloc_r>:
 800a368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a36c:	1ccd      	adds	r5, r1, #3
 800a36e:	f025 0503 	bic.w	r5, r5, #3
 800a372:	3508      	adds	r5, #8
 800a374:	2d0c      	cmp	r5, #12
 800a376:	bf38      	it	cc
 800a378:	250c      	movcc	r5, #12
 800a37a:	2d00      	cmp	r5, #0
 800a37c:	4606      	mov	r6, r0
 800a37e:	db01      	blt.n	800a384 <_malloc_r+0x1c>
 800a380:	42a9      	cmp	r1, r5
 800a382:	d904      	bls.n	800a38e <_malloc_r+0x26>
 800a384:	230c      	movs	r3, #12
 800a386:	6033      	str	r3, [r6, #0]
 800a388:	2000      	movs	r0, #0
 800a38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a38e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a464 <_malloc_r+0xfc>
 800a392:	f000 f869 	bl	800a468 <__malloc_lock>
 800a396:	f8d8 3000 	ldr.w	r3, [r8]
 800a39a:	461c      	mov	r4, r3
 800a39c:	bb44      	cbnz	r4, 800a3f0 <_malloc_r+0x88>
 800a39e:	4629      	mov	r1, r5
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	f7ff ffbf 	bl	800a324 <sbrk_aligned>
 800a3a6:	1c43      	adds	r3, r0, #1
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	d158      	bne.n	800a45e <_malloc_r+0xf6>
 800a3ac:	f8d8 4000 	ldr.w	r4, [r8]
 800a3b0:	4627      	mov	r7, r4
 800a3b2:	2f00      	cmp	r7, #0
 800a3b4:	d143      	bne.n	800a43e <_malloc_r+0xd6>
 800a3b6:	2c00      	cmp	r4, #0
 800a3b8:	d04b      	beq.n	800a452 <_malloc_r+0xea>
 800a3ba:	6823      	ldr	r3, [r4, #0]
 800a3bc:	4639      	mov	r1, r7
 800a3be:	4630      	mov	r0, r6
 800a3c0:	eb04 0903 	add.w	r9, r4, r3
 800a3c4:	f000 fdfc 	bl	800afc0 <_sbrk_r>
 800a3c8:	4581      	cmp	r9, r0
 800a3ca:	d142      	bne.n	800a452 <_malloc_r+0xea>
 800a3cc:	6821      	ldr	r1, [r4, #0]
 800a3ce:	1a6d      	subs	r5, r5, r1
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	f7ff ffa6 	bl	800a324 <sbrk_aligned>
 800a3d8:	3001      	adds	r0, #1
 800a3da:	d03a      	beq.n	800a452 <_malloc_r+0xea>
 800a3dc:	6823      	ldr	r3, [r4, #0]
 800a3de:	442b      	add	r3, r5
 800a3e0:	6023      	str	r3, [r4, #0]
 800a3e2:	f8d8 3000 	ldr.w	r3, [r8]
 800a3e6:	685a      	ldr	r2, [r3, #4]
 800a3e8:	bb62      	cbnz	r2, 800a444 <_malloc_r+0xdc>
 800a3ea:	f8c8 7000 	str.w	r7, [r8]
 800a3ee:	e00f      	b.n	800a410 <_malloc_r+0xa8>
 800a3f0:	6822      	ldr	r2, [r4, #0]
 800a3f2:	1b52      	subs	r2, r2, r5
 800a3f4:	d420      	bmi.n	800a438 <_malloc_r+0xd0>
 800a3f6:	2a0b      	cmp	r2, #11
 800a3f8:	d917      	bls.n	800a42a <_malloc_r+0xc2>
 800a3fa:	1961      	adds	r1, r4, r5
 800a3fc:	42a3      	cmp	r3, r4
 800a3fe:	6025      	str	r5, [r4, #0]
 800a400:	bf18      	it	ne
 800a402:	6059      	strne	r1, [r3, #4]
 800a404:	6863      	ldr	r3, [r4, #4]
 800a406:	bf08      	it	eq
 800a408:	f8c8 1000 	streq.w	r1, [r8]
 800a40c:	5162      	str	r2, [r4, r5]
 800a40e:	604b      	str	r3, [r1, #4]
 800a410:	4630      	mov	r0, r6
 800a412:	f000 f82f 	bl	800a474 <__malloc_unlock>
 800a416:	f104 000b 	add.w	r0, r4, #11
 800a41a:	1d23      	adds	r3, r4, #4
 800a41c:	f020 0007 	bic.w	r0, r0, #7
 800a420:	1ac2      	subs	r2, r0, r3
 800a422:	bf1c      	itt	ne
 800a424:	1a1b      	subne	r3, r3, r0
 800a426:	50a3      	strne	r3, [r4, r2]
 800a428:	e7af      	b.n	800a38a <_malloc_r+0x22>
 800a42a:	6862      	ldr	r2, [r4, #4]
 800a42c:	42a3      	cmp	r3, r4
 800a42e:	bf0c      	ite	eq
 800a430:	f8c8 2000 	streq.w	r2, [r8]
 800a434:	605a      	strne	r2, [r3, #4]
 800a436:	e7eb      	b.n	800a410 <_malloc_r+0xa8>
 800a438:	4623      	mov	r3, r4
 800a43a:	6864      	ldr	r4, [r4, #4]
 800a43c:	e7ae      	b.n	800a39c <_malloc_r+0x34>
 800a43e:	463c      	mov	r4, r7
 800a440:	687f      	ldr	r7, [r7, #4]
 800a442:	e7b6      	b.n	800a3b2 <_malloc_r+0x4a>
 800a444:	461a      	mov	r2, r3
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	42a3      	cmp	r3, r4
 800a44a:	d1fb      	bne.n	800a444 <_malloc_r+0xdc>
 800a44c:	2300      	movs	r3, #0
 800a44e:	6053      	str	r3, [r2, #4]
 800a450:	e7de      	b.n	800a410 <_malloc_r+0xa8>
 800a452:	230c      	movs	r3, #12
 800a454:	6033      	str	r3, [r6, #0]
 800a456:	4630      	mov	r0, r6
 800a458:	f000 f80c 	bl	800a474 <__malloc_unlock>
 800a45c:	e794      	b.n	800a388 <_malloc_r+0x20>
 800a45e:	6005      	str	r5, [r0, #0]
 800a460:	e7d6      	b.n	800a410 <_malloc_r+0xa8>
 800a462:	bf00      	nop
 800a464:	20000d08 	.word	0x20000d08

0800a468 <__malloc_lock>:
 800a468:	4801      	ldr	r0, [pc, #4]	@ (800a470 <__malloc_lock+0x8>)
 800a46a:	f7ff b8ba 	b.w	80095e2 <__retarget_lock_acquire_recursive>
 800a46e:	bf00      	nop
 800a470:	20000d00 	.word	0x20000d00

0800a474 <__malloc_unlock>:
 800a474:	4801      	ldr	r0, [pc, #4]	@ (800a47c <__malloc_unlock+0x8>)
 800a476:	f7ff b8b5 	b.w	80095e4 <__retarget_lock_release_recursive>
 800a47a:	bf00      	nop
 800a47c:	20000d00 	.word	0x20000d00

0800a480 <_Balloc>:
 800a480:	b570      	push	{r4, r5, r6, lr}
 800a482:	69c6      	ldr	r6, [r0, #28]
 800a484:	4604      	mov	r4, r0
 800a486:	460d      	mov	r5, r1
 800a488:	b976      	cbnz	r6, 800a4a8 <_Balloc+0x28>
 800a48a:	2010      	movs	r0, #16
 800a48c:	f7ff ff42 	bl	800a314 <malloc>
 800a490:	4602      	mov	r2, r0
 800a492:	61e0      	str	r0, [r4, #28]
 800a494:	b920      	cbnz	r0, 800a4a0 <_Balloc+0x20>
 800a496:	4b18      	ldr	r3, [pc, #96]	@ (800a4f8 <_Balloc+0x78>)
 800a498:	4818      	ldr	r0, [pc, #96]	@ (800a4fc <_Balloc+0x7c>)
 800a49a:	216b      	movs	r1, #107	@ 0x6b
 800a49c:	f000 fdae 	bl	800affc <__assert_func>
 800a4a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4a4:	6006      	str	r6, [r0, #0]
 800a4a6:	60c6      	str	r6, [r0, #12]
 800a4a8:	69e6      	ldr	r6, [r4, #28]
 800a4aa:	68f3      	ldr	r3, [r6, #12]
 800a4ac:	b183      	cbz	r3, 800a4d0 <_Balloc+0x50>
 800a4ae:	69e3      	ldr	r3, [r4, #28]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4b6:	b9b8      	cbnz	r0, 800a4e8 <_Balloc+0x68>
 800a4b8:	2101      	movs	r1, #1
 800a4ba:	fa01 f605 	lsl.w	r6, r1, r5
 800a4be:	1d72      	adds	r2, r6, #5
 800a4c0:	0092      	lsls	r2, r2, #2
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f000 fdb8 	bl	800b038 <_calloc_r>
 800a4c8:	b160      	cbz	r0, 800a4e4 <_Balloc+0x64>
 800a4ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4ce:	e00e      	b.n	800a4ee <_Balloc+0x6e>
 800a4d0:	2221      	movs	r2, #33	@ 0x21
 800a4d2:	2104      	movs	r1, #4
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	f000 fdaf 	bl	800b038 <_calloc_r>
 800a4da:	69e3      	ldr	r3, [r4, #28]
 800a4dc:	60f0      	str	r0, [r6, #12]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d1e4      	bne.n	800a4ae <_Balloc+0x2e>
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	bd70      	pop	{r4, r5, r6, pc}
 800a4e8:	6802      	ldr	r2, [r0, #0]
 800a4ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4f4:	e7f7      	b.n	800a4e6 <_Balloc+0x66>
 800a4f6:	bf00      	nop
 800a4f8:	0800b8ae 	.word	0x0800b8ae
 800a4fc:	0800b92e 	.word	0x0800b92e

0800a500 <_Bfree>:
 800a500:	b570      	push	{r4, r5, r6, lr}
 800a502:	69c6      	ldr	r6, [r0, #28]
 800a504:	4605      	mov	r5, r0
 800a506:	460c      	mov	r4, r1
 800a508:	b976      	cbnz	r6, 800a528 <_Bfree+0x28>
 800a50a:	2010      	movs	r0, #16
 800a50c:	f7ff ff02 	bl	800a314 <malloc>
 800a510:	4602      	mov	r2, r0
 800a512:	61e8      	str	r0, [r5, #28]
 800a514:	b920      	cbnz	r0, 800a520 <_Bfree+0x20>
 800a516:	4b09      	ldr	r3, [pc, #36]	@ (800a53c <_Bfree+0x3c>)
 800a518:	4809      	ldr	r0, [pc, #36]	@ (800a540 <_Bfree+0x40>)
 800a51a:	218f      	movs	r1, #143	@ 0x8f
 800a51c:	f000 fd6e 	bl	800affc <__assert_func>
 800a520:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a524:	6006      	str	r6, [r0, #0]
 800a526:	60c6      	str	r6, [r0, #12]
 800a528:	b13c      	cbz	r4, 800a53a <_Bfree+0x3a>
 800a52a:	69eb      	ldr	r3, [r5, #28]
 800a52c:	6862      	ldr	r2, [r4, #4]
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a534:	6021      	str	r1, [r4, #0]
 800a536:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a53a:	bd70      	pop	{r4, r5, r6, pc}
 800a53c:	0800b8ae 	.word	0x0800b8ae
 800a540:	0800b92e 	.word	0x0800b92e

0800a544 <__multadd>:
 800a544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a548:	690d      	ldr	r5, [r1, #16]
 800a54a:	4607      	mov	r7, r0
 800a54c:	460c      	mov	r4, r1
 800a54e:	461e      	mov	r6, r3
 800a550:	f101 0c14 	add.w	ip, r1, #20
 800a554:	2000      	movs	r0, #0
 800a556:	f8dc 3000 	ldr.w	r3, [ip]
 800a55a:	b299      	uxth	r1, r3
 800a55c:	fb02 6101 	mla	r1, r2, r1, r6
 800a560:	0c1e      	lsrs	r6, r3, #16
 800a562:	0c0b      	lsrs	r3, r1, #16
 800a564:	fb02 3306 	mla	r3, r2, r6, r3
 800a568:	b289      	uxth	r1, r1
 800a56a:	3001      	adds	r0, #1
 800a56c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a570:	4285      	cmp	r5, r0
 800a572:	f84c 1b04 	str.w	r1, [ip], #4
 800a576:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a57a:	dcec      	bgt.n	800a556 <__multadd+0x12>
 800a57c:	b30e      	cbz	r6, 800a5c2 <__multadd+0x7e>
 800a57e:	68a3      	ldr	r3, [r4, #8]
 800a580:	42ab      	cmp	r3, r5
 800a582:	dc19      	bgt.n	800a5b8 <__multadd+0x74>
 800a584:	6861      	ldr	r1, [r4, #4]
 800a586:	4638      	mov	r0, r7
 800a588:	3101      	adds	r1, #1
 800a58a:	f7ff ff79 	bl	800a480 <_Balloc>
 800a58e:	4680      	mov	r8, r0
 800a590:	b928      	cbnz	r0, 800a59e <__multadd+0x5a>
 800a592:	4602      	mov	r2, r0
 800a594:	4b0c      	ldr	r3, [pc, #48]	@ (800a5c8 <__multadd+0x84>)
 800a596:	480d      	ldr	r0, [pc, #52]	@ (800a5cc <__multadd+0x88>)
 800a598:	21ba      	movs	r1, #186	@ 0xba
 800a59a:	f000 fd2f 	bl	800affc <__assert_func>
 800a59e:	6922      	ldr	r2, [r4, #16]
 800a5a0:	3202      	adds	r2, #2
 800a5a2:	f104 010c 	add.w	r1, r4, #12
 800a5a6:	0092      	lsls	r2, r2, #2
 800a5a8:	300c      	adds	r0, #12
 800a5aa:	f000 fd19 	bl	800afe0 <memcpy>
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	4638      	mov	r0, r7
 800a5b2:	f7ff ffa5 	bl	800a500 <_Bfree>
 800a5b6:	4644      	mov	r4, r8
 800a5b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a5bc:	3501      	adds	r5, #1
 800a5be:	615e      	str	r6, [r3, #20]
 800a5c0:	6125      	str	r5, [r4, #16]
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5c8:	0800b91d 	.word	0x0800b91d
 800a5cc:	0800b92e 	.word	0x0800b92e

0800a5d0 <__hi0bits>:
 800a5d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	bf36      	itet	cc
 800a5d8:	0403      	lslcc	r3, r0, #16
 800a5da:	2000      	movcs	r0, #0
 800a5dc:	2010      	movcc	r0, #16
 800a5de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a5e2:	bf3c      	itt	cc
 800a5e4:	021b      	lslcc	r3, r3, #8
 800a5e6:	3008      	addcc	r0, #8
 800a5e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5ec:	bf3c      	itt	cc
 800a5ee:	011b      	lslcc	r3, r3, #4
 800a5f0:	3004      	addcc	r0, #4
 800a5f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5f6:	bf3c      	itt	cc
 800a5f8:	009b      	lslcc	r3, r3, #2
 800a5fa:	3002      	addcc	r0, #2
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	db05      	blt.n	800a60c <__hi0bits+0x3c>
 800a600:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a604:	f100 0001 	add.w	r0, r0, #1
 800a608:	bf08      	it	eq
 800a60a:	2020      	moveq	r0, #32
 800a60c:	4770      	bx	lr

0800a60e <__lo0bits>:
 800a60e:	6803      	ldr	r3, [r0, #0]
 800a610:	4602      	mov	r2, r0
 800a612:	f013 0007 	ands.w	r0, r3, #7
 800a616:	d00b      	beq.n	800a630 <__lo0bits+0x22>
 800a618:	07d9      	lsls	r1, r3, #31
 800a61a:	d421      	bmi.n	800a660 <__lo0bits+0x52>
 800a61c:	0798      	lsls	r0, r3, #30
 800a61e:	bf49      	itett	mi
 800a620:	085b      	lsrmi	r3, r3, #1
 800a622:	089b      	lsrpl	r3, r3, #2
 800a624:	2001      	movmi	r0, #1
 800a626:	6013      	strmi	r3, [r2, #0]
 800a628:	bf5c      	itt	pl
 800a62a:	6013      	strpl	r3, [r2, #0]
 800a62c:	2002      	movpl	r0, #2
 800a62e:	4770      	bx	lr
 800a630:	b299      	uxth	r1, r3
 800a632:	b909      	cbnz	r1, 800a638 <__lo0bits+0x2a>
 800a634:	0c1b      	lsrs	r3, r3, #16
 800a636:	2010      	movs	r0, #16
 800a638:	b2d9      	uxtb	r1, r3
 800a63a:	b909      	cbnz	r1, 800a640 <__lo0bits+0x32>
 800a63c:	3008      	adds	r0, #8
 800a63e:	0a1b      	lsrs	r3, r3, #8
 800a640:	0719      	lsls	r1, r3, #28
 800a642:	bf04      	itt	eq
 800a644:	091b      	lsreq	r3, r3, #4
 800a646:	3004      	addeq	r0, #4
 800a648:	0799      	lsls	r1, r3, #30
 800a64a:	bf04      	itt	eq
 800a64c:	089b      	lsreq	r3, r3, #2
 800a64e:	3002      	addeq	r0, #2
 800a650:	07d9      	lsls	r1, r3, #31
 800a652:	d403      	bmi.n	800a65c <__lo0bits+0x4e>
 800a654:	085b      	lsrs	r3, r3, #1
 800a656:	f100 0001 	add.w	r0, r0, #1
 800a65a:	d003      	beq.n	800a664 <__lo0bits+0x56>
 800a65c:	6013      	str	r3, [r2, #0]
 800a65e:	4770      	bx	lr
 800a660:	2000      	movs	r0, #0
 800a662:	4770      	bx	lr
 800a664:	2020      	movs	r0, #32
 800a666:	4770      	bx	lr

0800a668 <__i2b>:
 800a668:	b510      	push	{r4, lr}
 800a66a:	460c      	mov	r4, r1
 800a66c:	2101      	movs	r1, #1
 800a66e:	f7ff ff07 	bl	800a480 <_Balloc>
 800a672:	4602      	mov	r2, r0
 800a674:	b928      	cbnz	r0, 800a682 <__i2b+0x1a>
 800a676:	4b05      	ldr	r3, [pc, #20]	@ (800a68c <__i2b+0x24>)
 800a678:	4805      	ldr	r0, [pc, #20]	@ (800a690 <__i2b+0x28>)
 800a67a:	f240 1145 	movw	r1, #325	@ 0x145
 800a67e:	f000 fcbd 	bl	800affc <__assert_func>
 800a682:	2301      	movs	r3, #1
 800a684:	6144      	str	r4, [r0, #20]
 800a686:	6103      	str	r3, [r0, #16]
 800a688:	bd10      	pop	{r4, pc}
 800a68a:	bf00      	nop
 800a68c:	0800b91d 	.word	0x0800b91d
 800a690:	0800b92e 	.word	0x0800b92e

0800a694 <__multiply>:
 800a694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a698:	4614      	mov	r4, r2
 800a69a:	690a      	ldr	r2, [r1, #16]
 800a69c:	6923      	ldr	r3, [r4, #16]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	bfa8      	it	ge
 800a6a2:	4623      	movge	r3, r4
 800a6a4:	460f      	mov	r7, r1
 800a6a6:	bfa4      	itt	ge
 800a6a8:	460c      	movge	r4, r1
 800a6aa:	461f      	movge	r7, r3
 800a6ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a6b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a6b4:	68a3      	ldr	r3, [r4, #8]
 800a6b6:	6861      	ldr	r1, [r4, #4]
 800a6b8:	eb0a 0609 	add.w	r6, sl, r9
 800a6bc:	42b3      	cmp	r3, r6
 800a6be:	b085      	sub	sp, #20
 800a6c0:	bfb8      	it	lt
 800a6c2:	3101      	addlt	r1, #1
 800a6c4:	f7ff fedc 	bl	800a480 <_Balloc>
 800a6c8:	b930      	cbnz	r0, 800a6d8 <__multiply+0x44>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	4b44      	ldr	r3, [pc, #272]	@ (800a7e0 <__multiply+0x14c>)
 800a6ce:	4845      	ldr	r0, [pc, #276]	@ (800a7e4 <__multiply+0x150>)
 800a6d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a6d4:	f000 fc92 	bl	800affc <__assert_func>
 800a6d8:	f100 0514 	add.w	r5, r0, #20
 800a6dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a6e0:	462b      	mov	r3, r5
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	4543      	cmp	r3, r8
 800a6e6:	d321      	bcc.n	800a72c <__multiply+0x98>
 800a6e8:	f107 0114 	add.w	r1, r7, #20
 800a6ec:	f104 0214 	add.w	r2, r4, #20
 800a6f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a6f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a6f8:	9302      	str	r3, [sp, #8]
 800a6fa:	1b13      	subs	r3, r2, r4
 800a6fc:	3b15      	subs	r3, #21
 800a6fe:	f023 0303 	bic.w	r3, r3, #3
 800a702:	3304      	adds	r3, #4
 800a704:	f104 0715 	add.w	r7, r4, #21
 800a708:	42ba      	cmp	r2, r7
 800a70a:	bf38      	it	cc
 800a70c:	2304      	movcc	r3, #4
 800a70e:	9301      	str	r3, [sp, #4]
 800a710:	9b02      	ldr	r3, [sp, #8]
 800a712:	9103      	str	r1, [sp, #12]
 800a714:	428b      	cmp	r3, r1
 800a716:	d80c      	bhi.n	800a732 <__multiply+0x9e>
 800a718:	2e00      	cmp	r6, #0
 800a71a:	dd03      	ble.n	800a724 <__multiply+0x90>
 800a71c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a720:	2b00      	cmp	r3, #0
 800a722:	d05b      	beq.n	800a7dc <__multiply+0x148>
 800a724:	6106      	str	r6, [r0, #16]
 800a726:	b005      	add	sp, #20
 800a728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a72c:	f843 2b04 	str.w	r2, [r3], #4
 800a730:	e7d8      	b.n	800a6e4 <__multiply+0x50>
 800a732:	f8b1 a000 	ldrh.w	sl, [r1]
 800a736:	f1ba 0f00 	cmp.w	sl, #0
 800a73a:	d024      	beq.n	800a786 <__multiply+0xf2>
 800a73c:	f104 0e14 	add.w	lr, r4, #20
 800a740:	46a9      	mov	r9, r5
 800a742:	f04f 0c00 	mov.w	ip, #0
 800a746:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a74a:	f8d9 3000 	ldr.w	r3, [r9]
 800a74e:	fa1f fb87 	uxth.w	fp, r7
 800a752:	b29b      	uxth	r3, r3
 800a754:	fb0a 330b 	mla	r3, sl, fp, r3
 800a758:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a75c:	f8d9 7000 	ldr.w	r7, [r9]
 800a760:	4463      	add	r3, ip
 800a762:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a766:	fb0a c70b 	mla	r7, sl, fp, ip
 800a76a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a76e:	b29b      	uxth	r3, r3
 800a770:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a774:	4572      	cmp	r2, lr
 800a776:	f849 3b04 	str.w	r3, [r9], #4
 800a77a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a77e:	d8e2      	bhi.n	800a746 <__multiply+0xb2>
 800a780:	9b01      	ldr	r3, [sp, #4]
 800a782:	f845 c003 	str.w	ip, [r5, r3]
 800a786:	9b03      	ldr	r3, [sp, #12]
 800a788:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a78c:	3104      	adds	r1, #4
 800a78e:	f1b9 0f00 	cmp.w	r9, #0
 800a792:	d021      	beq.n	800a7d8 <__multiply+0x144>
 800a794:	682b      	ldr	r3, [r5, #0]
 800a796:	f104 0c14 	add.w	ip, r4, #20
 800a79a:	46ae      	mov	lr, r5
 800a79c:	f04f 0a00 	mov.w	sl, #0
 800a7a0:	f8bc b000 	ldrh.w	fp, [ip]
 800a7a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a7a8:	fb09 770b 	mla	r7, r9, fp, r7
 800a7ac:	4457      	add	r7, sl
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a7b4:	f84e 3b04 	str.w	r3, [lr], #4
 800a7b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a7bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7c0:	f8be 3000 	ldrh.w	r3, [lr]
 800a7c4:	fb09 330a 	mla	r3, r9, sl, r3
 800a7c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a7cc:	4562      	cmp	r2, ip
 800a7ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7d2:	d8e5      	bhi.n	800a7a0 <__multiply+0x10c>
 800a7d4:	9f01      	ldr	r7, [sp, #4]
 800a7d6:	51eb      	str	r3, [r5, r7]
 800a7d8:	3504      	adds	r5, #4
 800a7da:	e799      	b.n	800a710 <__multiply+0x7c>
 800a7dc:	3e01      	subs	r6, #1
 800a7de:	e79b      	b.n	800a718 <__multiply+0x84>
 800a7e0:	0800b91d 	.word	0x0800b91d
 800a7e4:	0800b92e 	.word	0x0800b92e

0800a7e8 <__pow5mult>:
 800a7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7ec:	4615      	mov	r5, r2
 800a7ee:	f012 0203 	ands.w	r2, r2, #3
 800a7f2:	4607      	mov	r7, r0
 800a7f4:	460e      	mov	r6, r1
 800a7f6:	d007      	beq.n	800a808 <__pow5mult+0x20>
 800a7f8:	4c25      	ldr	r4, [pc, #148]	@ (800a890 <__pow5mult+0xa8>)
 800a7fa:	3a01      	subs	r2, #1
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a802:	f7ff fe9f 	bl	800a544 <__multadd>
 800a806:	4606      	mov	r6, r0
 800a808:	10ad      	asrs	r5, r5, #2
 800a80a:	d03d      	beq.n	800a888 <__pow5mult+0xa0>
 800a80c:	69fc      	ldr	r4, [r7, #28]
 800a80e:	b97c      	cbnz	r4, 800a830 <__pow5mult+0x48>
 800a810:	2010      	movs	r0, #16
 800a812:	f7ff fd7f 	bl	800a314 <malloc>
 800a816:	4602      	mov	r2, r0
 800a818:	61f8      	str	r0, [r7, #28]
 800a81a:	b928      	cbnz	r0, 800a828 <__pow5mult+0x40>
 800a81c:	4b1d      	ldr	r3, [pc, #116]	@ (800a894 <__pow5mult+0xac>)
 800a81e:	481e      	ldr	r0, [pc, #120]	@ (800a898 <__pow5mult+0xb0>)
 800a820:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a824:	f000 fbea 	bl	800affc <__assert_func>
 800a828:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a82c:	6004      	str	r4, [r0, #0]
 800a82e:	60c4      	str	r4, [r0, #12]
 800a830:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a834:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a838:	b94c      	cbnz	r4, 800a84e <__pow5mult+0x66>
 800a83a:	f240 2171 	movw	r1, #625	@ 0x271
 800a83e:	4638      	mov	r0, r7
 800a840:	f7ff ff12 	bl	800a668 <__i2b>
 800a844:	2300      	movs	r3, #0
 800a846:	f8c8 0008 	str.w	r0, [r8, #8]
 800a84a:	4604      	mov	r4, r0
 800a84c:	6003      	str	r3, [r0, #0]
 800a84e:	f04f 0900 	mov.w	r9, #0
 800a852:	07eb      	lsls	r3, r5, #31
 800a854:	d50a      	bpl.n	800a86c <__pow5mult+0x84>
 800a856:	4631      	mov	r1, r6
 800a858:	4622      	mov	r2, r4
 800a85a:	4638      	mov	r0, r7
 800a85c:	f7ff ff1a 	bl	800a694 <__multiply>
 800a860:	4631      	mov	r1, r6
 800a862:	4680      	mov	r8, r0
 800a864:	4638      	mov	r0, r7
 800a866:	f7ff fe4b 	bl	800a500 <_Bfree>
 800a86a:	4646      	mov	r6, r8
 800a86c:	106d      	asrs	r5, r5, #1
 800a86e:	d00b      	beq.n	800a888 <__pow5mult+0xa0>
 800a870:	6820      	ldr	r0, [r4, #0]
 800a872:	b938      	cbnz	r0, 800a884 <__pow5mult+0x9c>
 800a874:	4622      	mov	r2, r4
 800a876:	4621      	mov	r1, r4
 800a878:	4638      	mov	r0, r7
 800a87a:	f7ff ff0b 	bl	800a694 <__multiply>
 800a87e:	6020      	str	r0, [r4, #0]
 800a880:	f8c0 9000 	str.w	r9, [r0]
 800a884:	4604      	mov	r4, r0
 800a886:	e7e4      	b.n	800a852 <__pow5mult+0x6a>
 800a888:	4630      	mov	r0, r6
 800a88a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a88e:	bf00      	nop
 800a890:	0800b988 	.word	0x0800b988
 800a894:	0800b8ae 	.word	0x0800b8ae
 800a898:	0800b92e 	.word	0x0800b92e

0800a89c <__lshift>:
 800a89c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a0:	460c      	mov	r4, r1
 800a8a2:	6849      	ldr	r1, [r1, #4]
 800a8a4:	6923      	ldr	r3, [r4, #16]
 800a8a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8aa:	68a3      	ldr	r3, [r4, #8]
 800a8ac:	4607      	mov	r7, r0
 800a8ae:	4691      	mov	r9, r2
 800a8b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8b4:	f108 0601 	add.w	r6, r8, #1
 800a8b8:	42b3      	cmp	r3, r6
 800a8ba:	db0b      	blt.n	800a8d4 <__lshift+0x38>
 800a8bc:	4638      	mov	r0, r7
 800a8be:	f7ff fddf 	bl	800a480 <_Balloc>
 800a8c2:	4605      	mov	r5, r0
 800a8c4:	b948      	cbnz	r0, 800a8da <__lshift+0x3e>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	4b28      	ldr	r3, [pc, #160]	@ (800a96c <__lshift+0xd0>)
 800a8ca:	4829      	ldr	r0, [pc, #164]	@ (800a970 <__lshift+0xd4>)
 800a8cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a8d0:	f000 fb94 	bl	800affc <__assert_func>
 800a8d4:	3101      	adds	r1, #1
 800a8d6:	005b      	lsls	r3, r3, #1
 800a8d8:	e7ee      	b.n	800a8b8 <__lshift+0x1c>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	f100 0114 	add.w	r1, r0, #20
 800a8e0:	f100 0210 	add.w	r2, r0, #16
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	4553      	cmp	r3, sl
 800a8e8:	db33      	blt.n	800a952 <__lshift+0xb6>
 800a8ea:	6920      	ldr	r0, [r4, #16]
 800a8ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8f0:	f104 0314 	add.w	r3, r4, #20
 800a8f4:	f019 091f 	ands.w	r9, r9, #31
 800a8f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a900:	d02b      	beq.n	800a95a <__lshift+0xbe>
 800a902:	f1c9 0e20 	rsb	lr, r9, #32
 800a906:	468a      	mov	sl, r1
 800a908:	2200      	movs	r2, #0
 800a90a:	6818      	ldr	r0, [r3, #0]
 800a90c:	fa00 f009 	lsl.w	r0, r0, r9
 800a910:	4310      	orrs	r0, r2
 800a912:	f84a 0b04 	str.w	r0, [sl], #4
 800a916:	f853 2b04 	ldr.w	r2, [r3], #4
 800a91a:	459c      	cmp	ip, r3
 800a91c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a920:	d8f3      	bhi.n	800a90a <__lshift+0x6e>
 800a922:	ebac 0304 	sub.w	r3, ip, r4
 800a926:	3b15      	subs	r3, #21
 800a928:	f023 0303 	bic.w	r3, r3, #3
 800a92c:	3304      	adds	r3, #4
 800a92e:	f104 0015 	add.w	r0, r4, #21
 800a932:	4584      	cmp	ip, r0
 800a934:	bf38      	it	cc
 800a936:	2304      	movcc	r3, #4
 800a938:	50ca      	str	r2, [r1, r3]
 800a93a:	b10a      	cbz	r2, 800a940 <__lshift+0xa4>
 800a93c:	f108 0602 	add.w	r6, r8, #2
 800a940:	3e01      	subs	r6, #1
 800a942:	4638      	mov	r0, r7
 800a944:	612e      	str	r6, [r5, #16]
 800a946:	4621      	mov	r1, r4
 800a948:	f7ff fdda 	bl	800a500 <_Bfree>
 800a94c:	4628      	mov	r0, r5
 800a94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a952:	f842 0f04 	str.w	r0, [r2, #4]!
 800a956:	3301      	adds	r3, #1
 800a958:	e7c5      	b.n	800a8e6 <__lshift+0x4a>
 800a95a:	3904      	subs	r1, #4
 800a95c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a960:	f841 2f04 	str.w	r2, [r1, #4]!
 800a964:	459c      	cmp	ip, r3
 800a966:	d8f9      	bhi.n	800a95c <__lshift+0xc0>
 800a968:	e7ea      	b.n	800a940 <__lshift+0xa4>
 800a96a:	bf00      	nop
 800a96c:	0800b91d 	.word	0x0800b91d
 800a970:	0800b92e 	.word	0x0800b92e

0800a974 <__mcmp>:
 800a974:	690a      	ldr	r2, [r1, #16]
 800a976:	4603      	mov	r3, r0
 800a978:	6900      	ldr	r0, [r0, #16]
 800a97a:	1a80      	subs	r0, r0, r2
 800a97c:	b530      	push	{r4, r5, lr}
 800a97e:	d10e      	bne.n	800a99e <__mcmp+0x2a>
 800a980:	3314      	adds	r3, #20
 800a982:	3114      	adds	r1, #20
 800a984:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a988:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a98c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a990:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a994:	4295      	cmp	r5, r2
 800a996:	d003      	beq.n	800a9a0 <__mcmp+0x2c>
 800a998:	d205      	bcs.n	800a9a6 <__mcmp+0x32>
 800a99a:	f04f 30ff 	mov.w	r0, #4294967295
 800a99e:	bd30      	pop	{r4, r5, pc}
 800a9a0:	42a3      	cmp	r3, r4
 800a9a2:	d3f3      	bcc.n	800a98c <__mcmp+0x18>
 800a9a4:	e7fb      	b.n	800a99e <__mcmp+0x2a>
 800a9a6:	2001      	movs	r0, #1
 800a9a8:	e7f9      	b.n	800a99e <__mcmp+0x2a>
	...

0800a9ac <__mdiff>:
 800a9ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b0:	4689      	mov	r9, r1
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	4611      	mov	r1, r2
 800a9b6:	4648      	mov	r0, r9
 800a9b8:	4614      	mov	r4, r2
 800a9ba:	f7ff ffdb 	bl	800a974 <__mcmp>
 800a9be:	1e05      	subs	r5, r0, #0
 800a9c0:	d112      	bne.n	800a9e8 <__mdiff+0x3c>
 800a9c2:	4629      	mov	r1, r5
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	f7ff fd5b 	bl	800a480 <_Balloc>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	b928      	cbnz	r0, 800a9da <__mdiff+0x2e>
 800a9ce:	4b3f      	ldr	r3, [pc, #252]	@ (800aacc <__mdiff+0x120>)
 800a9d0:	f240 2137 	movw	r1, #567	@ 0x237
 800a9d4:	483e      	ldr	r0, [pc, #248]	@ (800aad0 <__mdiff+0x124>)
 800a9d6:	f000 fb11 	bl	800affc <__assert_func>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9e0:	4610      	mov	r0, r2
 800a9e2:	b003      	add	sp, #12
 800a9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e8:	bfbc      	itt	lt
 800a9ea:	464b      	movlt	r3, r9
 800a9ec:	46a1      	movlt	r9, r4
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a9f4:	bfba      	itte	lt
 800a9f6:	461c      	movlt	r4, r3
 800a9f8:	2501      	movlt	r5, #1
 800a9fa:	2500      	movge	r5, #0
 800a9fc:	f7ff fd40 	bl	800a480 <_Balloc>
 800aa00:	4602      	mov	r2, r0
 800aa02:	b918      	cbnz	r0, 800aa0c <__mdiff+0x60>
 800aa04:	4b31      	ldr	r3, [pc, #196]	@ (800aacc <__mdiff+0x120>)
 800aa06:	f240 2145 	movw	r1, #581	@ 0x245
 800aa0a:	e7e3      	b.n	800a9d4 <__mdiff+0x28>
 800aa0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aa10:	6926      	ldr	r6, [r4, #16]
 800aa12:	60c5      	str	r5, [r0, #12]
 800aa14:	f109 0310 	add.w	r3, r9, #16
 800aa18:	f109 0514 	add.w	r5, r9, #20
 800aa1c:	f104 0e14 	add.w	lr, r4, #20
 800aa20:	f100 0b14 	add.w	fp, r0, #20
 800aa24:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aa28:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aa2c:	9301      	str	r3, [sp, #4]
 800aa2e:	46d9      	mov	r9, fp
 800aa30:	f04f 0c00 	mov.w	ip, #0
 800aa34:	9b01      	ldr	r3, [sp, #4]
 800aa36:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aa3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aa3e:	9301      	str	r3, [sp, #4]
 800aa40:	fa1f f38a 	uxth.w	r3, sl
 800aa44:	4619      	mov	r1, r3
 800aa46:	b283      	uxth	r3, r0
 800aa48:	1acb      	subs	r3, r1, r3
 800aa4a:	0c00      	lsrs	r0, r0, #16
 800aa4c:	4463      	add	r3, ip
 800aa4e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aa52:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aa5c:	4576      	cmp	r6, lr
 800aa5e:	f849 3b04 	str.w	r3, [r9], #4
 800aa62:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa66:	d8e5      	bhi.n	800aa34 <__mdiff+0x88>
 800aa68:	1b33      	subs	r3, r6, r4
 800aa6a:	3b15      	subs	r3, #21
 800aa6c:	f023 0303 	bic.w	r3, r3, #3
 800aa70:	3415      	adds	r4, #21
 800aa72:	3304      	adds	r3, #4
 800aa74:	42a6      	cmp	r6, r4
 800aa76:	bf38      	it	cc
 800aa78:	2304      	movcc	r3, #4
 800aa7a:	441d      	add	r5, r3
 800aa7c:	445b      	add	r3, fp
 800aa7e:	461e      	mov	r6, r3
 800aa80:	462c      	mov	r4, r5
 800aa82:	4544      	cmp	r4, r8
 800aa84:	d30e      	bcc.n	800aaa4 <__mdiff+0xf8>
 800aa86:	f108 0103 	add.w	r1, r8, #3
 800aa8a:	1b49      	subs	r1, r1, r5
 800aa8c:	f021 0103 	bic.w	r1, r1, #3
 800aa90:	3d03      	subs	r5, #3
 800aa92:	45a8      	cmp	r8, r5
 800aa94:	bf38      	it	cc
 800aa96:	2100      	movcc	r1, #0
 800aa98:	440b      	add	r3, r1
 800aa9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa9e:	b191      	cbz	r1, 800aac6 <__mdiff+0x11a>
 800aaa0:	6117      	str	r7, [r2, #16]
 800aaa2:	e79d      	b.n	800a9e0 <__mdiff+0x34>
 800aaa4:	f854 1b04 	ldr.w	r1, [r4], #4
 800aaa8:	46e6      	mov	lr, ip
 800aaaa:	0c08      	lsrs	r0, r1, #16
 800aaac:	fa1c fc81 	uxtah	ip, ip, r1
 800aab0:	4471      	add	r1, lr
 800aab2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aab6:	b289      	uxth	r1, r1
 800aab8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aabc:	f846 1b04 	str.w	r1, [r6], #4
 800aac0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aac4:	e7dd      	b.n	800aa82 <__mdiff+0xd6>
 800aac6:	3f01      	subs	r7, #1
 800aac8:	e7e7      	b.n	800aa9a <__mdiff+0xee>
 800aaca:	bf00      	nop
 800aacc:	0800b91d 	.word	0x0800b91d
 800aad0:	0800b92e 	.word	0x0800b92e

0800aad4 <__d2b>:
 800aad4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aad8:	460f      	mov	r7, r1
 800aada:	2101      	movs	r1, #1
 800aadc:	ec59 8b10 	vmov	r8, r9, d0
 800aae0:	4616      	mov	r6, r2
 800aae2:	f7ff fccd 	bl	800a480 <_Balloc>
 800aae6:	4604      	mov	r4, r0
 800aae8:	b930      	cbnz	r0, 800aaf8 <__d2b+0x24>
 800aaea:	4602      	mov	r2, r0
 800aaec:	4b23      	ldr	r3, [pc, #140]	@ (800ab7c <__d2b+0xa8>)
 800aaee:	4824      	ldr	r0, [pc, #144]	@ (800ab80 <__d2b+0xac>)
 800aaf0:	f240 310f 	movw	r1, #783	@ 0x30f
 800aaf4:	f000 fa82 	bl	800affc <__assert_func>
 800aaf8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aafc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab00:	b10d      	cbz	r5, 800ab06 <__d2b+0x32>
 800ab02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab06:	9301      	str	r3, [sp, #4]
 800ab08:	f1b8 0300 	subs.w	r3, r8, #0
 800ab0c:	d023      	beq.n	800ab56 <__d2b+0x82>
 800ab0e:	4668      	mov	r0, sp
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	f7ff fd7c 	bl	800a60e <__lo0bits>
 800ab16:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ab1a:	b1d0      	cbz	r0, 800ab52 <__d2b+0x7e>
 800ab1c:	f1c0 0320 	rsb	r3, r0, #32
 800ab20:	fa02 f303 	lsl.w	r3, r2, r3
 800ab24:	430b      	orrs	r3, r1
 800ab26:	40c2      	lsrs	r2, r0
 800ab28:	6163      	str	r3, [r4, #20]
 800ab2a:	9201      	str	r2, [sp, #4]
 800ab2c:	9b01      	ldr	r3, [sp, #4]
 800ab2e:	61a3      	str	r3, [r4, #24]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	bf0c      	ite	eq
 800ab34:	2201      	moveq	r2, #1
 800ab36:	2202      	movne	r2, #2
 800ab38:	6122      	str	r2, [r4, #16]
 800ab3a:	b1a5      	cbz	r5, 800ab66 <__d2b+0x92>
 800ab3c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ab40:	4405      	add	r5, r0
 800ab42:	603d      	str	r5, [r7, #0]
 800ab44:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ab48:	6030      	str	r0, [r6, #0]
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	b003      	add	sp, #12
 800ab4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab52:	6161      	str	r1, [r4, #20]
 800ab54:	e7ea      	b.n	800ab2c <__d2b+0x58>
 800ab56:	a801      	add	r0, sp, #4
 800ab58:	f7ff fd59 	bl	800a60e <__lo0bits>
 800ab5c:	9b01      	ldr	r3, [sp, #4]
 800ab5e:	6163      	str	r3, [r4, #20]
 800ab60:	3020      	adds	r0, #32
 800ab62:	2201      	movs	r2, #1
 800ab64:	e7e8      	b.n	800ab38 <__d2b+0x64>
 800ab66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ab6e:	6038      	str	r0, [r7, #0]
 800ab70:	6918      	ldr	r0, [r3, #16]
 800ab72:	f7ff fd2d 	bl	800a5d0 <__hi0bits>
 800ab76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab7a:	e7e5      	b.n	800ab48 <__d2b+0x74>
 800ab7c:	0800b91d 	.word	0x0800b91d
 800ab80:	0800b92e 	.word	0x0800b92e

0800ab84 <__ssputs_r>:
 800ab84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab88:	688e      	ldr	r6, [r1, #8]
 800ab8a:	461f      	mov	r7, r3
 800ab8c:	42be      	cmp	r6, r7
 800ab8e:	680b      	ldr	r3, [r1, #0]
 800ab90:	4682      	mov	sl, r0
 800ab92:	460c      	mov	r4, r1
 800ab94:	4690      	mov	r8, r2
 800ab96:	d82d      	bhi.n	800abf4 <__ssputs_r+0x70>
 800ab98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aba0:	d026      	beq.n	800abf0 <__ssputs_r+0x6c>
 800aba2:	6965      	ldr	r5, [r4, #20]
 800aba4:	6909      	ldr	r1, [r1, #16]
 800aba6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abaa:	eba3 0901 	sub.w	r9, r3, r1
 800abae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abb2:	1c7b      	adds	r3, r7, #1
 800abb4:	444b      	add	r3, r9
 800abb6:	106d      	asrs	r5, r5, #1
 800abb8:	429d      	cmp	r5, r3
 800abba:	bf38      	it	cc
 800abbc:	461d      	movcc	r5, r3
 800abbe:	0553      	lsls	r3, r2, #21
 800abc0:	d527      	bpl.n	800ac12 <__ssputs_r+0x8e>
 800abc2:	4629      	mov	r1, r5
 800abc4:	f7ff fbd0 	bl	800a368 <_malloc_r>
 800abc8:	4606      	mov	r6, r0
 800abca:	b360      	cbz	r0, 800ac26 <__ssputs_r+0xa2>
 800abcc:	6921      	ldr	r1, [r4, #16]
 800abce:	464a      	mov	r2, r9
 800abd0:	f000 fa06 	bl	800afe0 <memcpy>
 800abd4:	89a3      	ldrh	r3, [r4, #12]
 800abd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800abda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abde:	81a3      	strh	r3, [r4, #12]
 800abe0:	6126      	str	r6, [r4, #16]
 800abe2:	6165      	str	r5, [r4, #20]
 800abe4:	444e      	add	r6, r9
 800abe6:	eba5 0509 	sub.w	r5, r5, r9
 800abea:	6026      	str	r6, [r4, #0]
 800abec:	60a5      	str	r5, [r4, #8]
 800abee:	463e      	mov	r6, r7
 800abf0:	42be      	cmp	r6, r7
 800abf2:	d900      	bls.n	800abf6 <__ssputs_r+0x72>
 800abf4:	463e      	mov	r6, r7
 800abf6:	6820      	ldr	r0, [r4, #0]
 800abf8:	4632      	mov	r2, r6
 800abfa:	4641      	mov	r1, r8
 800abfc:	f000 f9c6 	bl	800af8c <memmove>
 800ac00:	68a3      	ldr	r3, [r4, #8]
 800ac02:	1b9b      	subs	r3, r3, r6
 800ac04:	60a3      	str	r3, [r4, #8]
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	4433      	add	r3, r6
 800ac0a:	6023      	str	r3, [r4, #0]
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac12:	462a      	mov	r2, r5
 800ac14:	f000 fa36 	bl	800b084 <_realloc_r>
 800ac18:	4606      	mov	r6, r0
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	d1e0      	bne.n	800abe0 <__ssputs_r+0x5c>
 800ac1e:	6921      	ldr	r1, [r4, #16]
 800ac20:	4650      	mov	r0, sl
 800ac22:	f7ff fb2d 	bl	800a280 <_free_r>
 800ac26:	230c      	movs	r3, #12
 800ac28:	f8ca 3000 	str.w	r3, [sl]
 800ac2c:	89a3      	ldrh	r3, [r4, #12]
 800ac2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac32:	81a3      	strh	r3, [r4, #12]
 800ac34:	f04f 30ff 	mov.w	r0, #4294967295
 800ac38:	e7e9      	b.n	800ac0e <__ssputs_r+0x8a>
	...

0800ac3c <_svfiprintf_r>:
 800ac3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac40:	4698      	mov	r8, r3
 800ac42:	898b      	ldrh	r3, [r1, #12]
 800ac44:	061b      	lsls	r3, r3, #24
 800ac46:	b09d      	sub	sp, #116	@ 0x74
 800ac48:	4607      	mov	r7, r0
 800ac4a:	460d      	mov	r5, r1
 800ac4c:	4614      	mov	r4, r2
 800ac4e:	d510      	bpl.n	800ac72 <_svfiprintf_r+0x36>
 800ac50:	690b      	ldr	r3, [r1, #16]
 800ac52:	b973      	cbnz	r3, 800ac72 <_svfiprintf_r+0x36>
 800ac54:	2140      	movs	r1, #64	@ 0x40
 800ac56:	f7ff fb87 	bl	800a368 <_malloc_r>
 800ac5a:	6028      	str	r0, [r5, #0]
 800ac5c:	6128      	str	r0, [r5, #16]
 800ac5e:	b930      	cbnz	r0, 800ac6e <_svfiprintf_r+0x32>
 800ac60:	230c      	movs	r3, #12
 800ac62:	603b      	str	r3, [r7, #0]
 800ac64:	f04f 30ff 	mov.w	r0, #4294967295
 800ac68:	b01d      	add	sp, #116	@ 0x74
 800ac6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac6e:	2340      	movs	r3, #64	@ 0x40
 800ac70:	616b      	str	r3, [r5, #20]
 800ac72:	2300      	movs	r3, #0
 800ac74:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac76:	2320      	movs	r3, #32
 800ac78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac80:	2330      	movs	r3, #48	@ 0x30
 800ac82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ae20 <_svfiprintf_r+0x1e4>
 800ac86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac8a:	f04f 0901 	mov.w	r9, #1
 800ac8e:	4623      	mov	r3, r4
 800ac90:	469a      	mov	sl, r3
 800ac92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac96:	b10a      	cbz	r2, 800ac9c <_svfiprintf_r+0x60>
 800ac98:	2a25      	cmp	r2, #37	@ 0x25
 800ac9a:	d1f9      	bne.n	800ac90 <_svfiprintf_r+0x54>
 800ac9c:	ebba 0b04 	subs.w	fp, sl, r4
 800aca0:	d00b      	beq.n	800acba <_svfiprintf_r+0x7e>
 800aca2:	465b      	mov	r3, fp
 800aca4:	4622      	mov	r2, r4
 800aca6:	4629      	mov	r1, r5
 800aca8:	4638      	mov	r0, r7
 800acaa:	f7ff ff6b 	bl	800ab84 <__ssputs_r>
 800acae:	3001      	adds	r0, #1
 800acb0:	f000 80a7 	beq.w	800ae02 <_svfiprintf_r+0x1c6>
 800acb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acb6:	445a      	add	r2, fp
 800acb8:	9209      	str	r2, [sp, #36]	@ 0x24
 800acba:	f89a 3000 	ldrb.w	r3, [sl]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	f000 809f 	beq.w	800ae02 <_svfiprintf_r+0x1c6>
 800acc4:	2300      	movs	r3, #0
 800acc6:	f04f 32ff 	mov.w	r2, #4294967295
 800acca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acce:	f10a 0a01 	add.w	sl, sl, #1
 800acd2:	9304      	str	r3, [sp, #16]
 800acd4:	9307      	str	r3, [sp, #28]
 800acd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800acda:	931a      	str	r3, [sp, #104]	@ 0x68
 800acdc:	4654      	mov	r4, sl
 800acde:	2205      	movs	r2, #5
 800ace0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ace4:	484e      	ldr	r0, [pc, #312]	@ (800ae20 <_svfiprintf_r+0x1e4>)
 800ace6:	f7f5 fa93 	bl	8000210 <memchr>
 800acea:	9a04      	ldr	r2, [sp, #16]
 800acec:	b9d8      	cbnz	r0, 800ad26 <_svfiprintf_r+0xea>
 800acee:	06d0      	lsls	r0, r2, #27
 800acf0:	bf44      	itt	mi
 800acf2:	2320      	movmi	r3, #32
 800acf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acf8:	0711      	lsls	r1, r2, #28
 800acfa:	bf44      	itt	mi
 800acfc:	232b      	movmi	r3, #43	@ 0x2b
 800acfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad02:	f89a 3000 	ldrb.w	r3, [sl]
 800ad06:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad08:	d015      	beq.n	800ad36 <_svfiprintf_r+0xfa>
 800ad0a:	9a07      	ldr	r2, [sp, #28]
 800ad0c:	4654      	mov	r4, sl
 800ad0e:	2000      	movs	r0, #0
 800ad10:	f04f 0c0a 	mov.w	ip, #10
 800ad14:	4621      	mov	r1, r4
 800ad16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad1a:	3b30      	subs	r3, #48	@ 0x30
 800ad1c:	2b09      	cmp	r3, #9
 800ad1e:	d94b      	bls.n	800adb8 <_svfiprintf_r+0x17c>
 800ad20:	b1b0      	cbz	r0, 800ad50 <_svfiprintf_r+0x114>
 800ad22:	9207      	str	r2, [sp, #28]
 800ad24:	e014      	b.n	800ad50 <_svfiprintf_r+0x114>
 800ad26:	eba0 0308 	sub.w	r3, r0, r8
 800ad2a:	fa09 f303 	lsl.w	r3, r9, r3
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	9304      	str	r3, [sp, #16]
 800ad32:	46a2      	mov	sl, r4
 800ad34:	e7d2      	b.n	800acdc <_svfiprintf_r+0xa0>
 800ad36:	9b03      	ldr	r3, [sp, #12]
 800ad38:	1d19      	adds	r1, r3, #4
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	9103      	str	r1, [sp, #12]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	bfbb      	ittet	lt
 800ad42:	425b      	neglt	r3, r3
 800ad44:	f042 0202 	orrlt.w	r2, r2, #2
 800ad48:	9307      	strge	r3, [sp, #28]
 800ad4a:	9307      	strlt	r3, [sp, #28]
 800ad4c:	bfb8      	it	lt
 800ad4e:	9204      	strlt	r2, [sp, #16]
 800ad50:	7823      	ldrb	r3, [r4, #0]
 800ad52:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad54:	d10a      	bne.n	800ad6c <_svfiprintf_r+0x130>
 800ad56:	7863      	ldrb	r3, [r4, #1]
 800ad58:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad5a:	d132      	bne.n	800adc2 <_svfiprintf_r+0x186>
 800ad5c:	9b03      	ldr	r3, [sp, #12]
 800ad5e:	1d1a      	adds	r2, r3, #4
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	9203      	str	r2, [sp, #12]
 800ad64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad68:	3402      	adds	r4, #2
 800ad6a:	9305      	str	r3, [sp, #20]
 800ad6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ae30 <_svfiprintf_r+0x1f4>
 800ad70:	7821      	ldrb	r1, [r4, #0]
 800ad72:	2203      	movs	r2, #3
 800ad74:	4650      	mov	r0, sl
 800ad76:	f7f5 fa4b 	bl	8000210 <memchr>
 800ad7a:	b138      	cbz	r0, 800ad8c <_svfiprintf_r+0x150>
 800ad7c:	9b04      	ldr	r3, [sp, #16]
 800ad7e:	eba0 000a 	sub.w	r0, r0, sl
 800ad82:	2240      	movs	r2, #64	@ 0x40
 800ad84:	4082      	lsls	r2, r0
 800ad86:	4313      	orrs	r3, r2
 800ad88:	3401      	adds	r4, #1
 800ad8a:	9304      	str	r3, [sp, #16]
 800ad8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad90:	4824      	ldr	r0, [pc, #144]	@ (800ae24 <_svfiprintf_r+0x1e8>)
 800ad92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad96:	2206      	movs	r2, #6
 800ad98:	f7f5 fa3a 	bl	8000210 <memchr>
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	d036      	beq.n	800ae0e <_svfiprintf_r+0x1d2>
 800ada0:	4b21      	ldr	r3, [pc, #132]	@ (800ae28 <_svfiprintf_r+0x1ec>)
 800ada2:	bb1b      	cbnz	r3, 800adec <_svfiprintf_r+0x1b0>
 800ada4:	9b03      	ldr	r3, [sp, #12]
 800ada6:	3307      	adds	r3, #7
 800ada8:	f023 0307 	bic.w	r3, r3, #7
 800adac:	3308      	adds	r3, #8
 800adae:	9303      	str	r3, [sp, #12]
 800adb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adb2:	4433      	add	r3, r6
 800adb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800adb6:	e76a      	b.n	800ac8e <_svfiprintf_r+0x52>
 800adb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800adbc:	460c      	mov	r4, r1
 800adbe:	2001      	movs	r0, #1
 800adc0:	e7a8      	b.n	800ad14 <_svfiprintf_r+0xd8>
 800adc2:	2300      	movs	r3, #0
 800adc4:	3401      	adds	r4, #1
 800adc6:	9305      	str	r3, [sp, #20]
 800adc8:	4619      	mov	r1, r3
 800adca:	f04f 0c0a 	mov.w	ip, #10
 800adce:	4620      	mov	r0, r4
 800add0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800add4:	3a30      	subs	r2, #48	@ 0x30
 800add6:	2a09      	cmp	r2, #9
 800add8:	d903      	bls.n	800ade2 <_svfiprintf_r+0x1a6>
 800adda:	2b00      	cmp	r3, #0
 800addc:	d0c6      	beq.n	800ad6c <_svfiprintf_r+0x130>
 800adde:	9105      	str	r1, [sp, #20]
 800ade0:	e7c4      	b.n	800ad6c <_svfiprintf_r+0x130>
 800ade2:	fb0c 2101 	mla	r1, ip, r1, r2
 800ade6:	4604      	mov	r4, r0
 800ade8:	2301      	movs	r3, #1
 800adea:	e7f0      	b.n	800adce <_svfiprintf_r+0x192>
 800adec:	ab03      	add	r3, sp, #12
 800adee:	9300      	str	r3, [sp, #0]
 800adf0:	462a      	mov	r2, r5
 800adf2:	4b0e      	ldr	r3, [pc, #56]	@ (800ae2c <_svfiprintf_r+0x1f0>)
 800adf4:	a904      	add	r1, sp, #16
 800adf6:	4638      	mov	r0, r7
 800adf8:	f7fd fe86 	bl	8008b08 <_printf_float>
 800adfc:	1c42      	adds	r2, r0, #1
 800adfe:	4606      	mov	r6, r0
 800ae00:	d1d6      	bne.n	800adb0 <_svfiprintf_r+0x174>
 800ae02:	89ab      	ldrh	r3, [r5, #12]
 800ae04:	065b      	lsls	r3, r3, #25
 800ae06:	f53f af2d 	bmi.w	800ac64 <_svfiprintf_r+0x28>
 800ae0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae0c:	e72c      	b.n	800ac68 <_svfiprintf_r+0x2c>
 800ae0e:	ab03      	add	r3, sp, #12
 800ae10:	9300      	str	r3, [sp, #0]
 800ae12:	462a      	mov	r2, r5
 800ae14:	4b05      	ldr	r3, [pc, #20]	@ (800ae2c <_svfiprintf_r+0x1f0>)
 800ae16:	a904      	add	r1, sp, #16
 800ae18:	4638      	mov	r0, r7
 800ae1a:	f7fe f90d 	bl	8009038 <_printf_i>
 800ae1e:	e7ed      	b.n	800adfc <_svfiprintf_r+0x1c0>
 800ae20:	0800ba88 	.word	0x0800ba88
 800ae24:	0800ba92 	.word	0x0800ba92
 800ae28:	08008b09 	.word	0x08008b09
 800ae2c:	0800ab85 	.word	0x0800ab85
 800ae30:	0800ba8e 	.word	0x0800ba8e

0800ae34 <__sflush_r>:
 800ae34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae3c:	0716      	lsls	r6, r2, #28
 800ae3e:	4605      	mov	r5, r0
 800ae40:	460c      	mov	r4, r1
 800ae42:	d454      	bmi.n	800aeee <__sflush_r+0xba>
 800ae44:	684b      	ldr	r3, [r1, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	dc02      	bgt.n	800ae50 <__sflush_r+0x1c>
 800ae4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	dd48      	ble.n	800aee2 <__sflush_r+0xae>
 800ae50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae52:	2e00      	cmp	r6, #0
 800ae54:	d045      	beq.n	800aee2 <__sflush_r+0xae>
 800ae56:	2300      	movs	r3, #0
 800ae58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ae5c:	682f      	ldr	r7, [r5, #0]
 800ae5e:	6a21      	ldr	r1, [r4, #32]
 800ae60:	602b      	str	r3, [r5, #0]
 800ae62:	d030      	beq.n	800aec6 <__sflush_r+0x92>
 800ae64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ae66:	89a3      	ldrh	r3, [r4, #12]
 800ae68:	0759      	lsls	r1, r3, #29
 800ae6a:	d505      	bpl.n	800ae78 <__sflush_r+0x44>
 800ae6c:	6863      	ldr	r3, [r4, #4]
 800ae6e:	1ad2      	subs	r2, r2, r3
 800ae70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae72:	b10b      	cbz	r3, 800ae78 <__sflush_r+0x44>
 800ae74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae76:	1ad2      	subs	r2, r2, r3
 800ae78:	2300      	movs	r3, #0
 800ae7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae7c:	6a21      	ldr	r1, [r4, #32]
 800ae7e:	4628      	mov	r0, r5
 800ae80:	47b0      	blx	r6
 800ae82:	1c43      	adds	r3, r0, #1
 800ae84:	89a3      	ldrh	r3, [r4, #12]
 800ae86:	d106      	bne.n	800ae96 <__sflush_r+0x62>
 800ae88:	6829      	ldr	r1, [r5, #0]
 800ae8a:	291d      	cmp	r1, #29
 800ae8c:	d82b      	bhi.n	800aee6 <__sflush_r+0xb2>
 800ae8e:	4a2a      	ldr	r2, [pc, #168]	@ (800af38 <__sflush_r+0x104>)
 800ae90:	410a      	asrs	r2, r1
 800ae92:	07d6      	lsls	r6, r2, #31
 800ae94:	d427      	bmi.n	800aee6 <__sflush_r+0xb2>
 800ae96:	2200      	movs	r2, #0
 800ae98:	6062      	str	r2, [r4, #4]
 800ae9a:	04d9      	lsls	r1, r3, #19
 800ae9c:	6922      	ldr	r2, [r4, #16]
 800ae9e:	6022      	str	r2, [r4, #0]
 800aea0:	d504      	bpl.n	800aeac <__sflush_r+0x78>
 800aea2:	1c42      	adds	r2, r0, #1
 800aea4:	d101      	bne.n	800aeaa <__sflush_r+0x76>
 800aea6:	682b      	ldr	r3, [r5, #0]
 800aea8:	b903      	cbnz	r3, 800aeac <__sflush_r+0x78>
 800aeaa:	6560      	str	r0, [r4, #84]	@ 0x54
 800aeac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aeae:	602f      	str	r7, [r5, #0]
 800aeb0:	b1b9      	cbz	r1, 800aee2 <__sflush_r+0xae>
 800aeb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aeb6:	4299      	cmp	r1, r3
 800aeb8:	d002      	beq.n	800aec0 <__sflush_r+0x8c>
 800aeba:	4628      	mov	r0, r5
 800aebc:	f7ff f9e0 	bl	800a280 <_free_r>
 800aec0:	2300      	movs	r3, #0
 800aec2:	6363      	str	r3, [r4, #52]	@ 0x34
 800aec4:	e00d      	b.n	800aee2 <__sflush_r+0xae>
 800aec6:	2301      	movs	r3, #1
 800aec8:	4628      	mov	r0, r5
 800aeca:	47b0      	blx	r6
 800aecc:	4602      	mov	r2, r0
 800aece:	1c50      	adds	r0, r2, #1
 800aed0:	d1c9      	bne.n	800ae66 <__sflush_r+0x32>
 800aed2:	682b      	ldr	r3, [r5, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d0c6      	beq.n	800ae66 <__sflush_r+0x32>
 800aed8:	2b1d      	cmp	r3, #29
 800aeda:	d001      	beq.n	800aee0 <__sflush_r+0xac>
 800aedc:	2b16      	cmp	r3, #22
 800aede:	d11e      	bne.n	800af1e <__sflush_r+0xea>
 800aee0:	602f      	str	r7, [r5, #0]
 800aee2:	2000      	movs	r0, #0
 800aee4:	e022      	b.n	800af2c <__sflush_r+0xf8>
 800aee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aeea:	b21b      	sxth	r3, r3
 800aeec:	e01b      	b.n	800af26 <__sflush_r+0xf2>
 800aeee:	690f      	ldr	r7, [r1, #16]
 800aef0:	2f00      	cmp	r7, #0
 800aef2:	d0f6      	beq.n	800aee2 <__sflush_r+0xae>
 800aef4:	0793      	lsls	r3, r2, #30
 800aef6:	680e      	ldr	r6, [r1, #0]
 800aef8:	bf08      	it	eq
 800aefa:	694b      	ldreq	r3, [r1, #20]
 800aefc:	600f      	str	r7, [r1, #0]
 800aefe:	bf18      	it	ne
 800af00:	2300      	movne	r3, #0
 800af02:	eba6 0807 	sub.w	r8, r6, r7
 800af06:	608b      	str	r3, [r1, #8]
 800af08:	f1b8 0f00 	cmp.w	r8, #0
 800af0c:	dde9      	ble.n	800aee2 <__sflush_r+0xae>
 800af0e:	6a21      	ldr	r1, [r4, #32]
 800af10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800af12:	4643      	mov	r3, r8
 800af14:	463a      	mov	r2, r7
 800af16:	4628      	mov	r0, r5
 800af18:	47b0      	blx	r6
 800af1a:	2800      	cmp	r0, #0
 800af1c:	dc08      	bgt.n	800af30 <__sflush_r+0xfc>
 800af1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af26:	81a3      	strh	r3, [r4, #12]
 800af28:	f04f 30ff 	mov.w	r0, #4294967295
 800af2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af30:	4407      	add	r7, r0
 800af32:	eba8 0800 	sub.w	r8, r8, r0
 800af36:	e7e7      	b.n	800af08 <__sflush_r+0xd4>
 800af38:	dfbffffe 	.word	0xdfbffffe

0800af3c <_fflush_r>:
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	690b      	ldr	r3, [r1, #16]
 800af40:	4605      	mov	r5, r0
 800af42:	460c      	mov	r4, r1
 800af44:	b913      	cbnz	r3, 800af4c <_fflush_r+0x10>
 800af46:	2500      	movs	r5, #0
 800af48:	4628      	mov	r0, r5
 800af4a:	bd38      	pop	{r3, r4, r5, pc}
 800af4c:	b118      	cbz	r0, 800af56 <_fflush_r+0x1a>
 800af4e:	6a03      	ldr	r3, [r0, #32]
 800af50:	b90b      	cbnz	r3, 800af56 <_fflush_r+0x1a>
 800af52:	f7fe fa1d 	bl	8009390 <__sinit>
 800af56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d0f3      	beq.n	800af46 <_fflush_r+0xa>
 800af5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800af60:	07d0      	lsls	r0, r2, #31
 800af62:	d404      	bmi.n	800af6e <_fflush_r+0x32>
 800af64:	0599      	lsls	r1, r3, #22
 800af66:	d402      	bmi.n	800af6e <_fflush_r+0x32>
 800af68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af6a:	f7fe fb3a 	bl	80095e2 <__retarget_lock_acquire_recursive>
 800af6e:	4628      	mov	r0, r5
 800af70:	4621      	mov	r1, r4
 800af72:	f7ff ff5f 	bl	800ae34 <__sflush_r>
 800af76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af78:	07da      	lsls	r2, r3, #31
 800af7a:	4605      	mov	r5, r0
 800af7c:	d4e4      	bmi.n	800af48 <_fflush_r+0xc>
 800af7e:	89a3      	ldrh	r3, [r4, #12]
 800af80:	059b      	lsls	r3, r3, #22
 800af82:	d4e1      	bmi.n	800af48 <_fflush_r+0xc>
 800af84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af86:	f7fe fb2d 	bl	80095e4 <__retarget_lock_release_recursive>
 800af8a:	e7dd      	b.n	800af48 <_fflush_r+0xc>

0800af8c <memmove>:
 800af8c:	4288      	cmp	r0, r1
 800af8e:	b510      	push	{r4, lr}
 800af90:	eb01 0402 	add.w	r4, r1, r2
 800af94:	d902      	bls.n	800af9c <memmove+0x10>
 800af96:	4284      	cmp	r4, r0
 800af98:	4623      	mov	r3, r4
 800af9a:	d807      	bhi.n	800afac <memmove+0x20>
 800af9c:	1e43      	subs	r3, r0, #1
 800af9e:	42a1      	cmp	r1, r4
 800afa0:	d008      	beq.n	800afb4 <memmove+0x28>
 800afa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afaa:	e7f8      	b.n	800af9e <memmove+0x12>
 800afac:	4402      	add	r2, r0
 800afae:	4601      	mov	r1, r0
 800afb0:	428a      	cmp	r2, r1
 800afb2:	d100      	bne.n	800afb6 <memmove+0x2a>
 800afb4:	bd10      	pop	{r4, pc}
 800afb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800afba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800afbe:	e7f7      	b.n	800afb0 <memmove+0x24>

0800afc0 <_sbrk_r>:
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	4d06      	ldr	r5, [pc, #24]	@ (800afdc <_sbrk_r+0x1c>)
 800afc4:	2300      	movs	r3, #0
 800afc6:	4604      	mov	r4, r0
 800afc8:	4608      	mov	r0, r1
 800afca:	602b      	str	r3, [r5, #0]
 800afcc:	f7f7 f84e 	bl	800206c <_sbrk>
 800afd0:	1c43      	adds	r3, r0, #1
 800afd2:	d102      	bne.n	800afda <_sbrk_r+0x1a>
 800afd4:	682b      	ldr	r3, [r5, #0]
 800afd6:	b103      	cbz	r3, 800afda <_sbrk_r+0x1a>
 800afd8:	6023      	str	r3, [r4, #0]
 800afda:	bd38      	pop	{r3, r4, r5, pc}
 800afdc:	20000cfc 	.word	0x20000cfc

0800afe0 <memcpy>:
 800afe0:	440a      	add	r2, r1
 800afe2:	4291      	cmp	r1, r2
 800afe4:	f100 33ff 	add.w	r3, r0, #4294967295
 800afe8:	d100      	bne.n	800afec <memcpy+0xc>
 800afea:	4770      	bx	lr
 800afec:	b510      	push	{r4, lr}
 800afee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aff2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aff6:	4291      	cmp	r1, r2
 800aff8:	d1f9      	bne.n	800afee <memcpy+0xe>
 800affa:	bd10      	pop	{r4, pc}

0800affc <__assert_func>:
 800affc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800affe:	4614      	mov	r4, r2
 800b000:	461a      	mov	r2, r3
 800b002:	4b09      	ldr	r3, [pc, #36]	@ (800b028 <__assert_func+0x2c>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4605      	mov	r5, r0
 800b008:	68d8      	ldr	r0, [r3, #12]
 800b00a:	b954      	cbnz	r4, 800b022 <__assert_func+0x26>
 800b00c:	4b07      	ldr	r3, [pc, #28]	@ (800b02c <__assert_func+0x30>)
 800b00e:	461c      	mov	r4, r3
 800b010:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b014:	9100      	str	r1, [sp, #0]
 800b016:	462b      	mov	r3, r5
 800b018:	4905      	ldr	r1, [pc, #20]	@ (800b030 <__assert_func+0x34>)
 800b01a:	f000 f86f 	bl	800b0fc <fiprintf>
 800b01e:	f000 f87f 	bl	800b120 <abort>
 800b022:	4b04      	ldr	r3, [pc, #16]	@ (800b034 <__assert_func+0x38>)
 800b024:	e7f4      	b.n	800b010 <__assert_func+0x14>
 800b026:	bf00      	nop
 800b028:	2000001c 	.word	0x2000001c
 800b02c:	0800bade 	.word	0x0800bade
 800b030:	0800bab0 	.word	0x0800bab0
 800b034:	0800baa3 	.word	0x0800baa3

0800b038 <_calloc_r>:
 800b038:	b570      	push	{r4, r5, r6, lr}
 800b03a:	fba1 5402 	umull	r5, r4, r1, r2
 800b03e:	b93c      	cbnz	r4, 800b050 <_calloc_r+0x18>
 800b040:	4629      	mov	r1, r5
 800b042:	f7ff f991 	bl	800a368 <_malloc_r>
 800b046:	4606      	mov	r6, r0
 800b048:	b928      	cbnz	r0, 800b056 <_calloc_r+0x1e>
 800b04a:	2600      	movs	r6, #0
 800b04c:	4630      	mov	r0, r6
 800b04e:	bd70      	pop	{r4, r5, r6, pc}
 800b050:	220c      	movs	r2, #12
 800b052:	6002      	str	r2, [r0, #0]
 800b054:	e7f9      	b.n	800b04a <_calloc_r+0x12>
 800b056:	462a      	mov	r2, r5
 800b058:	4621      	mov	r1, r4
 800b05a:	f7fe fa32 	bl	80094c2 <memset>
 800b05e:	e7f5      	b.n	800b04c <_calloc_r+0x14>

0800b060 <__ascii_mbtowc>:
 800b060:	b082      	sub	sp, #8
 800b062:	b901      	cbnz	r1, 800b066 <__ascii_mbtowc+0x6>
 800b064:	a901      	add	r1, sp, #4
 800b066:	b142      	cbz	r2, 800b07a <__ascii_mbtowc+0x1a>
 800b068:	b14b      	cbz	r3, 800b07e <__ascii_mbtowc+0x1e>
 800b06a:	7813      	ldrb	r3, [r2, #0]
 800b06c:	600b      	str	r3, [r1, #0]
 800b06e:	7812      	ldrb	r2, [r2, #0]
 800b070:	1e10      	subs	r0, r2, #0
 800b072:	bf18      	it	ne
 800b074:	2001      	movne	r0, #1
 800b076:	b002      	add	sp, #8
 800b078:	4770      	bx	lr
 800b07a:	4610      	mov	r0, r2
 800b07c:	e7fb      	b.n	800b076 <__ascii_mbtowc+0x16>
 800b07e:	f06f 0001 	mvn.w	r0, #1
 800b082:	e7f8      	b.n	800b076 <__ascii_mbtowc+0x16>

0800b084 <_realloc_r>:
 800b084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b088:	4680      	mov	r8, r0
 800b08a:	4615      	mov	r5, r2
 800b08c:	460c      	mov	r4, r1
 800b08e:	b921      	cbnz	r1, 800b09a <_realloc_r+0x16>
 800b090:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b094:	4611      	mov	r1, r2
 800b096:	f7ff b967 	b.w	800a368 <_malloc_r>
 800b09a:	b92a      	cbnz	r2, 800b0a8 <_realloc_r+0x24>
 800b09c:	f7ff f8f0 	bl	800a280 <_free_r>
 800b0a0:	2400      	movs	r4, #0
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a8:	f000 f841 	bl	800b12e <_malloc_usable_size_r>
 800b0ac:	4285      	cmp	r5, r0
 800b0ae:	4606      	mov	r6, r0
 800b0b0:	d802      	bhi.n	800b0b8 <_realloc_r+0x34>
 800b0b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b0b6:	d8f4      	bhi.n	800b0a2 <_realloc_r+0x1e>
 800b0b8:	4629      	mov	r1, r5
 800b0ba:	4640      	mov	r0, r8
 800b0bc:	f7ff f954 	bl	800a368 <_malloc_r>
 800b0c0:	4607      	mov	r7, r0
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	d0ec      	beq.n	800b0a0 <_realloc_r+0x1c>
 800b0c6:	42b5      	cmp	r5, r6
 800b0c8:	462a      	mov	r2, r5
 800b0ca:	4621      	mov	r1, r4
 800b0cc:	bf28      	it	cs
 800b0ce:	4632      	movcs	r2, r6
 800b0d0:	f7ff ff86 	bl	800afe0 <memcpy>
 800b0d4:	4621      	mov	r1, r4
 800b0d6:	4640      	mov	r0, r8
 800b0d8:	f7ff f8d2 	bl	800a280 <_free_r>
 800b0dc:	463c      	mov	r4, r7
 800b0de:	e7e0      	b.n	800b0a2 <_realloc_r+0x1e>

0800b0e0 <__ascii_wctomb>:
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	4608      	mov	r0, r1
 800b0e4:	b141      	cbz	r1, 800b0f8 <__ascii_wctomb+0x18>
 800b0e6:	2aff      	cmp	r2, #255	@ 0xff
 800b0e8:	d904      	bls.n	800b0f4 <__ascii_wctomb+0x14>
 800b0ea:	228a      	movs	r2, #138	@ 0x8a
 800b0ec:	601a      	str	r2, [r3, #0]
 800b0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f2:	4770      	bx	lr
 800b0f4:	700a      	strb	r2, [r1, #0]
 800b0f6:	2001      	movs	r0, #1
 800b0f8:	4770      	bx	lr
	...

0800b0fc <fiprintf>:
 800b0fc:	b40e      	push	{r1, r2, r3}
 800b0fe:	b503      	push	{r0, r1, lr}
 800b100:	4601      	mov	r1, r0
 800b102:	ab03      	add	r3, sp, #12
 800b104:	4805      	ldr	r0, [pc, #20]	@ (800b11c <fiprintf+0x20>)
 800b106:	f853 2b04 	ldr.w	r2, [r3], #4
 800b10a:	6800      	ldr	r0, [r0, #0]
 800b10c:	9301      	str	r3, [sp, #4]
 800b10e:	f000 f83f 	bl	800b190 <_vfiprintf_r>
 800b112:	b002      	add	sp, #8
 800b114:	f85d eb04 	ldr.w	lr, [sp], #4
 800b118:	b003      	add	sp, #12
 800b11a:	4770      	bx	lr
 800b11c:	2000001c 	.word	0x2000001c

0800b120 <abort>:
 800b120:	b508      	push	{r3, lr}
 800b122:	2006      	movs	r0, #6
 800b124:	f000 fa08 	bl	800b538 <raise>
 800b128:	2001      	movs	r0, #1
 800b12a:	f7f6 ff27 	bl	8001f7c <_exit>

0800b12e <_malloc_usable_size_r>:
 800b12e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b132:	1f18      	subs	r0, r3, #4
 800b134:	2b00      	cmp	r3, #0
 800b136:	bfbc      	itt	lt
 800b138:	580b      	ldrlt	r3, [r1, r0]
 800b13a:	18c0      	addlt	r0, r0, r3
 800b13c:	4770      	bx	lr

0800b13e <__sfputc_r>:
 800b13e:	6893      	ldr	r3, [r2, #8]
 800b140:	3b01      	subs	r3, #1
 800b142:	2b00      	cmp	r3, #0
 800b144:	b410      	push	{r4}
 800b146:	6093      	str	r3, [r2, #8]
 800b148:	da08      	bge.n	800b15c <__sfputc_r+0x1e>
 800b14a:	6994      	ldr	r4, [r2, #24]
 800b14c:	42a3      	cmp	r3, r4
 800b14e:	db01      	blt.n	800b154 <__sfputc_r+0x16>
 800b150:	290a      	cmp	r1, #10
 800b152:	d103      	bne.n	800b15c <__sfputc_r+0x1e>
 800b154:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b158:	f000 b932 	b.w	800b3c0 <__swbuf_r>
 800b15c:	6813      	ldr	r3, [r2, #0]
 800b15e:	1c58      	adds	r0, r3, #1
 800b160:	6010      	str	r0, [r2, #0]
 800b162:	7019      	strb	r1, [r3, #0]
 800b164:	4608      	mov	r0, r1
 800b166:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <__sfputs_r>:
 800b16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16e:	4606      	mov	r6, r0
 800b170:	460f      	mov	r7, r1
 800b172:	4614      	mov	r4, r2
 800b174:	18d5      	adds	r5, r2, r3
 800b176:	42ac      	cmp	r4, r5
 800b178:	d101      	bne.n	800b17e <__sfputs_r+0x12>
 800b17a:	2000      	movs	r0, #0
 800b17c:	e007      	b.n	800b18e <__sfputs_r+0x22>
 800b17e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b182:	463a      	mov	r2, r7
 800b184:	4630      	mov	r0, r6
 800b186:	f7ff ffda 	bl	800b13e <__sfputc_r>
 800b18a:	1c43      	adds	r3, r0, #1
 800b18c:	d1f3      	bne.n	800b176 <__sfputs_r+0xa>
 800b18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b190 <_vfiprintf_r>:
 800b190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b194:	460d      	mov	r5, r1
 800b196:	b09d      	sub	sp, #116	@ 0x74
 800b198:	4614      	mov	r4, r2
 800b19a:	4698      	mov	r8, r3
 800b19c:	4606      	mov	r6, r0
 800b19e:	b118      	cbz	r0, 800b1a8 <_vfiprintf_r+0x18>
 800b1a0:	6a03      	ldr	r3, [r0, #32]
 800b1a2:	b90b      	cbnz	r3, 800b1a8 <_vfiprintf_r+0x18>
 800b1a4:	f7fe f8f4 	bl	8009390 <__sinit>
 800b1a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1aa:	07d9      	lsls	r1, r3, #31
 800b1ac:	d405      	bmi.n	800b1ba <_vfiprintf_r+0x2a>
 800b1ae:	89ab      	ldrh	r3, [r5, #12]
 800b1b0:	059a      	lsls	r2, r3, #22
 800b1b2:	d402      	bmi.n	800b1ba <_vfiprintf_r+0x2a>
 800b1b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1b6:	f7fe fa14 	bl	80095e2 <__retarget_lock_acquire_recursive>
 800b1ba:	89ab      	ldrh	r3, [r5, #12]
 800b1bc:	071b      	lsls	r3, r3, #28
 800b1be:	d501      	bpl.n	800b1c4 <_vfiprintf_r+0x34>
 800b1c0:	692b      	ldr	r3, [r5, #16]
 800b1c2:	b99b      	cbnz	r3, 800b1ec <_vfiprintf_r+0x5c>
 800b1c4:	4629      	mov	r1, r5
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	f000 f938 	bl	800b43c <__swsetup_r>
 800b1cc:	b170      	cbz	r0, 800b1ec <_vfiprintf_r+0x5c>
 800b1ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1d0:	07dc      	lsls	r4, r3, #31
 800b1d2:	d504      	bpl.n	800b1de <_vfiprintf_r+0x4e>
 800b1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d8:	b01d      	add	sp, #116	@ 0x74
 800b1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1de:	89ab      	ldrh	r3, [r5, #12]
 800b1e0:	0598      	lsls	r0, r3, #22
 800b1e2:	d4f7      	bmi.n	800b1d4 <_vfiprintf_r+0x44>
 800b1e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1e6:	f7fe f9fd 	bl	80095e4 <__retarget_lock_release_recursive>
 800b1ea:	e7f3      	b.n	800b1d4 <_vfiprintf_r+0x44>
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1f0:	2320      	movs	r3, #32
 800b1f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1fa:	2330      	movs	r3, #48	@ 0x30
 800b1fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b3ac <_vfiprintf_r+0x21c>
 800b200:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b204:	f04f 0901 	mov.w	r9, #1
 800b208:	4623      	mov	r3, r4
 800b20a:	469a      	mov	sl, r3
 800b20c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b210:	b10a      	cbz	r2, 800b216 <_vfiprintf_r+0x86>
 800b212:	2a25      	cmp	r2, #37	@ 0x25
 800b214:	d1f9      	bne.n	800b20a <_vfiprintf_r+0x7a>
 800b216:	ebba 0b04 	subs.w	fp, sl, r4
 800b21a:	d00b      	beq.n	800b234 <_vfiprintf_r+0xa4>
 800b21c:	465b      	mov	r3, fp
 800b21e:	4622      	mov	r2, r4
 800b220:	4629      	mov	r1, r5
 800b222:	4630      	mov	r0, r6
 800b224:	f7ff ffa2 	bl	800b16c <__sfputs_r>
 800b228:	3001      	adds	r0, #1
 800b22a:	f000 80a7 	beq.w	800b37c <_vfiprintf_r+0x1ec>
 800b22e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b230:	445a      	add	r2, fp
 800b232:	9209      	str	r2, [sp, #36]	@ 0x24
 800b234:	f89a 3000 	ldrb.w	r3, [sl]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f000 809f 	beq.w	800b37c <_vfiprintf_r+0x1ec>
 800b23e:	2300      	movs	r3, #0
 800b240:	f04f 32ff 	mov.w	r2, #4294967295
 800b244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b248:	f10a 0a01 	add.w	sl, sl, #1
 800b24c:	9304      	str	r3, [sp, #16]
 800b24e:	9307      	str	r3, [sp, #28]
 800b250:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b254:	931a      	str	r3, [sp, #104]	@ 0x68
 800b256:	4654      	mov	r4, sl
 800b258:	2205      	movs	r2, #5
 800b25a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b25e:	4853      	ldr	r0, [pc, #332]	@ (800b3ac <_vfiprintf_r+0x21c>)
 800b260:	f7f4 ffd6 	bl	8000210 <memchr>
 800b264:	9a04      	ldr	r2, [sp, #16]
 800b266:	b9d8      	cbnz	r0, 800b2a0 <_vfiprintf_r+0x110>
 800b268:	06d1      	lsls	r1, r2, #27
 800b26a:	bf44      	itt	mi
 800b26c:	2320      	movmi	r3, #32
 800b26e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b272:	0713      	lsls	r3, r2, #28
 800b274:	bf44      	itt	mi
 800b276:	232b      	movmi	r3, #43	@ 0x2b
 800b278:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b27c:	f89a 3000 	ldrb.w	r3, [sl]
 800b280:	2b2a      	cmp	r3, #42	@ 0x2a
 800b282:	d015      	beq.n	800b2b0 <_vfiprintf_r+0x120>
 800b284:	9a07      	ldr	r2, [sp, #28]
 800b286:	4654      	mov	r4, sl
 800b288:	2000      	movs	r0, #0
 800b28a:	f04f 0c0a 	mov.w	ip, #10
 800b28e:	4621      	mov	r1, r4
 800b290:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b294:	3b30      	subs	r3, #48	@ 0x30
 800b296:	2b09      	cmp	r3, #9
 800b298:	d94b      	bls.n	800b332 <_vfiprintf_r+0x1a2>
 800b29a:	b1b0      	cbz	r0, 800b2ca <_vfiprintf_r+0x13a>
 800b29c:	9207      	str	r2, [sp, #28]
 800b29e:	e014      	b.n	800b2ca <_vfiprintf_r+0x13a>
 800b2a0:	eba0 0308 	sub.w	r3, r0, r8
 800b2a4:	fa09 f303 	lsl.w	r3, r9, r3
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	9304      	str	r3, [sp, #16]
 800b2ac:	46a2      	mov	sl, r4
 800b2ae:	e7d2      	b.n	800b256 <_vfiprintf_r+0xc6>
 800b2b0:	9b03      	ldr	r3, [sp, #12]
 800b2b2:	1d19      	adds	r1, r3, #4
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	9103      	str	r1, [sp, #12]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	bfbb      	ittet	lt
 800b2bc:	425b      	neglt	r3, r3
 800b2be:	f042 0202 	orrlt.w	r2, r2, #2
 800b2c2:	9307      	strge	r3, [sp, #28]
 800b2c4:	9307      	strlt	r3, [sp, #28]
 800b2c6:	bfb8      	it	lt
 800b2c8:	9204      	strlt	r2, [sp, #16]
 800b2ca:	7823      	ldrb	r3, [r4, #0]
 800b2cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2ce:	d10a      	bne.n	800b2e6 <_vfiprintf_r+0x156>
 800b2d0:	7863      	ldrb	r3, [r4, #1]
 800b2d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2d4:	d132      	bne.n	800b33c <_vfiprintf_r+0x1ac>
 800b2d6:	9b03      	ldr	r3, [sp, #12]
 800b2d8:	1d1a      	adds	r2, r3, #4
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	9203      	str	r2, [sp, #12]
 800b2de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2e2:	3402      	adds	r4, #2
 800b2e4:	9305      	str	r3, [sp, #20]
 800b2e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b3bc <_vfiprintf_r+0x22c>
 800b2ea:	7821      	ldrb	r1, [r4, #0]
 800b2ec:	2203      	movs	r2, #3
 800b2ee:	4650      	mov	r0, sl
 800b2f0:	f7f4 ff8e 	bl	8000210 <memchr>
 800b2f4:	b138      	cbz	r0, 800b306 <_vfiprintf_r+0x176>
 800b2f6:	9b04      	ldr	r3, [sp, #16]
 800b2f8:	eba0 000a 	sub.w	r0, r0, sl
 800b2fc:	2240      	movs	r2, #64	@ 0x40
 800b2fe:	4082      	lsls	r2, r0
 800b300:	4313      	orrs	r3, r2
 800b302:	3401      	adds	r4, #1
 800b304:	9304      	str	r3, [sp, #16]
 800b306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b30a:	4829      	ldr	r0, [pc, #164]	@ (800b3b0 <_vfiprintf_r+0x220>)
 800b30c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b310:	2206      	movs	r2, #6
 800b312:	f7f4 ff7d 	bl	8000210 <memchr>
 800b316:	2800      	cmp	r0, #0
 800b318:	d03f      	beq.n	800b39a <_vfiprintf_r+0x20a>
 800b31a:	4b26      	ldr	r3, [pc, #152]	@ (800b3b4 <_vfiprintf_r+0x224>)
 800b31c:	bb1b      	cbnz	r3, 800b366 <_vfiprintf_r+0x1d6>
 800b31e:	9b03      	ldr	r3, [sp, #12]
 800b320:	3307      	adds	r3, #7
 800b322:	f023 0307 	bic.w	r3, r3, #7
 800b326:	3308      	adds	r3, #8
 800b328:	9303      	str	r3, [sp, #12]
 800b32a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b32c:	443b      	add	r3, r7
 800b32e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b330:	e76a      	b.n	800b208 <_vfiprintf_r+0x78>
 800b332:	fb0c 3202 	mla	r2, ip, r2, r3
 800b336:	460c      	mov	r4, r1
 800b338:	2001      	movs	r0, #1
 800b33a:	e7a8      	b.n	800b28e <_vfiprintf_r+0xfe>
 800b33c:	2300      	movs	r3, #0
 800b33e:	3401      	adds	r4, #1
 800b340:	9305      	str	r3, [sp, #20]
 800b342:	4619      	mov	r1, r3
 800b344:	f04f 0c0a 	mov.w	ip, #10
 800b348:	4620      	mov	r0, r4
 800b34a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b34e:	3a30      	subs	r2, #48	@ 0x30
 800b350:	2a09      	cmp	r2, #9
 800b352:	d903      	bls.n	800b35c <_vfiprintf_r+0x1cc>
 800b354:	2b00      	cmp	r3, #0
 800b356:	d0c6      	beq.n	800b2e6 <_vfiprintf_r+0x156>
 800b358:	9105      	str	r1, [sp, #20]
 800b35a:	e7c4      	b.n	800b2e6 <_vfiprintf_r+0x156>
 800b35c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b360:	4604      	mov	r4, r0
 800b362:	2301      	movs	r3, #1
 800b364:	e7f0      	b.n	800b348 <_vfiprintf_r+0x1b8>
 800b366:	ab03      	add	r3, sp, #12
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	462a      	mov	r2, r5
 800b36c:	4b12      	ldr	r3, [pc, #72]	@ (800b3b8 <_vfiprintf_r+0x228>)
 800b36e:	a904      	add	r1, sp, #16
 800b370:	4630      	mov	r0, r6
 800b372:	f7fd fbc9 	bl	8008b08 <_printf_float>
 800b376:	4607      	mov	r7, r0
 800b378:	1c78      	adds	r0, r7, #1
 800b37a:	d1d6      	bne.n	800b32a <_vfiprintf_r+0x19a>
 800b37c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b37e:	07d9      	lsls	r1, r3, #31
 800b380:	d405      	bmi.n	800b38e <_vfiprintf_r+0x1fe>
 800b382:	89ab      	ldrh	r3, [r5, #12]
 800b384:	059a      	lsls	r2, r3, #22
 800b386:	d402      	bmi.n	800b38e <_vfiprintf_r+0x1fe>
 800b388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b38a:	f7fe f92b 	bl	80095e4 <__retarget_lock_release_recursive>
 800b38e:	89ab      	ldrh	r3, [r5, #12]
 800b390:	065b      	lsls	r3, r3, #25
 800b392:	f53f af1f 	bmi.w	800b1d4 <_vfiprintf_r+0x44>
 800b396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b398:	e71e      	b.n	800b1d8 <_vfiprintf_r+0x48>
 800b39a:	ab03      	add	r3, sp, #12
 800b39c:	9300      	str	r3, [sp, #0]
 800b39e:	462a      	mov	r2, r5
 800b3a0:	4b05      	ldr	r3, [pc, #20]	@ (800b3b8 <_vfiprintf_r+0x228>)
 800b3a2:	a904      	add	r1, sp, #16
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	f7fd fe47 	bl	8009038 <_printf_i>
 800b3aa:	e7e4      	b.n	800b376 <_vfiprintf_r+0x1e6>
 800b3ac:	0800ba88 	.word	0x0800ba88
 800b3b0:	0800ba92 	.word	0x0800ba92
 800b3b4:	08008b09 	.word	0x08008b09
 800b3b8:	0800b16d 	.word	0x0800b16d
 800b3bc:	0800ba8e 	.word	0x0800ba8e

0800b3c0 <__swbuf_r>:
 800b3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c2:	460e      	mov	r6, r1
 800b3c4:	4614      	mov	r4, r2
 800b3c6:	4605      	mov	r5, r0
 800b3c8:	b118      	cbz	r0, 800b3d2 <__swbuf_r+0x12>
 800b3ca:	6a03      	ldr	r3, [r0, #32]
 800b3cc:	b90b      	cbnz	r3, 800b3d2 <__swbuf_r+0x12>
 800b3ce:	f7fd ffdf 	bl	8009390 <__sinit>
 800b3d2:	69a3      	ldr	r3, [r4, #24]
 800b3d4:	60a3      	str	r3, [r4, #8]
 800b3d6:	89a3      	ldrh	r3, [r4, #12]
 800b3d8:	071a      	lsls	r2, r3, #28
 800b3da:	d501      	bpl.n	800b3e0 <__swbuf_r+0x20>
 800b3dc:	6923      	ldr	r3, [r4, #16]
 800b3de:	b943      	cbnz	r3, 800b3f2 <__swbuf_r+0x32>
 800b3e0:	4621      	mov	r1, r4
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	f000 f82a 	bl	800b43c <__swsetup_r>
 800b3e8:	b118      	cbz	r0, 800b3f2 <__swbuf_r+0x32>
 800b3ea:	f04f 37ff 	mov.w	r7, #4294967295
 800b3ee:	4638      	mov	r0, r7
 800b3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3f2:	6823      	ldr	r3, [r4, #0]
 800b3f4:	6922      	ldr	r2, [r4, #16]
 800b3f6:	1a98      	subs	r0, r3, r2
 800b3f8:	6963      	ldr	r3, [r4, #20]
 800b3fa:	b2f6      	uxtb	r6, r6
 800b3fc:	4283      	cmp	r3, r0
 800b3fe:	4637      	mov	r7, r6
 800b400:	dc05      	bgt.n	800b40e <__swbuf_r+0x4e>
 800b402:	4621      	mov	r1, r4
 800b404:	4628      	mov	r0, r5
 800b406:	f7ff fd99 	bl	800af3c <_fflush_r>
 800b40a:	2800      	cmp	r0, #0
 800b40c:	d1ed      	bne.n	800b3ea <__swbuf_r+0x2a>
 800b40e:	68a3      	ldr	r3, [r4, #8]
 800b410:	3b01      	subs	r3, #1
 800b412:	60a3      	str	r3, [r4, #8]
 800b414:	6823      	ldr	r3, [r4, #0]
 800b416:	1c5a      	adds	r2, r3, #1
 800b418:	6022      	str	r2, [r4, #0]
 800b41a:	701e      	strb	r6, [r3, #0]
 800b41c:	6962      	ldr	r2, [r4, #20]
 800b41e:	1c43      	adds	r3, r0, #1
 800b420:	429a      	cmp	r2, r3
 800b422:	d004      	beq.n	800b42e <__swbuf_r+0x6e>
 800b424:	89a3      	ldrh	r3, [r4, #12]
 800b426:	07db      	lsls	r3, r3, #31
 800b428:	d5e1      	bpl.n	800b3ee <__swbuf_r+0x2e>
 800b42a:	2e0a      	cmp	r6, #10
 800b42c:	d1df      	bne.n	800b3ee <__swbuf_r+0x2e>
 800b42e:	4621      	mov	r1, r4
 800b430:	4628      	mov	r0, r5
 800b432:	f7ff fd83 	bl	800af3c <_fflush_r>
 800b436:	2800      	cmp	r0, #0
 800b438:	d0d9      	beq.n	800b3ee <__swbuf_r+0x2e>
 800b43a:	e7d6      	b.n	800b3ea <__swbuf_r+0x2a>

0800b43c <__swsetup_r>:
 800b43c:	b538      	push	{r3, r4, r5, lr}
 800b43e:	4b29      	ldr	r3, [pc, #164]	@ (800b4e4 <__swsetup_r+0xa8>)
 800b440:	4605      	mov	r5, r0
 800b442:	6818      	ldr	r0, [r3, #0]
 800b444:	460c      	mov	r4, r1
 800b446:	b118      	cbz	r0, 800b450 <__swsetup_r+0x14>
 800b448:	6a03      	ldr	r3, [r0, #32]
 800b44a:	b90b      	cbnz	r3, 800b450 <__swsetup_r+0x14>
 800b44c:	f7fd ffa0 	bl	8009390 <__sinit>
 800b450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b454:	0719      	lsls	r1, r3, #28
 800b456:	d422      	bmi.n	800b49e <__swsetup_r+0x62>
 800b458:	06da      	lsls	r2, r3, #27
 800b45a:	d407      	bmi.n	800b46c <__swsetup_r+0x30>
 800b45c:	2209      	movs	r2, #9
 800b45e:	602a      	str	r2, [r5, #0]
 800b460:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b464:	81a3      	strh	r3, [r4, #12]
 800b466:	f04f 30ff 	mov.w	r0, #4294967295
 800b46a:	e033      	b.n	800b4d4 <__swsetup_r+0x98>
 800b46c:	0758      	lsls	r0, r3, #29
 800b46e:	d512      	bpl.n	800b496 <__swsetup_r+0x5a>
 800b470:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b472:	b141      	cbz	r1, 800b486 <__swsetup_r+0x4a>
 800b474:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b478:	4299      	cmp	r1, r3
 800b47a:	d002      	beq.n	800b482 <__swsetup_r+0x46>
 800b47c:	4628      	mov	r0, r5
 800b47e:	f7fe feff 	bl	800a280 <_free_r>
 800b482:	2300      	movs	r3, #0
 800b484:	6363      	str	r3, [r4, #52]	@ 0x34
 800b486:	89a3      	ldrh	r3, [r4, #12]
 800b488:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b48c:	81a3      	strh	r3, [r4, #12]
 800b48e:	2300      	movs	r3, #0
 800b490:	6063      	str	r3, [r4, #4]
 800b492:	6923      	ldr	r3, [r4, #16]
 800b494:	6023      	str	r3, [r4, #0]
 800b496:	89a3      	ldrh	r3, [r4, #12]
 800b498:	f043 0308 	orr.w	r3, r3, #8
 800b49c:	81a3      	strh	r3, [r4, #12]
 800b49e:	6923      	ldr	r3, [r4, #16]
 800b4a0:	b94b      	cbnz	r3, 800b4b6 <__swsetup_r+0x7a>
 800b4a2:	89a3      	ldrh	r3, [r4, #12]
 800b4a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b4a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4ac:	d003      	beq.n	800b4b6 <__swsetup_r+0x7a>
 800b4ae:	4621      	mov	r1, r4
 800b4b0:	4628      	mov	r0, r5
 800b4b2:	f000 f883 	bl	800b5bc <__smakebuf_r>
 800b4b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4ba:	f013 0201 	ands.w	r2, r3, #1
 800b4be:	d00a      	beq.n	800b4d6 <__swsetup_r+0x9a>
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	60a2      	str	r2, [r4, #8]
 800b4c4:	6962      	ldr	r2, [r4, #20]
 800b4c6:	4252      	negs	r2, r2
 800b4c8:	61a2      	str	r2, [r4, #24]
 800b4ca:	6922      	ldr	r2, [r4, #16]
 800b4cc:	b942      	cbnz	r2, 800b4e0 <__swsetup_r+0xa4>
 800b4ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b4d2:	d1c5      	bne.n	800b460 <__swsetup_r+0x24>
 800b4d4:	bd38      	pop	{r3, r4, r5, pc}
 800b4d6:	0799      	lsls	r1, r3, #30
 800b4d8:	bf58      	it	pl
 800b4da:	6962      	ldrpl	r2, [r4, #20]
 800b4dc:	60a2      	str	r2, [r4, #8]
 800b4de:	e7f4      	b.n	800b4ca <__swsetup_r+0x8e>
 800b4e0:	2000      	movs	r0, #0
 800b4e2:	e7f7      	b.n	800b4d4 <__swsetup_r+0x98>
 800b4e4:	2000001c 	.word	0x2000001c

0800b4e8 <_raise_r>:
 800b4e8:	291f      	cmp	r1, #31
 800b4ea:	b538      	push	{r3, r4, r5, lr}
 800b4ec:	4605      	mov	r5, r0
 800b4ee:	460c      	mov	r4, r1
 800b4f0:	d904      	bls.n	800b4fc <_raise_r+0x14>
 800b4f2:	2316      	movs	r3, #22
 800b4f4:	6003      	str	r3, [r0, #0]
 800b4f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b4fa:	bd38      	pop	{r3, r4, r5, pc}
 800b4fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b4fe:	b112      	cbz	r2, 800b506 <_raise_r+0x1e>
 800b500:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b504:	b94b      	cbnz	r3, 800b51a <_raise_r+0x32>
 800b506:	4628      	mov	r0, r5
 800b508:	f000 f830 	bl	800b56c <_getpid_r>
 800b50c:	4622      	mov	r2, r4
 800b50e:	4601      	mov	r1, r0
 800b510:	4628      	mov	r0, r5
 800b512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b516:	f000 b817 	b.w	800b548 <_kill_r>
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d00a      	beq.n	800b534 <_raise_r+0x4c>
 800b51e:	1c59      	adds	r1, r3, #1
 800b520:	d103      	bne.n	800b52a <_raise_r+0x42>
 800b522:	2316      	movs	r3, #22
 800b524:	6003      	str	r3, [r0, #0]
 800b526:	2001      	movs	r0, #1
 800b528:	e7e7      	b.n	800b4fa <_raise_r+0x12>
 800b52a:	2100      	movs	r1, #0
 800b52c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b530:	4620      	mov	r0, r4
 800b532:	4798      	blx	r3
 800b534:	2000      	movs	r0, #0
 800b536:	e7e0      	b.n	800b4fa <_raise_r+0x12>

0800b538 <raise>:
 800b538:	4b02      	ldr	r3, [pc, #8]	@ (800b544 <raise+0xc>)
 800b53a:	4601      	mov	r1, r0
 800b53c:	6818      	ldr	r0, [r3, #0]
 800b53e:	f7ff bfd3 	b.w	800b4e8 <_raise_r>
 800b542:	bf00      	nop
 800b544:	2000001c 	.word	0x2000001c

0800b548 <_kill_r>:
 800b548:	b538      	push	{r3, r4, r5, lr}
 800b54a:	4d07      	ldr	r5, [pc, #28]	@ (800b568 <_kill_r+0x20>)
 800b54c:	2300      	movs	r3, #0
 800b54e:	4604      	mov	r4, r0
 800b550:	4608      	mov	r0, r1
 800b552:	4611      	mov	r1, r2
 800b554:	602b      	str	r3, [r5, #0]
 800b556:	f7f6 fd01 	bl	8001f5c <_kill>
 800b55a:	1c43      	adds	r3, r0, #1
 800b55c:	d102      	bne.n	800b564 <_kill_r+0x1c>
 800b55e:	682b      	ldr	r3, [r5, #0]
 800b560:	b103      	cbz	r3, 800b564 <_kill_r+0x1c>
 800b562:	6023      	str	r3, [r4, #0]
 800b564:	bd38      	pop	{r3, r4, r5, pc}
 800b566:	bf00      	nop
 800b568:	20000cfc 	.word	0x20000cfc

0800b56c <_getpid_r>:
 800b56c:	f7f6 bcee 	b.w	8001f4c <_getpid>

0800b570 <__swhatbuf_r>:
 800b570:	b570      	push	{r4, r5, r6, lr}
 800b572:	460c      	mov	r4, r1
 800b574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b578:	2900      	cmp	r1, #0
 800b57a:	b096      	sub	sp, #88	@ 0x58
 800b57c:	4615      	mov	r5, r2
 800b57e:	461e      	mov	r6, r3
 800b580:	da0d      	bge.n	800b59e <__swhatbuf_r+0x2e>
 800b582:	89a3      	ldrh	r3, [r4, #12]
 800b584:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b588:	f04f 0100 	mov.w	r1, #0
 800b58c:	bf14      	ite	ne
 800b58e:	2340      	movne	r3, #64	@ 0x40
 800b590:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b594:	2000      	movs	r0, #0
 800b596:	6031      	str	r1, [r6, #0]
 800b598:	602b      	str	r3, [r5, #0]
 800b59a:	b016      	add	sp, #88	@ 0x58
 800b59c:	bd70      	pop	{r4, r5, r6, pc}
 800b59e:	466a      	mov	r2, sp
 800b5a0:	f000 f848 	bl	800b634 <_fstat_r>
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	dbec      	blt.n	800b582 <__swhatbuf_r+0x12>
 800b5a8:	9901      	ldr	r1, [sp, #4]
 800b5aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b5ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b5b2:	4259      	negs	r1, r3
 800b5b4:	4159      	adcs	r1, r3
 800b5b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5ba:	e7eb      	b.n	800b594 <__swhatbuf_r+0x24>

0800b5bc <__smakebuf_r>:
 800b5bc:	898b      	ldrh	r3, [r1, #12]
 800b5be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5c0:	079d      	lsls	r5, r3, #30
 800b5c2:	4606      	mov	r6, r0
 800b5c4:	460c      	mov	r4, r1
 800b5c6:	d507      	bpl.n	800b5d8 <__smakebuf_r+0x1c>
 800b5c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b5cc:	6023      	str	r3, [r4, #0]
 800b5ce:	6123      	str	r3, [r4, #16]
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	6163      	str	r3, [r4, #20]
 800b5d4:	b003      	add	sp, #12
 800b5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5d8:	ab01      	add	r3, sp, #4
 800b5da:	466a      	mov	r2, sp
 800b5dc:	f7ff ffc8 	bl	800b570 <__swhatbuf_r>
 800b5e0:	9f00      	ldr	r7, [sp, #0]
 800b5e2:	4605      	mov	r5, r0
 800b5e4:	4639      	mov	r1, r7
 800b5e6:	4630      	mov	r0, r6
 800b5e8:	f7fe febe 	bl	800a368 <_malloc_r>
 800b5ec:	b948      	cbnz	r0, 800b602 <__smakebuf_r+0x46>
 800b5ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5f2:	059a      	lsls	r2, r3, #22
 800b5f4:	d4ee      	bmi.n	800b5d4 <__smakebuf_r+0x18>
 800b5f6:	f023 0303 	bic.w	r3, r3, #3
 800b5fa:	f043 0302 	orr.w	r3, r3, #2
 800b5fe:	81a3      	strh	r3, [r4, #12]
 800b600:	e7e2      	b.n	800b5c8 <__smakebuf_r+0xc>
 800b602:	89a3      	ldrh	r3, [r4, #12]
 800b604:	6020      	str	r0, [r4, #0]
 800b606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b60a:	81a3      	strh	r3, [r4, #12]
 800b60c:	9b01      	ldr	r3, [sp, #4]
 800b60e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b612:	b15b      	cbz	r3, 800b62c <__smakebuf_r+0x70>
 800b614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b618:	4630      	mov	r0, r6
 800b61a:	f000 f81d 	bl	800b658 <_isatty_r>
 800b61e:	b128      	cbz	r0, 800b62c <__smakebuf_r+0x70>
 800b620:	89a3      	ldrh	r3, [r4, #12]
 800b622:	f023 0303 	bic.w	r3, r3, #3
 800b626:	f043 0301 	orr.w	r3, r3, #1
 800b62a:	81a3      	strh	r3, [r4, #12]
 800b62c:	89a3      	ldrh	r3, [r4, #12]
 800b62e:	431d      	orrs	r5, r3
 800b630:	81a5      	strh	r5, [r4, #12]
 800b632:	e7cf      	b.n	800b5d4 <__smakebuf_r+0x18>

0800b634 <_fstat_r>:
 800b634:	b538      	push	{r3, r4, r5, lr}
 800b636:	4d07      	ldr	r5, [pc, #28]	@ (800b654 <_fstat_r+0x20>)
 800b638:	2300      	movs	r3, #0
 800b63a:	4604      	mov	r4, r0
 800b63c:	4608      	mov	r0, r1
 800b63e:	4611      	mov	r1, r2
 800b640:	602b      	str	r3, [r5, #0]
 800b642:	f7f6 fceb 	bl	800201c <_fstat>
 800b646:	1c43      	adds	r3, r0, #1
 800b648:	d102      	bne.n	800b650 <_fstat_r+0x1c>
 800b64a:	682b      	ldr	r3, [r5, #0]
 800b64c:	b103      	cbz	r3, 800b650 <_fstat_r+0x1c>
 800b64e:	6023      	str	r3, [r4, #0]
 800b650:	bd38      	pop	{r3, r4, r5, pc}
 800b652:	bf00      	nop
 800b654:	20000cfc 	.word	0x20000cfc

0800b658 <_isatty_r>:
 800b658:	b538      	push	{r3, r4, r5, lr}
 800b65a:	4d06      	ldr	r5, [pc, #24]	@ (800b674 <_isatty_r+0x1c>)
 800b65c:	2300      	movs	r3, #0
 800b65e:	4604      	mov	r4, r0
 800b660:	4608      	mov	r0, r1
 800b662:	602b      	str	r3, [r5, #0]
 800b664:	f7f6 fcea 	bl	800203c <_isatty>
 800b668:	1c43      	adds	r3, r0, #1
 800b66a:	d102      	bne.n	800b672 <_isatty_r+0x1a>
 800b66c:	682b      	ldr	r3, [r5, #0]
 800b66e:	b103      	cbz	r3, 800b672 <_isatty_r+0x1a>
 800b670:	6023      	str	r3, [r4, #0]
 800b672:	bd38      	pop	{r3, r4, r5, pc}
 800b674:	20000cfc 	.word	0x20000cfc

0800b678 <_init>:
 800b678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b67a:	bf00      	nop
 800b67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b67e:	bc08      	pop	{r3}
 800b680:	469e      	mov	lr, r3
 800b682:	4770      	bx	lr

0800b684 <_fini>:
 800b684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b686:	bf00      	nop
 800b688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b68a:	bc08      	pop	{r3}
 800b68c:	469e      	mov	lr, r3
 800b68e:	4770      	bx	lr
